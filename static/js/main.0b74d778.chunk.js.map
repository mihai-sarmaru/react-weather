{"version":3,"sources":["components/DetailWeather/DetailItem/DetailItemTypes.ts","components/QuickNavigation/QuickNavigation.tsx","components/WeatherIcon/WeatherIcon.tsx","components/CurrentWeather/CurrentWeather.tsx","components/WeatherChart/chartType.ts","components/DetailWeather/DetailItem/DetailItem.tsx","utils/DateConverter.ts","components/DetailWeather/DetailWeather.tsx","components/FetchingWeather/FetchingWeather.tsx","utils/env.ts","axios/axios-weather.ts","store/Weather/models/WeatherActionsModel.ts","store/Weather/utils/WeatherMapper.ts","store/Weather/WeatherActions.ts","containers/CurrentWeatherContainer/CurrentWeatherContainer.tsx","components/Forecast/OverviewDetailItem/OverviewDetailItem.tsx","components/Forecast/OverviewItem/OverviewItem.tsx","containers/ForecastContainer/ForecastContainer.tsx","components/WeatherChart/ChartTooltip/ChartTooltip.tsx","components/WeatherChart/WeatherChart.tsx","containers/HourlyWeatherContainer/HourlyWeatherContainer.tsx","App.tsx","store/Weather/WeatherReducer.ts","store/rootStore.ts","index.tsx"],"names":["DetailItemType","QuickNavigation","ButtonGroup","variant","style","margin","Button","startIcon","component","Link","to","WeatherIcon","props","weatherIcon","size","color","iconId","Fragment","CurrentWeather","Grid","container","spacing","marginBottom","width","item","xs","textAlign","weatherIconId","from","number","temperature","Typography","className","toFixed","feelsLike","description","chartType","DetailItem","itemIcon","itemValue","itemDescription","itemType","PRECIPITATION_CHANCE","value","WIND","UV_INDEX","CLOUD_COVER","PRESSURE","HUMIDITY","DEW_POINT","VISIBILITY","SUNRISE","SUNSET","marginTop","UnixUTCToHourMinuteString","utcTime","date","Date","getHours","getMinutes","UnixUTCToDayString","getDay","getDate","DetailWeather","opacity","sprops","md","lg","precipitation","currentWeather","windSpeed","uvi","clouds","pressure","humidity","dewPoint","visibility","sunrise","sunset","FetchingWeather","CircularProgress","env","process","this","buildApi","main","apiK","replace","substring","length","instance","axios","create","baseURL","getBaseAPI","FETCH_WEATHER_REQUEST","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","mapIWeatherCoordinates","coord","latitude","lat","longitude","lon","timezoneOffset","timezone_offset","mapICurrentWeather","current","weatherDesc","mapIWeatherDescription","weather","dt","temp","feels_like","dew_point","wind_speed","map","wdesc","id","mapIHourlyWeather","hourlyWeather","hourly","pop","mapIForecastWeather","forecastWeather","forecast","maxTemp","max","minTemp","min","fetchWeather","long","dispatch","type","loading","error","get","getApiDefaultParams","params","then","response","fetchedWeather","data","coordinates","daily","catch","console","log","message","CurrentWeatherContainer","onLoadWeather","navigator","geolocation","getCurrentPosition","pos","coords","Component","connect","state","weatherReducer","bindActionCreators","OverviewDetailItem","sm","marginLeft","Paper","background","OverviewItem","onClick","expandClick","display","marginRight","IconButton","expanded","isOpened","ForecastContainer","initLocalState","forecastLength","exArr","i","push","setState","onExpandClick","index","prevState","itemIndex","fetchWeatherForecast","overviewItems","history","withRouter","ChartTooltip","tooltipMeasurement","tooltipMeasurementIcon","active","TEMPERATURE","payload","PRECIPITATION","tooltip","elevation","padding","WeatherChart","parsedData","forEach","element","newElem","chartDataKey","chartDataUnit","chartTypeHandler","justifyContent","height","top","left","right","dataKey","tickLine","tick","position","offset","axisLine","stroke","strokeDasharray","horizontal","content","strokeWidth","HourlyWeatherContainer","fetchHourlyWeather","weatherChart","onChartButtonClick","path","initialState","FetchWeatherSuccess","action","FetchWeatherFailure","middleware","createLogger","thunk","rootReducer","combineReducers","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b74d778.chunk.js","sourcesContent":["enum DetailItemType {\r\n    PRECIPITATION_CHANCE,\r\n    WIND,\r\n    UV_INDEX,\r\n    CLOUD_COVER,\r\n    PRESSURE,\r\n    HUMIDITY,\r\n    DEW_POINT,\r\n    VISIBILITY,\r\n    SUNRISE,\r\n    SUNSET\r\n}\r\n\r\nexport default DetailItemType;","import { Button, ButtonGroup } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as WiIcons from 'react-icons/wi';\r\n\r\nconst QuickNavigation = () => {\r\n    return(\r\n        <ButtonGroup variant='outlined' style={{margin: '40px 0'}}>\r\n            <Button startIcon={<WiIcons.WiThermometer />}\r\n                component={Link} to={'/'}>Now</Button>\r\n            <Button startIcon={<WiIcons.WiTime4 />}\r\n                component={Link} to={'/hourly'}>Hourly</Button>\r\n            <Button startIcon={<WiIcons.WiWindDeg />}\r\n                component={Link} to={'/forecast'}>Later</Button>\r\n        </ButtonGroup>\r\n    );\r\n}\r\n\r\nexport default QuickNavigation;","import React from 'react';\r\nimport * as Icon from 'react-icons/wi'\r\n\r\ninterface WeatherIconProps {\r\n    iconId: number,\r\n    size?: number\r\n}\r\n\r\nconst WeatherIcon: React.FC<WeatherIconProps> = (props) => {\r\n\r\n    // Default alien icon\r\n    let weatherIcon = <Icon.WiAlien size={props.size} color='#7d8b8e' />\r\n\r\n    // Thunderstorm\r\n    if (props.iconId >= 200 && props.iconId < 300) {\r\n        weatherIcon = <Icon.WiThunderstorm size={props.size} color='#7d8b8e' />\r\n    }\r\n\r\n    // Drizzle\r\n    if (props.iconId >= 300 && props.iconId < 400) {\r\n        weatherIcon = <Icon.WiRainMix size={props.size} color='#96a7af' />\r\n    }\r\n\r\n    // Rain\r\n    if (props.iconId >= 500 && props.iconId < 600) {\r\n        weatherIcon = <Icon.WiRain size={props.size} color='#83c2d3' />\r\n    }\r\n\r\n    // Snow\r\n    if (props.iconId >= 600 && props.iconId < 700) {\r\n        weatherIcon = <Icon.WiSnowflakeCold size={props.size} color='#97becf' />\r\n    }\r\n\r\n    // Atmosphere\r\n    if (props.iconId >= 700 && props.iconId < 800) {\r\n        weatherIcon = <Icon.WiFog size={props.size} color='#becbd1' />\r\n    }\r\n\r\n    // Clear\r\n    if (props.iconId === 800) {\r\n        weatherIcon = <Icon.WiDaySunny size={props.size} color='#edcf53' />\r\n    }\r\n\r\n    // Cloudy\r\n    if (props.iconId > 800 && props.iconId < 900) {\r\n        weatherIcon = <Icon.WiCloudy size={props.size} color='#becbd1' />\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {weatherIcon}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default WeatherIcon;","import React from \"react\";\r\nimport 'fontsource-roboto';\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport { Spring } from 'react-spring/renderprops';\r\n\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\n\r\ninterface CurrentWeatherProps {\r\n    temperature: number,\r\n    feelsLike: number,\r\n    description: string,\r\n    weatherIconId: number\r\n}\r\n\r\nconst CurrentWeather: React.FC<CurrentWeatherProps> = (props) => {\r\n    return (\r\n        <Grid container spacing={2} style={{marginBottom: '40px', width: '98%'}}>\r\n            <Grid item xs={6}>\r\n                <div style={{textAlign: 'right'}}>\r\n                    <WeatherIcon iconId={props.weatherIconId} size={140}/>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <div style={{textAlign: 'left'}}>\r\n                    <Spring\r\n                        from={{number: 0}}\r\n                        to={{number: props.temperature}}>\r\n                            {props => <Typography variant='h2' className='typography-primary'>{props.number.toFixed()}°</Typography> }\r\n                    </Spring>\r\n                    <Typography variant='h6' className='typography-primary'>Feels like {props.feelsLike}°</Typography>\r\n                    <Typography variant='subtitle1' className='typography-secondary'>{props.description}</Typography>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","enum chartType {\r\n    TEMPERATURE,\r\n    WIND,\r\n    PRECIPITATION\r\n}\r\n\r\nexport default chartType;","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Grid } from '@material-ui/core';\r\nimport * as Icon from 'react-icons/wi'\r\nimport DetailItemType from './DetailItemTypes';\r\n\r\ninterface DetailItemProps {\r\n    itemType: DetailItemType,\r\n    value: number | string\r\n}\r\n\r\nconst DetailItem: React.FC<DetailItemProps> = (props) => {\r\n\r\n    let itemIcon = <Icon.WiAlien size={42} />\r\n    let itemValue = 'NA';\r\n    let itemDescription = 'NA';\r\n\r\n    switch (props.itemType) {\r\n        case DetailItemType.PRECIPITATION_CHANCE:\r\n            itemIcon = <Icon.WiUmbrella size={42} color='#666' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = 'Chance';\r\n            break;\r\n        case DetailItemType.WIND:\r\n            itemIcon = <Icon.WiStrongWind size={42} color='#becbd1' />\r\n            itemValue = props.value + ' km/h';\r\n            itemDescription = 'Wind speed';\r\n            break;\r\n        case DetailItemType.UV_INDEX:\r\n            itemIcon = <Icon.WiSolarEclipse size={42} color='#cbad33' />\r\n            itemValue = props.value as string;\r\n            itemDescription = 'UV index';\r\n            break;\r\n        case DetailItemType.CLOUD_COVER:\r\n            itemIcon = <Icon.WiCloudRefresh size={42} color='#becbd1' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = 'Cloud cover';\r\n            break;\r\n        case DetailItemType.PRESSURE:\r\n            itemIcon = <Icon.WiBarometer size={42} color='#666' />\r\n            itemValue = props.value + ' mmHg';\r\n            itemDescription = 'Pressure';\r\n            break;\r\n        case DetailItemType.HUMIDITY:\r\n            itemIcon = <Icon.WiHumidity size={42} color='#86c3d6' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = 'Humidity';\r\n            break;\r\n        case DetailItemType.DEW_POINT:\r\n            itemIcon = <Icon.WiThermometerInternal size={42} color='#86c3d6' />\r\n            itemValue = props.value + ' °';\r\n            itemDescription = 'Dew point';\r\n            break;\r\n        case DetailItemType.VISIBILITY:\r\n            itemIcon = <Icon.WiTrain size={42} color='#999' />\r\n            itemValue = props.value + ' km';\r\n            itemDescription = 'Visibility';\r\n            break;\r\n        case DetailItemType.SUNRISE:\r\n            itemIcon = <Icon.WiSunrise size={42} color='#edcf53' />\r\n            itemValue = props.value as string;\r\n            itemDescription = 'Sunrise';\r\n            break;\r\n        case DetailItemType.SUNSET:\r\n            itemIcon = <Icon.WiSunset size={42} color='#edcf53' />\r\n            itemValue = props.value as string;\r\n            itemDescription = 'Sunset';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return(\r\n        <Grid container spacing={2} style={{marginTop: '1px'}}>\r\n            <Grid item xs={4}>\r\n                <div style={{textAlign: 'right'}}>\r\n                    {itemIcon}\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <div style={{textAlign: 'left'}}>\r\n                    <Typography variant='subtitle2' className='typography-primary'><strong>{itemValue}</strong></Typography>\r\n                    <Typography variant='body2' className='typography-secondary'>{itemDescription}</Typography>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default DetailItem;","export const UnixUTCToHourMinuteString = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours() + ':' + date.getMinutes();\r\n}\r\n\r\nexport const UnixUTCToDayString = (utcTime: number) => {\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    const date = new Date(utcTime);\r\n    return days[date.getDay()] + ' ' + date.getDate();\r\n}\r\n\r\nexport const UnixUTCHourString = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours();\r\n}","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport DetailItem from './DetailItem/DetailItem';\r\nimport DetailItemType from './DetailItem/DetailItemTypes';\r\nimport { ICurrentWeather } from '../../store/Weather/models/Weather';\r\nimport { UnixUTCToHourMinuteString } from '../../utils/DateConverter';\r\nimport { Spring } from 'react-spring/renderprops';\r\n\r\ninterface DetailWeatherProps {\r\n    currentWeather: ICurrentWeather;\r\n    precipitation: number;\r\n}\r\n\r\nconst DetailWeather: React.FC<DetailWeatherProps> = (props) => {\r\n    return (\r\n        <Spring from={{opacity: 0}} to={{opacity: 1}}>\r\n                { sprops => \r\n                    <div style={sprops}>\r\n\r\n                        <div style={{margin: 'auto', width: '80%'}}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.PRECIPITATION_CHANCE} value={props.precipitation}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.WIND} value={props.currentWeather.windSpeed}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.UV_INDEX} value={props.currentWeather.uvi}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.CLOUD_COVER} value={props.currentWeather.clouds}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.PRESSURE} value={props.currentWeather.pressure}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.HUMIDITY} value={props.currentWeather.humidity}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.DEW_POINT} value={props.currentWeather.dewPoint}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.VISIBILITY} value={props.currentWeather.visibility}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.SUNRISE} value={UnixUTCToHourMinuteString(props.currentWeather.sunrise)}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.SUNSET} value={UnixUTCToHourMinuteString(props.currentWeather.sunset)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n\r\n                    </div>\r\n                }\r\n        </Spring>\r\n    );\r\n}\r\n\r\nexport default DetailWeather;","import React from \"react\";\r\nimport { CircularProgress, Typography } from \"@material-ui/core\";\r\n\r\nconst FetchingWeather = () => {\r\n    return <div style={{margin: '50px 0'}}>\r\n        <CircularProgress />\r\n        <Typography variant='subtitle1'>Fetching Weather</Typography>\r\n    </div>;\r\n};\r\n\r\nexport default FetchingWeather;","class env {\r\n\r\n    public static getBaseAPI() {\r\n        return process.env.REACT_APP_BASE_API;\r\n    }\r\n\r\n    public static getApiDefaultParams() {\r\n        return process.env.REACT_APP_API_PARAMS + this.buildApi(true);\r\n    }\r\n\r\n    public static getApiLocK() {\r\n        return this.buildApi(false);\r\n    }\r\n\r\n    private static buildApi(main: boolean) {\r\n        const apiK = main ? process.env.REACT_APP_WK! : process.env.REACT_APP_LC!;\r\n        return apiK.replace(apiK.substring(apiK.length - 2, apiK.length), '');\r\n    }\r\n\r\n}\r\n\r\nexport default env;","import axios from \"axios\";\r\nimport env from '../utils/env';\r\n\r\nconst instance = axios.create({\r\n    baseURL:\r\n        env.getBaseAPI() ||\r\n        \"https://raw.githubusercontent.com/Predator7/react-weather/main/src/sample-api/weather.json\",\r\n});\r\n\r\nexport default instance;\r\n","import { IWeather } from \"./Weather\";\r\n\r\nexport const FETCH_WEATHER_REQUEST = \"FETCH_WEATHER_REQUEST\";\r\nexport const FETCH_WEATHER_SUCCESS = \"FETCH_WEATHER_SUCCESS\";\r\nexport const FETCH_WEATHER_FAILURE = \"FETCH_WEATHER_FAILURE\";\r\n\r\ninterface WeatherAsync {\r\n    loading: boolean;\r\n    error: string;\r\n    weather: IWeather;\r\n}\r\n\r\ninterface FetchWeatherRequest extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_REQUEST;\r\n}\r\ninterface FetchWeatherSuccess extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_SUCCESS;\r\n}\r\ninterface FetchWeatherFailure extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_FAILURE;\r\n}\r\n\r\nexport type WeatherActionTypes =\r\n    | FetchWeatherRequest\r\n    | FetchWeatherSuccess\r\n    | FetchWeatherFailure; // | PostWeather ...\r\n","import { IForecastWeather, IHourlyWeather, IWeather, IWeatherDescription } from \"../models/Weather\"\r\n\r\nexport const mapIWeather = (weather: any): IWeather => {\r\n    const coords = mapIWeatherCoordinates(weather);\r\n    const current = mapICurrentWeather(weather.current);\r\n    const hourly = mapIHourlyWeather(weather.hourly);\r\n    const fcst = mapIForecastWeather(weather.daily);\r\n    \r\n    const convertedWeather: IWeather = {\r\n        coordinates: coords,\r\n        currentWeather: current,\r\n        hourlyWeather: hourly,\r\n        forecast: fcst\r\n    }\r\n\r\n    return convertedWeather;\r\n}\r\n\r\nconst mapIWeatherCoordinates = (coord: any) => {\r\n    return {\r\n        latitude: coord.lat,\r\n        longitude: coord.lon,\r\n        timezoneOffset: coord.timezone_offset * 1000\r\n    }\r\n}\r\n\r\nconst mapICurrentWeather = (current: any) => {\r\n    const weatherDesc = mapIWeatherDescription(current.weather);\r\n    return {\r\n        dt: current.dt * 1000,\r\n        sunrise: current.sunrise * 1000,\r\n        sunset: current.sunset * 1000,\r\n        temp: current.temp.toFixed(0),\r\n        feelsLike: current.feels_like.toFixed(0),\r\n        pressure: current.pressure,\r\n        humidity: current.humidity,\r\n        dewPoint: current.dew_point.toFixed(0),\r\n        uvi: current.uvi,\r\n        clouds: current.clouds,\r\n        visibility: current.visibility / 1000,\r\n        windSpeed: current.wind_speed.toFixed(0),\r\n        weather: weatherDesc\r\n    }\r\n}\r\n\r\nconst mapIWeatherDescription = (weather: any[]) => {\r\n    return weather.map(wdesc => {\r\n        return ({\r\n            id: wdesc.id,\r\n            main: wdesc.main,\r\n            description: wdesc.description,\r\n        } as IWeatherDescription);\r\n    });\r\n}\r\n\r\nconst mapIHourlyWeather = (hourlyWeather: any[]) => {\r\n    return hourlyWeather.map(hourly => {\r\n        return ({\r\n            dt: hourly.dt * 1000,\r\n            temp: hourly.temp.toFixed(0),\r\n            windSpeed: hourly.wind_speed.toFixed(0),\r\n            precipitation: +(hourly.pop * 100).toFixed(0),\r\n            weather: mapIWeatherDescription(hourly.weather)\r\n        } as IHourlyWeather);\r\n    });\r\n}\r\n\r\nconst mapIForecastWeather = (forecastWeather: any[]) => {\r\n    return forecastWeather.map(forecast => {\r\n        return ({\r\n            dt: forecast.dt * 1000,\r\n            precipitation: +(forecast.pop * 100).toFixed(0),\r\n            maxTemp: +forecast.temp.max.toFixed(0),\r\n            minTemp: +forecast.temp.min.toFixed(0),\r\n            windSpeed: +forecast.wind_speed.toFixed(0),\r\n            uvi: forecast.uvi,\r\n            clouds: forecast.clouds,\r\n            pressure: forecast.pressure,\r\n            sunrise: forecast.sunrise * 1000,\r\n            sunset: forecast.sunset * 1000,\r\n            weather: mapIWeatherDescription(forecast.weather)\r\n        } as IForecastWeather);\r\n    });\r\n}","import { Dispatch } from 'redux';\r\nimport axios from '../../axios/axios-weather';\r\nimport env from '../../utils/env';\r\nimport { FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from './models/WeatherActionsModel';\r\nimport { IWeather } from './models/Weather';\r\nimport { AppActions } from '../actions';\r\nimport { mapIWeather } from './utils/WeatherMapper';\r\n\r\nconst requestWeather = (): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_REQUEST,\r\n        loading: true,\r\n        error: '',\r\n        weather: {} as IWeather\r\n    }\r\n}\r\n\r\nconst receiveWeather = (fetchedWeather: IWeather): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_SUCCESS,\r\n        loading: false,\r\n        error: '',\r\n        weather: fetchedWeather\r\n    }\r\n}\r\n\r\nconst invalidWeather = (): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_FAILURE,\r\n        loading: false,\r\n        error: 'Something went wrong fetching weather',\r\n        weather: {} as any\r\n    }\r\n}\r\n\r\nexport const fetchWeather = (lat: number, long: number) => {\r\n    return (dispatch: Dispatch<AppActions>) => {\r\n        dispatch(requestWeather());\r\n        axios.get('/' + env.getApiDefaultParams(), {params: {lat: lat, lon: long}})\r\n            .then(response => { \r\n                dispatch(receiveWeather(mapIWeather(response.data)));\r\n            })\r\n            .catch(error => {\r\n                console.log(error.message);\r\n                dispatch(invalidWeather());\r\n            });\r\n    };\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport CurrentWeather from '../../components/CurrentWeather/CurrentWeather';\r\nimport DetailWeather from '../../components/DetailWeather/DetailWeather';\r\nimport FetchingWeather from '../../components/FetchingWeather/FetchingWeather';\r\nimport { AppActions } from '../../store/actions';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { IWeather } from '../../store/Weather/models/Weather';\r\nimport { fetchWeather } from '../../store/Weather/WeatherActions';\r\n\r\ninterface Props {}\r\n\r\ninterface LinkStateProps {\r\n    weather: IWeather;\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n    fetchWeather: (lat: number, long: number) => void;\r\n}\r\n\r\ntype LinkProps = Props & LinkStateProps & LinkDispatchProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => {\r\n    return {\r\n        weather: state.weatherReducer.weather\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState, {}, AppActions>) => {\r\n    return {\r\n        fetchWeather: bindActionCreators(fetchWeather, dispatch)\r\n    }\r\n};\r\n\r\nclass CurrentWeatherContainer extends Component<LinkProps> {\r\n\r\n    componentDidMount() {\r\n        if (!this.props.weather.currentWeather) {\r\n            if ('geolocation' in navigator) {\r\n                navigator.geolocation.getCurrentPosition(pos => {\r\n                    this.props.fetchWeather(pos.coords.latitude, pos.coords.longitude);\r\n                }, error => {\r\n                    // TODO: remove this when publishing\r\n                    console.log(error.message);\r\n                    this.props.fetchWeather(+process.env.REACT_APP_DEFAULT_LAT!, +process.env.REACT_APP_DEFAULT_LONG!);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    onLoadWeather = () => {\r\n        let weather = <FetchingWeather />;\r\n\r\n        if (this.props.weather.currentWeather) {\r\n            weather = (\r\n                <div>\r\n                    <CurrentWeather\r\n                        temperature={this.props.weather.currentWeather.temp}\r\n                        feelsLike={this.props.weather.currentWeather.feelsLike}\r\n                        description={this.props.weather.currentWeather.weather[0].description}\r\n                        weatherIconId={this.props.weather.currentWeather.weather[0].id} />\r\n\r\n                <DetailWeather\r\n                    currentWeather={this.props.weather.currentWeather}\r\n                    precipitation={this.props.weather.hourlyWeather[0].precipitation} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return weather;\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.onLoadWeather()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentWeatherContainer);","import React from 'react';\r\nimport { Grid, Typography, Paper } from '@material-ui/core';\r\nimport DetailItem from '../../DetailWeather/DetailItem/DetailItem';\r\nimport DetailItemType from '../../DetailWeather/DetailItem/DetailItemTypes';\r\nimport { IForecastWeather } from '../../../store/Weather/models/Weather';\r\nimport { UnixUTCToHourMinuteString } from '../../../utils/DateConverter';\r\n\r\ninterface OverviewDetailItemProps {\r\n    forecast: IForecastWeather;\r\n}\r\n\r\nconst OverviewDetailItem: React.FC<OverviewDetailItemProps> = (props) => {\r\n    return(\r\n        <Grid container spacing={2} style={{width: '100%'}}>\r\n            <Grid item xs={2} sm={2} md={3}/>\r\n            <Grid item xs={10} sm={9} md={6}>\r\n                \r\n                <div style={{textAlign: 'left', marginLeft: '10px', marginBottom: '20px'}}>\r\n                    <Typography variant='subtitle1' className='typography-secondary'>{props.forecast.weather[0].description}</Typography>\r\n\r\n                    <Grid container spacing={2} style={{marginTop: '15px'}}>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.WIND} value={props.forecast.windSpeed}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.CLOUD_COVER} value={props.forecast.clouds}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.UV_INDEX} value={props.forecast.uvi}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.PRESSURE} value={props.forecast.pressure}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.SUNRISE} value={UnixUTCToHourMinuteString(props.forecast.sunrise)}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.SUNSET} value={UnixUTCToHourMinuteString(props.forecast.sunset)}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n\r\n            </Grid>\r\n\r\n            <Grid item xs={1} sm={1} md={3} style={{width: '100%'}}/>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default OverviewDetailItem;","import React from 'react';\r\nimport { Grid, IconButton, Typography } from '@material-ui/core';\r\nimport { UnmountClosed } from 'react-collapse';\r\nimport * as WiIcon from 'react-icons/wi'\r\nimport * as Icon from 'react-icons/md'\r\nimport WeatherIcon from '../../WeatherIcon/WeatherIcon';\r\nimport OverviewDetailItem from '../OverviewDetailItem/OverviewDetailItem';\r\nimport { IForecastWeather } from '../../../store/Weather/models/Weather';\r\nimport { UnixUTCToDayString } from '../../../utils/DateConverter';\r\n\r\ninterface OverviewItemProps {\r\n    forecast: IForecastWeather;\r\n    expanded: boolean;\r\n    expandClick: () => void;\r\n}\r\n\r\nconst OverviewItem: React.FC<OverviewItemProps> = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n        <Grid container spacing={2} style={{margin: 'auto', width: '98%'}}>\r\n            <Grid item xs={2} md={3}>\r\n                <div style={{textAlign: 'right'}}>\r\n                    <WeatherIcon iconId={props.forecast.weather[0].id} size={58}/>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={8} md={6}>\r\n                <div style={{textAlign: 'left'}} onClick={props.expandClick}>\r\n                    <Typography variant='h6' className='typography-primary'><strong>{UnixUTCToDayString(props.forecast.dt)}</strong></Typography>\r\n                    <div style={{display: 'flex'}}>\r\n                        <WiIcon.WiUmbrella size={20} color='#7d8b8e' />\r\n                        <Typography variant='subtitle2' className='typography-secondary' style={{marginRight: '20px'}}>{props.forecast.precipitation} %</Typography>\r\n                        <WiIcon.WiThermometer size={20} color='#86c3d6' />\r\n                        <Typography variant='subtitle2' className='typography-secondary'>{props.forecast.maxTemp}° | {props.forecast.minTemp}°</Typography>\r\n                    </div>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={2} md={3}>\r\n                <div style={{textAlign: 'left'}}>\r\n                    <IconButton onClick={props.expandClick}>\r\n                        {props.expanded ? <Icon.MdExpandLess size={32}/> : <Icon.MdExpandMore size={32}/>}\r\n                    </IconButton>\r\n                </div>\r\n            </Grid>\r\n\r\n        </Grid>\r\n            <UnmountClosed isOpened={props.expanded}>\r\n                <OverviewDetailItem forecast={props.forecast}/> \r\n            </UnmountClosed>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default OverviewItem;","import { connect } from 'react-redux';\r\nimport React, {Component} from 'react';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { AppState } from '../../store/rootStore';\r\nimport { IForecastWeather } from '../../store/Weather/models/Weather';\r\nimport OverviewItem from '../../components/Forecast/OverviewItem/OverviewItem';\r\nimport FetchingWeather from '../../components/FetchingWeather/FetchingWeather';\r\n\r\ninterface Props {}\r\n\r\ninterface LinkStateProps {\r\n    forecast: IForecastWeather[];\r\n}\r\n\r\ninterface LinkDispatchProps {}\r\n\r\ntype LinkProps = Props & LinkStateProps & LinkDispatchProps & RouteComponentProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => {\r\n    return {\r\n        forecast: state.weatherReducer.weather.forecast,\r\n    }\r\n}\r\n\r\ninterface LocalState {\r\n    expanded: boolean[];\r\n}\r\n\r\nclass ForecastContainer extends Component<LinkProps> {\r\n\r\n    state: LocalState = {\r\n        expanded: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        // prevent inifite loop\r\n        if (this.props.forecast && this.state.expanded.length === 0) {\r\n            this.initLocalState(this.props.forecast.length);\r\n        } else {\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    initLocalState = (forecastLength: number) => {\r\n        let exArr: boolean[] = [];\r\n        for (let i = 0; i < forecastLength; i++) {\r\n            exArr.push(false);\r\n        }\r\n        this.setState( () => {\r\n            return { expanded: exArr }\r\n        })\r\n    }\r\n\r\n    onExpandClick = (index: number) => {\r\n        this.setState((prevState: LocalState) => {\r\n            return {\r\n                expanded: prevState.expanded.map((item, itemIndex) => {\r\n                    return itemIndex === index ? !item : item;\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    fetchWeatherForecast = () => {\r\n        let overviewItems = [<FetchingWeather key={'fetching'} />];\r\n        if (this.props.forecast) {\r\n            overviewItems = this.props.forecast.map( (item, index) => (\r\n                <OverviewItem\r\n                    key={item.dt}\r\n                    forecast={item}\r\n                    expanded={this.state.expanded[index]}\r\n                    expandClick={() => this.onExpandClick(index)}/>\r\n                )\r\n            );\r\n        }\r\n        return overviewItems;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.fetchWeatherForecast()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(ForecastContainer));","import React from 'react';\r\nimport { Grid, Paper, Typography } from '@material-ui/core';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as WiIcons from 'react-icons/wi';\r\nimport chartType from '../chartType';\r\n\r\ninterface ChartTooltipProps {\r\n    chartType: chartType;\r\n    active?: boolean;\r\n    payload?: any;\r\n}\r\n\r\nconst ChartTooltip: React.FC<ChartTooltipProps> = (props) => {\r\n\r\n    let tooltipMeasurement = '';\r\n    let tooltipMeasurementIcon = <WiIcons.WiAlien size={20} color='#000'/>;\r\n    if (props.active) {\r\n        switch (props.chartType) {\r\n            case chartType.TEMPERATURE:\r\n                tooltipMeasurement = props.payload[0].payload.temp + '°';\r\n                tooltipMeasurementIcon = <WiIcons.WiThermometer size={20} color='#86c3d6'/>;\r\n                break;\r\n            case chartType.WIND:\r\n                tooltipMeasurement = props.payload[0].payload.windSpeed + ' km/h';\r\n                tooltipMeasurementIcon = <WiIcons.WiStrongWind size={20} color='#becbd1'/>;\r\n                break;\r\n            case chartType.PRECIPITATION:\r\n                tooltipMeasurement = props.payload[0].payload.precipitation + '%';\r\n                tooltipMeasurementIcon = <WiIcons.WiUmbrella size={20} color='#666'/>;\r\n                break;\r\n            default:\r\n                tooltipMeasurement = props.payload[0].payload.temp + '°';\r\n                tooltipMeasurementIcon = <WiIcons.WiThermometer size={20} color='#86c3d6'/>;\r\n                break;\r\n        }\r\n    }\r\n\r\n    let tooltip = null;\r\n    if (props.active) {\r\n        tooltip = <Paper elevation={1} style={{padding: '10px', background: 'rgba(255, 255, 255, 0.95)'}}>\r\n\r\n                <Grid container spacing={3}>\r\n                    <Grid item >\r\n                        <FiIcons.FiClock size={20} color='#000'/>\r\n                        <Typography><strong>{props.payload[0].payload.dt}:00</strong></Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        {tooltipMeasurementIcon}\r\n                        <Typography>{tooltipMeasurement}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Paper>;\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {tooltip}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ChartTooltip;","import React from 'react';\r\nimport { IconButton } from '@material-ui/core';\r\nimport * as WiIcon from 'react-icons/wi'\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Label, ResponsiveContainer, Tooltip } from 'recharts';\r\nimport { IHourlyWeather } from '../../store/Weather/models/Weather';\r\nimport { UnixUTCHourString } from '../../utils/DateConverter';\r\nimport chartType from './chartType';\r\nimport ChartTooltip from './ChartTooltip/ChartTooltip';\r\n\r\ninterface WeatherChartProps {\r\n    hourlyWeather: IHourlyWeather[];\r\n    chartType: chartType;\r\n    chartTypeHandler: (type: chartType) => void;\r\n}\r\n\r\nconst WeatherChart: React.FC<WeatherChartProps> = (props) => {\r\n\r\n    // Convert Date\r\n    const parsedData: IHourlyWeather[] = [];\r\n    props.hourlyWeather.forEach((element, index) => {\r\n        const newElem = {\r\n            ...element,\r\n            dt: UnixUTCHourString(element.dt)\r\n        }\r\n        // Chart complexity - element devided by 3\r\n        if (index % 3 === 0)\r\n            parsedData.push(newElem);\r\n    });\r\n\r\n    let chartDataKey = 'temp';\r\n    let chartDataUnit = '°C';\r\n    switch (props.chartType) {\r\n        case chartType.TEMPERATURE:\r\n            chartDataKey = 'temp';\r\n            chartDataUnit = '°C';\r\n            break;\r\n        case chartType.WIND:\r\n            chartDataKey = 'windSpeed';\r\n            chartDataUnit = 'km/h';\r\n            break;\r\n        case chartType.PRECIPITATION:\r\n            chartDataKey = 'precipitation';\r\n            chartDataUnit = '(%)';\r\n            break;\r\n        default:\r\n            chartDataUnit = '°C';\r\n            break;\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div>\r\n                <IconButton\r\n                    color={props.chartType === chartType.TEMPERATURE ? 'primary' : 'default'}\r\n                    onClick={() => props.chartTypeHandler(chartType.TEMPERATURE)}>\r\n                    <WiIcon.WiThermometer size={32}/>\r\n                </IconButton>\r\n                <IconButton\r\n                    color={props.chartType === chartType.WIND ? 'primary' : 'default'}\r\n                    onClick={() => props.chartTypeHandler(chartType.WIND)}>\r\n                    <WiIcon.WiStrongWind size={32}/>\r\n                </IconButton>\r\n                <IconButton\r\n                    color={props.chartType === chartType.PRECIPITATION ? 'primary' : 'default'}\r\n                    onClick={() => props.chartTypeHandler(chartType.PRECIPITATION)}>\r\n                    <WiIcon.WiUmbrella size={32}/>\r\n                </IconButton>\r\n            </div>\r\n            <div style={{display: 'flex', justifyContent:'center'}}>\r\n                <ResponsiveContainer width='90%' height={250}>\r\n                    <LineChart margin={{top: 35, left: 10, right: 10}} data={parsedData}>\r\n                        <XAxis dataKey='dt' tickLine={false} tick={<div/>}>\r\n                            <Label position='insideBottomLeft' offset={0} value='Now'/>\r\n                            <Label position='insideBottom' offset={0} value='24h'/>\r\n                            <Label position='insideBottomRight' offset={0} value='48h'/>\r\n                        </XAxis>\r\n                        <YAxis dataKey={chartDataKey} width={30} tickLine={false} axisLine={false}>\r\n                            <Label position='top' offset={20} value={chartDataUnit}/>\r\n                        </YAxis>\r\n                        <CartesianGrid stroke=\"#eee\" strokeDasharray='3 5' horizontal={false} />\r\n                        <Tooltip content={<ChartTooltip chartType={props.chartType} />} />\r\n                        <Line dataKey={chartDataKey} strokeWidth={2}/>\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default WeatherChart;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport FetchingWeather from '../../components/FetchingWeather/FetchingWeather';\r\nimport chartType from '../../components/WeatherChart/chartType';\r\nimport WeatherChart from '../../components/WeatherChart/WeatherChart';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { IHourlyWeather } from '../../store/Weather/models/Weather';\r\n\r\ninterface Props {}\r\n\r\ninterface LinkStateProps {\r\n    hourlyWeather: IHourlyWeather[];\r\n}\r\n\r\ninterface LinkDispatchProps {}\r\n\r\ntype LinkProps = Props & LinkStateProps & LinkDispatchProps & RouteComponentProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => {\r\n    return {\r\n        hourlyWeather: state.weatherReducer.weather.hourlyWeather\r\n    }\r\n}\r\n\r\ninterface LocalState {\r\n    chartType: chartType;\r\n}\r\n\r\nclass HourlyWeatherContainer extends Component<LinkProps> {\r\n\r\n    state: LocalState = {\r\n        chartType: chartType.TEMPERATURE\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.hourlyWeather) {\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    fetchHourlyWeather = () => {\r\n        let weatherChart = <FetchingWeather key={'fetching'} />;\r\n        if (this.props.hourlyWeather) {\r\n            weatherChart = <WeatherChart\r\n                            hourlyWeather={this.props.hourlyWeather}\r\n                            chartType={this.state.chartType}\r\n                            chartTypeHandler={(type: chartType) => this.onChartButtonClick(type)} />;\r\n        }\r\n        return weatherChart;\r\n    }\r\n\r\n    onChartButtonClick = (type: chartType) => {\r\n        this.setState((prevState: LocalState) => {\r\n            return {\r\n                chartType: type\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.fetchHourlyWeather()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(HourlyWeatherContainer));","import React from \"react\";\r\nimport { Switch, Route, withRouter, Redirect } from 'react-router-dom';\r\nimport QuickNavigation from \"./components/QuickNavigation/QuickNavigation\";\r\nimport CurrentWeatherContainer from \"./containers/CurrentWeatherContainer/CurrentWeatherContainer\";\r\nimport ForecastContainer from \"./containers/ForecastContainer/ForecastContainer\";\r\nimport HourlyWeatherContainer from \"./containers/HourlyWeatherContainer/HourlyWeatherContainer\";\r\n\r\nfunction App() {\r\n    return (\r\n        <React.Fragment>\r\n            <QuickNavigation />\r\n            <Switch>\r\n                <Route path='/hourly' component={HourlyWeatherContainer} />\r\n                <Route path='/forecast' component={ForecastContainer} />\r\n                <Route path='/' component={CurrentWeatherContainer} />\r\n                <Redirect to='/' />\r\n            </Switch>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(App);\r\n","import { WeatherActionTypes, FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from './models/WeatherActionsModel';\r\nimport { IWeather } from './models/Weather';\r\n\r\ninterface WeatherState {\r\n    loading: boolean;\r\n    error: string;\r\n    weather: IWeather;\r\n}\r\n\r\nconst initialState: WeatherState = {\r\n    loading: false,\r\n    error: '',\r\n    weather: {} as IWeather\r\n}\r\n\r\nconst FetchWeatherRequest = () => {\r\n    return { loading: true, error: '', weather: {} as IWeather };\r\n}\r\n\r\nconst FetchWeatherSuccess = (action: WeatherActionTypes) => {\r\n    return { loading: false, error: '', weather: action.weather};\r\n}\r\n\r\nconst FetchWeatherFailure = (action: WeatherActionTypes) => {\r\n    return { loading: false, error: action.error, weather: {} as IWeather};\r\n}\r\n\r\nexport const weatherReducer = (state = initialState, action: WeatherActionTypes): WeatherState => {\r\n    switch (action.type) {\r\n        case FETCH_WEATHER_REQUEST: return FetchWeatherRequest();\r\n        case FETCH_WEATHER_SUCCESS: return FetchWeatherSuccess(action);\r\n        case FETCH_WEATHER_FAILURE: return FetchWeatherFailure(action);\r\n        default:\r\n          return state;\r\n    }\r\n}","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\r\nimport { createLogger } from 'redux-logger';\r\nimport { weatherReducer } from \"./Weather/WeatherReducer\";\r\nimport { AppActions } from \"./actions\";\r\n\r\nconst logger = createLogger();\r\n\r\nlet middleware = [];\r\nif (process.env.NODE_ENV === 'development') {\r\n    middleware = [thunk as ThunkMiddleware<AppState, AppActions>, logger];\r\n} else {\r\n    middleware = [thunk as ThunkMiddleware<AppState, AppActions>];\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n    weatherReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore<AppState, AppActions, {}, {}>(\r\n    rootReducer,\r\n    applyMiddleware(...middleware)\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { store } from \"./store/rootStore\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App />\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}