{"version":3,"sources":["components/Loading/Loading.tsx","store/Localization/models/LocalizationActionsModel.ts","localization/english.ts","localization/romanian.ts","store/Localization/LocalizationActions.ts","components/LanguageOptions/LanguageOptions.tsx","components/About/About.tsx","components/OptionsDrawer/OptionsDrawer.tsx","components/QuickNavigation/QuickNavigation.tsx","components/BackgroundHOC/BackgroundHOC.tsx","utils/ImageUtil.ts","components/CurrentWeather/CurrentWeather.tsx","components/DetailWeather/DetailWeather.tsx","utils/env.ts","axios/axios-weather.ts","store/Weather/models/WeatherActionsModel.ts","store/Weather/utils/WeatherMapper.ts","store/Weather/WeatherActions.ts","containers/CurrentWeatherContainer/CurrentWeatherContainer.tsx","localization/utils/coordinates.ts","App.tsx","serviceWorkerRegistration.ts","store/Weather/WeatherReducer.ts","store/Localization/LocalizationReducer.ts","store/rootStore.ts","index.tsx","components/DetailWeather/DetailItem/DetailItemTypes.ts","components/DetailWeather/DetailItem/DetailItem.tsx","localization/model/localizationModel.ts","utils/DateConverter.ts","components/WeatherIcon/WeatherIcon.tsx","components/FetchingWeather/FetchingWeather.tsx"],"names":["FetchingWeather","style","margin","CircularProgress","CHANGE_LANGUAGE","languageMap","Map","set","localization","language","weekArray","selected","Languages","ENGLISH","ROMANIAN","changeLanguage","lang","type","English","Romanian","LanguageOptions","useSelector","state","localizationReducer","dispatch","useDispatch","width","FormControl","component","FormLabel","get","RadioGroup","aria-label","name","value","onChange","event","target","localStorage","setItem","FormControlLabel","control","Radio","label","About","Box","borderRadius","className","padding","Typography","variant","size","color","OptionsDrawer","props","Drawer","anchor","open","onClose","Grid","container","background","QuickNavigation","useState","drawer","navState","setNavState","onOptionsButtonClick","Fragment","ButtonGroup","opacity","Button","startIcon","Link","to","Tooltip","title","IconButton","backgroundColor","position","top","right","onClick","BackgroundHOC","currentWeather","weatherReducer","weather","weatherImage","setweatherImage","useEffect","undefined","weatherId","randomImageNumber","Math","floor","random","getRandomWeatherImage","id","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","children","CurrentWeather","from","sprops","spacing","marginTop","marginBottom","item","xs","textAlign","WeatherIcon","iconId","weatherIconId","day","number","temperature","delay","toFixed","feelsLike","description","DetailWeather","md","lg","DetailItem","itemType","DetailItemType","PRECIPITATION_CHANCE","precipitation","WIND","windSpeed","UV_INDEX","uvi","CLOUD_COVER","clouds","PRESSURE","pressure","HUMIDITY","humidity","DEW_POINT","dewPoint","VISIBILITY","visibility","SUNRISE","UnixUTCToHourMinuteString","sunrise","SUNSET","sunset","env","process","this","buildApi","main","apiK","replace","substring","length","instance","axios","create","baseURL","getBaseAPI","FETCH_WEATHER_REQUEST","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","mapIWeatherCoordinates","coord","latitude","lat","longitude","lon","timezoneOffset","timezone_offset","mapICurrentWeather","current","weatherDesc","mapIWeatherDescription","dt","temp","feels_like","dew_point","wind_speed","map","wdesc","mapIHourlyWeather","hourlyWeather","hourly","pop","mapIForecastWeather","forecastWeather","forecast","maxTemp","max","minTemp","min","fetchWeather","long","loading","error","getApiDefaultParams","params","then","response","fetchedWeather","data","coordinates","daily","catch","console","log","message","CurrentWeatherContainer","setLocalization","localLang","getItem","onLoadWeather","UnixUTCDayIcon","navigator","geolocation","getCurrentPosition","pos","coords","Component","connect","bindActionCreators","ForecastContainer","React","lazy","HourlyWeatherContainer","withRouter","showNavigation","setshowNavigation","navMenu","showNavigationMenu","fallback","Loading","path","render","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialState","FetchWeatherSuccess","action","FetchWeatherFailure","ChangeLanguage","middleware","createLogger","thunk","rootReducer","combineReducers","store","createStore","applyMiddleware","ReactDOM","StrictMode","basename","document","getElementById","URL","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","itemIcon","itemValue","itemDescription","String","fromCharCode","utcTime","date","Date","getHours","getMinutes","UnixUTCToDayString","days","getDay","getDate","UnixUTCHourString","UnixUTCHourStringFakeMinutes","UnixUTCToDayOfMonth","weatherIcon","loadingIcon","getLoadingIcon"],"mappings":"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","file":"static/js/main.1a8d342c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\nconst FetchingWeather = () => {\r\n\r\n    return <div style={{margin: '100px auto'}}>\r\n        <CircularProgress />\r\n    </div>;\r\n};\r\n\r\nexport default FetchingWeather;","import { ILocalization } from '../../../localization/model/localizationModel';\r\n\r\nexport const CHANGE_LANGUAGE = \"CHANGE_LANGUAGE\";\r\n\r\ninterface Localization {\r\n    language: ILocalization;\r\n}\r\n\r\ninterface ChangeLanguage extends Localization {\r\n    type: typeof CHANGE_LANGUAGE;\r\n}\r\n\r\nexport type LocalizationActionTypes = ChangeLanguage;","import { ILocalization, Languages } from \"./model/localizationModel\";\r\n\r\nlet languageMap = new Map<string, string>();\r\n\r\n// loading\r\nlanguageMap.set('loading', 'Fetching weather');\r\n\r\n// navigation\r\nlanguageMap.set('nav-now', 'Now');\r\nlanguageMap.set('nav-hourly', 'Hourly');\r\nlanguageMap.set('nav-later', 'Later');\r\nlanguageMap.set('nav-settings', 'Settings');\r\n\r\n// current weather\r\nlanguageMap.set('current-feels', 'Feels like');\r\n\r\n// detail weather\r\nlanguageMap.set('detail-chance', 'Chance');\r\nlanguageMap.set('detail-wind', 'Wind speed');\r\nlanguageMap.set('detail-uv', 'UV Index');\r\nlanguageMap.set('detail-cloud', 'Cloud cover');\r\nlanguageMap.set('detail-pressure', 'Pressure');\r\nlanguageMap.set('detail-humidity', 'Humidity');\r\nlanguageMap.set('detail-dew', 'Dew point');\r\nlanguageMap.set('detail-visibility', 'Visibility');\r\nlanguageMap.set('detail-sunrise', 'Sunrise');\r\nlanguageMap.set('detail-sunset', 'Sunset');\r\n\r\n// chart tooltip\r\nlanguageMap.set('chart-tooltip-temperature', 'Temperature');\r\nlanguageMap.set('chart-tooltip-wind', 'Wind speed');\r\nlanguageMap.set('chart-tooltip-precipitation', 'Precipitation');\r\n\r\n// chart X axis\r\nlanguageMap.set('chart-axis-now', 'Now');\r\nlanguageMap.set('chart-axis-24', '24h');\r\nlanguageMap.set('chart-axis-48', '48h');\r\n\r\n// more less toggle button\r\nlanguageMap.set('toggle-more', 'More');\r\nlanguageMap.set('toggle-less', 'Less');\r\n\r\n// options\r\nlanguageMap.set('options-lang-title', 'Weather language');\r\nlanguageMap.set('options-lang-en', 'English');\r\nlanguageMap.set('options-lang-ro', 'Romanian');\r\n\r\n// about\r\nlanguageMap.set('about-built', 'Built with ');\r\nlanguageMap.set('about-by', ' by ');\r\n\r\n// week days array\r\nconst weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nconst selectedLanguage = Languages.ENGLISH;\r\n\r\nexport const localization: ILocalization = {\r\n    language: languageMap,\r\n    weekArray: weekDays,\r\n    selected: selectedLanguage\r\n}","import { ILocalization, Languages } from \"./model/localizationModel\";\r\n\r\nlet languageMap = new Map<string, string>();\r\n\r\n// loading\r\nlanguageMap.set('loading', 'Se incarcă vremea');\r\n\r\n// navigation\r\nlanguageMap.set('nav-now', 'Acum');\r\nlanguageMap.set('nav-hourly', 'Urmează');\r\nlanguageMap.set('nav-later', 'Viitor');\r\nlanguageMap.set('nav-settings', 'Setări');\r\n\r\n// current weather\r\nlanguageMap.set('current-feels', 'Se simte');\r\n\r\n// detail weather\r\nlanguageMap.set('detail-chance', 'Șanse');\r\nlanguageMap.set('detail-wind', 'Vânt');\r\nlanguageMap.set('detail-uv', 'Index UV');\r\nlanguageMap.set('detail-cloud', 'Acoperire');\r\nlanguageMap.set('detail-pressure', 'Presiune');\r\nlanguageMap.set('detail-humidity', 'Umiditate');\r\nlanguageMap.set('detail-dew', 'Condens');\r\nlanguageMap.set('detail-visibility', 'Vizibilitate');\r\nlanguageMap.set('detail-sunrise', 'Răsărit');\r\nlanguageMap.set('detail-sunset', 'Apus');\r\n\r\n// chart tooltip\r\nlanguageMap.set('chart-tooltip-temperature', 'Temperatură');\r\nlanguageMap.set('chart-tooltip-wind', 'Vânt');\r\nlanguageMap.set('chart-tooltip-precipitation', 'Precipitație');\r\n\r\n// chart X axis\r\nlanguageMap.set('chart-axis-now', 'Acum');\r\nlanguageMap.set('chart-axis-24', '24 ore');\r\nlanguageMap.set('chart-axis-48', '48 ore');\r\n\r\n// more less toggle button\r\nlanguageMap.set('toggle-more', 'Mai Mult');\r\nlanguageMap.set('toggle-less', 'Mai Puțin');\r\n\r\n// options\r\nlanguageMap.set('options-lang-title', 'Schimbă limba');\r\nlanguageMap.set('options-lang-en', 'Engleză');\r\nlanguageMap.set('options-lang-ro', 'Romană');\r\n\r\n// about\r\nlanguageMap.set('about-built', 'Construit cu ');\r\nlanguageMap.set('about-by', ' de ');\r\n\r\n// week days array\r\nconst weekDays = ['Duminică', 'Luni', 'Marți', 'Miercuri', 'Joi', 'Vineri', 'Sâmbătă'];\r\n\r\nconst selectedLanguage = Languages.ROMANIAN;\r\n\r\nexport const localization: ILocalization = {\r\n    language: languageMap,\r\n    weekArray: weekDays,\r\n    selected: selectedLanguage\r\n}","import { AppActions } from \"../actions\";\r\nimport { CHANGE_LANGUAGE } from \"./models/LocalizationActionsModel\";\r\n\r\nimport * as English from '../../localization/english';\r\nimport * as Romanian from '../../localization/romanian';\r\n\r\nexport const changeLanguage = (lang: string): AppActions => {\r\n     return {\r\n        type: CHANGE_LANGUAGE,\r\n        language: lang === 'english' ? English.localization : Romanian.localization\r\n     }\r\n}","import React from 'react';\r\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { AppActions } from '../../store/actions';\r\nimport { Languages } from '../../localization/model/localizationModel';\r\nimport { changeLanguage } from '../../store/Localization/LocalizationActions';\r\n\r\nconst LanguageOptions = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n    const dispatch = useDispatch<ThunkDispatch<AppState, {}, AppActions>>();\r\n\r\n    const handleSelectedLanguage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = +(event.target as HTMLInputElement).value === 0 ? 'english' : 'romanian';\r\n        dispatch(changeLanguage(value));\r\n        localStorage.setItem('localization', value);\r\n    }\r\n\r\n    return(\r\n        <div style={{width: '70%', margin: '10px auto'}}>\r\n             <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">{localization.language.get('options-lang-title')}</FormLabel>\r\n                <RadioGroup aria-label=\"language\" name=\"language\" value={localization.selected} onChange={handleSelectedLanguage} >\r\n                    <FormControlLabel value={Languages.ENGLISH} control={<Radio />} label={localization.language.get('options-lang-en')} />\r\n                    <FormControlLabel value={Languages.ROMANIAN} control={<Radio />} label={localization.language.get('options-lang-ro')} />\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LanguageOptions;","import React from 'react';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport * as Icons from \"react-icons/fa\"\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/rootStore';\r\n\r\nconst About = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    return(\r\n        <div>\r\n            <Box borderRadius={16} className='box-default' style={{padding: '20px 0'}}>\r\n                <Typography variant='body2' className='typography-secondary'>\r\n                    {localization.language.get('about-built')} \r\n                    <Icons.FaHeart size={11} color='#d32f2f'/> \r\n                    {localization.language.get('about-by')} \r\n                    <strong>Mihai Sârmaru</strong>\r\n                </Typography>\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport { Drawer, Grid, Box } from '@material-ui/core';\r\nimport LanguageOptions from '../LanguageOptions/LanguageOptions';\r\nimport About from '../About/About';\r\n\r\ninterface OptionsDrawerProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nconst OptionsDrawer: React.FC<OptionsDrawerProps> = (props) => {\r\n    return (\r\n        <Drawer anchor='top' open={props.open} onClose={props.onClose}>\r\n\r\n            <Grid container style={{background: '#f3f3f3'}}>\r\n                <Box borderRadius={16} className='box-default' style={{margin: '20px auto'}}>\r\n                    <LanguageOptions />\r\n                </Box>\r\n                <Box borderRadius={16} className='box-default' style={{margin: '0 auto 20px auto'}}>\r\n                    <About />\r\n                </Box>\r\n            </Grid>\r\n\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default OptionsDrawer;","import { Button, ButtonGroup, IconButton, Tooltip } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as WiIcons from 'react-icons/wi';\r\nimport * as MdIcons from 'react-icons/md';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/rootStore';\r\nimport OptionsDrawer from '../OptionsDrawer/OptionsDrawer';\r\n\r\ninterface QuickNavigationLocalState {\r\n    drawer: boolean;\r\n}\r\n\r\nconst QuickNavigation = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    const [navState, setNavState] = useState<QuickNavigationLocalState>({drawer: false});\r\n\r\n    const onOptionsButtonClick = () => {\r\n        setNavState({drawer: !navState.drawer});\r\n    }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            <ButtonGroup variant='outlined' size='medium' style={{margin: '130px 0 0 0', background: 'white', opacity: '0.9'}}>\r\n                <Button startIcon={<WiIcons.WiThermometer />}\r\n                    component={Link} to={'/'}>{localization.language.get('nav-now')}</Button>\r\n                <Button startIcon={<WiIcons.WiTime4 />}\r\n                    component={Link} to={'/hourly'}>{localization.language.get('nav-hourly')}</Button>\r\n                <Button startIcon={<WiIcons.WiWindDeg />}\r\n                    component={Link} to={'/forecast'}>{localization.language.get('nav-later')}</Button>\r\n            </ButtonGroup>\r\n            <OptionsDrawer open={navState.drawer} onClose={onOptionsButtonClick} />\r\n\r\n            <Tooltip title={localization.language.get('nav-settings')!} >\r\n                <IconButton \r\n                    style={{backgroundColor: '#ffffff', opacity: '0.9',\r\n                        position: 'absolute', top: '0', right: '0', margin: '5px'}}\r\n                    onClick={onOptionsButtonClick}>\r\n                    <MdIcons.MdSettings size={18}/>\r\n                </IconButton>\r\n            </Tooltip>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default QuickNavigation;","import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { getRandomWeatherImage } from '../../utils/ImageUtil';\r\n\r\ninterface BackgroundHOCProps {}\r\n\r\nconst BackgroundHOC: React.FC<BackgroundHOCProps> = (props) => {\r\n\r\n    const currentWeather = useSelector((state: AppState) => state.weatherReducer.weather);\r\n    const [weatherImage, setweatherImage] = useState('');\r\n    \r\n    useEffect(() => {\r\n        if (currentWeather.currentWeather !== undefined) {\r\n            setweatherImage(getRandomWeatherImage(currentWeather.currentWeather.weather[0].id));\r\n        }\r\n    },[currentWeather.currentWeather]);\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div className='fullscreen-image' style={{\r\n                    backgroundImage: `url(${weatherImage})`,\r\n                    backgroundPosition: 'center center',\r\n                    backgroundSize: 'cover',\r\n                    backgroundRepeat: 'no-repeat',\r\n                    }}>\r\n                {props.children}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default BackgroundHOC;","export const getRandomWeatherImage = (weatherId: number) => {\r\n\r\n    // Default weather image\r\n    let weatherImage = 'images/default.jpg';\r\n\r\n    const randomImageNumber = Math.floor(Math.random() * Math.floor(10));\r\n\r\n    // Thunderstorm\r\n    if (weatherId >= 200 && weatherId < 300) {\r\n        weatherImage = `images/thunderstorm/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    // Drizzle\r\n    if (weatherId >= 300 && weatherId < 400) {\r\n        weatherImage = `images/rain/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    // Rain\r\n    if (weatherId >= 500 && weatherId < 600) {\r\n        weatherImage = `images/rain/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    // Snow\r\n    if (weatherId >= 600 && weatherId < 700) {\r\n        weatherImage = `images/snow/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    // Atmosphere\r\n    if (weatherId >= 700 && weatherId < 800) {\r\n        weatherImage = `images/fog/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    // Clear\r\n    if (weatherId === 800) {\r\n        weatherImage = `images/sunny/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    // Cloudy\r\n    if (weatherId > 800 && weatherId < 900) {\r\n        weatherImage = `images/cloudy/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    return weatherImage;\r\n}","import React from \"react\";\r\nimport 'fontsource-roboto';\r\nimport { Grid, Typography, Box } from \"@material-ui/core\";\r\nimport { Spring } from 'react-spring/renderprops';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\nimport { AppState } from \"../../store/rootStore\";\r\nimport { Languages } from \"../../localization/model/localizationModel\";\r\n\r\ninterface CurrentWeatherProps {\r\n    temperature: number,\r\n    feelsLike: number,\r\n    description: string,\r\n    weatherIconId: number,\r\n    day: boolean\r\n}\r\n\r\nconst CurrentWeather: React.FC<CurrentWeatherProps> = (props) => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    return (\r\n        <Spring from={{opacity: 0}} to={{opacity: 1}}>\r\n            { sprops => \r\n                <Box borderRadius={16} className='box-default' style={sprops}>\r\n                    <Grid container spacing={2} style={{marginTop: '20px', marginBottom: '30px'}}>\r\n                        <Grid item xs={6}>\r\n                            <div style={{textAlign: 'right'}}>\r\n                                <WeatherIcon iconId={props.weatherIconId} day={props.day}\r\n                                size={localization.selected === Languages.ENGLISH ? 140 : 110}/>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <div style={{textAlign: 'left'}}>\r\n                                <Spring\r\n                                    from={{number: 0}}\r\n                                    to={{number: props.temperature}}\r\n                                    delay={100}>\r\n                                        {props => <Typography variant='h2' className='typography-primary'>{props.number.toFixed()}&deg;</Typography> }\r\n                                </Spring>\r\n                                <Typography variant='h6' className='typography-primary'>{localization.language.get('current-feels')!} {props.feelsLike}&deg;</Typography>\r\n                                <Typography variant='subtitle1' className='typography-secondary'>\r\n                                    {localization.selected === Languages.ENGLISH ? props.description : ''}\r\n                                </Typography>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            }\r\n        </Spring>\r\n    );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from 'react';\r\nimport { Grid, Box } from '@material-ui/core';\r\nimport DetailItem from './DetailItem/DetailItem';\r\nimport DetailItemType from './DetailItem/DetailItemTypes';\r\nimport { ICurrentWeather } from '../../store/Weather/models/Weather';\r\nimport { UnixUTCToHourMinuteString } from '../../utils/DateConverter';\r\nimport { Spring } from 'react-spring/renderprops';\r\n\r\ninterface DetailWeatherProps {\r\n    currentWeather: ICurrentWeather;\r\n    precipitation: number;\r\n}\r\n\r\nconst DetailWeather: React.FC<DetailWeatherProps> = (props) => {\r\n    return (\r\n        <Spring from={{opacity: 0}} to={{opacity: 1}} delay={200}>\r\n                { sprops => \r\n                    <div style={sprops}>\r\n                        <Box borderRadius={16} className='box-default'>\r\n                            <div style={{margin: '0 auto 30px auto', width: '80%'}}>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.PRECIPITATION_CHANCE} value={props.precipitation}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.WIND} value={props.currentWeather.windSpeed}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.UV_INDEX} value={props.currentWeather.uvi}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.CLOUD_COVER} value={props.currentWeather.clouds}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.PRESSURE} value={props.currentWeather.pressure}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.HUMIDITY} value={props.currentWeather.humidity}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.DEW_POINT} value={props.currentWeather.dewPoint}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.VISIBILITY} value={props.currentWeather.visibility}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.SUNRISE} value={UnixUTCToHourMinuteString(props.currentWeather.sunrise)}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.SUNSET} value={UnixUTCToHourMinuteString(props.currentWeather.sunset)}/>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </div>\r\n                        </Box>\r\n                    </div>\r\n                }\r\n        </Spring>\r\n    );\r\n}\r\n\r\nexport default DetailWeather;","class env {\r\n\r\n    public static getBaseAPI() {\r\n        return process.env.REACT_APP_BASE_API;\r\n    }\r\n\r\n    public static getApiDefaultParams() {\r\n        return process.env.REACT_APP_API_PARAMS + this.buildApi(true);\r\n    }\r\n\r\n    public static getApiLocK() {\r\n        return this.buildApi(false);\r\n    }\r\n\r\n    private static buildApi(main: boolean) {\r\n        const apiK = main ? process.env.REACT_APP_WK! : process.env.REACT_APP_LC!;\r\n        return apiK.replace(apiK.substring(apiK.length - 2, apiK.length), '');\r\n    }\r\n\r\n}\r\n\r\nexport default env;","import axios from \"axios\";\r\nimport env from '../utils/env';\r\n\r\nconst instance = axios.create({\r\n    baseURL:\r\n        env.getBaseAPI() ||\r\n        \"https://raw.githubusercontent.com/Predator7/react-weather/main/src/sample-api/weather.json\",\r\n});\r\n\r\nexport default instance;\r\n","import { IWeather } from \"./Weather\";\r\n\r\nexport const FETCH_WEATHER_REQUEST = \"FETCH_WEATHER_REQUEST\";\r\nexport const FETCH_WEATHER_SUCCESS = \"FETCH_WEATHER_SUCCESS\";\r\nexport const FETCH_WEATHER_FAILURE = \"FETCH_WEATHER_FAILURE\";\r\n\r\ninterface WeatherAsync {\r\n    loading: boolean;\r\n    error: string;\r\n    weather: IWeather;\r\n}\r\n\r\ninterface FetchWeatherRequest extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_REQUEST;\r\n}\r\ninterface FetchWeatherSuccess extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_SUCCESS;\r\n}\r\ninterface FetchWeatherFailure extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_FAILURE;\r\n}\r\n\r\nexport type WeatherActionTypes =\r\n    | FetchWeatherRequest\r\n    | FetchWeatherSuccess\r\n    | FetchWeatherFailure; // | PostWeather ...\r\n","import { IForecastWeather, IHourlyWeather, IWeather, IWeatherDescription } from \"../models/Weather\"\r\n\r\nexport const mapIWeather = (weather: any): IWeather => {\r\n    const coords = mapIWeatherCoordinates(weather);\r\n    const current = mapICurrentWeather(weather.current);\r\n    const hourly = mapIHourlyWeather(weather.hourly);\r\n    const fcst = mapIForecastWeather(weather.daily);\r\n    \r\n    const convertedWeather: IWeather = {\r\n        coordinates: coords,\r\n        currentWeather: current,\r\n        hourlyWeather: hourly,\r\n        forecast: fcst\r\n    }\r\n\r\n    return convertedWeather;\r\n}\r\n\r\nconst mapIWeatherCoordinates = (coord: any) => {\r\n    return {\r\n        latitude: coord.lat,\r\n        longitude: coord.lon,\r\n        timezoneOffset: coord.timezone_offset * 1000\r\n    }\r\n}\r\n\r\nconst mapICurrentWeather = (current: any) => {\r\n    const weatherDesc = mapIWeatherDescription(current.weather);\r\n    return {\r\n        dt: current.dt * 1000,\r\n        sunrise: current.sunrise * 1000,\r\n        sunset: current.sunset * 1000,\r\n        temp: current.temp.toFixed(0),\r\n        feelsLike: current.feels_like.toFixed(0) === '-0' ? 0 : current.feels_like.toFixed(0),\r\n        pressure: current.pressure,\r\n        humidity: current.humidity,\r\n        dewPoint: current.dew_point.toFixed(0),\r\n        uvi: current.uvi,\r\n        clouds: current.clouds,\r\n        visibility: current.visibility / 1000,\r\n        windSpeed: current.wind_speed.toFixed(0),\r\n        weather: weatherDesc\r\n    }\r\n}\r\n\r\nconst mapIWeatherDescription = (weather: any[]) => {\r\n    return weather.map(wdesc => {\r\n        return ({\r\n            id: wdesc.id,\r\n            main: wdesc.main,\r\n            description: wdesc.description,\r\n        } as IWeatherDescription);\r\n    });\r\n}\r\n\r\nconst mapIHourlyWeather = (hourlyWeather: any[]) => {\r\n    return hourlyWeather.map(hourly => {\r\n        return ({\r\n            dt: hourly.dt * 1000,\r\n            temp: hourly.temp.toFixed(0),\r\n            windSpeed: hourly.wind_speed.toFixed(0),\r\n            precipitation: +(hourly.pop * 100).toFixed(0),\r\n            weather: mapIWeatherDescription(hourly.weather)\r\n        } as IHourlyWeather);\r\n    });\r\n}\r\n\r\nconst mapIForecastWeather = (forecastWeather: any[]) => {\r\n    return forecastWeather.map(forecast => {\r\n        return ({\r\n            dt: forecast.dt * 1000,\r\n            precipitation: +(forecast.pop * 100).toFixed(0),\r\n            maxTemp: +forecast.temp.max.toFixed(0),\r\n            minTemp: +forecast.temp.min.toFixed(0),\r\n            windSpeed: +forecast.wind_speed.toFixed(0),\r\n            uvi: forecast.uvi,\r\n            clouds: forecast.clouds,\r\n            pressure: forecast.pressure,\r\n            sunrise: forecast.sunrise * 1000,\r\n            sunset: forecast.sunset * 1000,\r\n            weather: mapIWeatherDescription(forecast.weather)\r\n        } as IForecastWeather);\r\n    });\r\n}","import { Dispatch } from 'redux';\r\nimport axios from '../../axios/axios-weather';\r\nimport env from '../../utils/env';\r\nimport { FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from './models/WeatherActionsModel';\r\nimport { IWeather } from './models/Weather';\r\nimport { AppActions } from '../actions';\r\nimport { mapIWeather } from './utils/WeatherMapper';\r\n\r\nconst requestWeather = (): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_REQUEST,\r\n        loading: true,\r\n        error: '',\r\n        weather: {} as IWeather\r\n    }\r\n}\r\n\r\nconst receiveWeather = (fetchedWeather: IWeather): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_SUCCESS,\r\n        loading: false,\r\n        error: '',\r\n        weather: fetchedWeather\r\n    }\r\n}\r\n\r\nconst invalidWeather = (): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_FAILURE,\r\n        loading: false,\r\n        error: 'Something went wrong fetching weather',\r\n        weather: {} as any\r\n    }\r\n}\r\n\r\nexport const fetchWeather = (lat: number, long: number) => {\r\n    return (dispatch: Dispatch<AppActions>) => {\r\n        dispatch(requestWeather());\r\n        axios.get('/' + env.getApiDefaultParams(), {params: {lat: lat, lon: long}})\r\n            .then(response => { \r\n                dispatch(receiveWeather(mapIWeather(response.data)));\r\n            })\r\n            .catch(error => {\r\n                console.log(error.message);\r\n                dispatch(invalidWeather());\r\n            });\r\n    };\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport CurrentWeather from '../../components/CurrentWeather/CurrentWeather';\r\nimport DetailWeather from '../../components/DetailWeather/DetailWeather';\r\nimport FetchingWeather from '../../components/FetchingWeather/FetchingWeather';\r\nimport { ILocalization } from '../../localization/model/localizationModel';\r\nimport { AppActions } from '../../store/actions';\r\nimport { changeLanguage } from '../../store/Localization/LocalizationActions';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { IWeather } from '../../store/Weather/models/Weather';\r\nimport { fetchWeather } from '../../store/Weather/WeatherActions';\r\nimport { UnixUTCDayIcon } from '../../utils/DateConverter';\r\nimport { regionRomania } from '../../localization/utils/coordinates';\r\n\r\ninterface Props {}\r\n\r\ninterface LinkStateProps {\r\n    weather: IWeather;\r\n    localization: ILocalization;\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n    fetchWeather: (lat: number, long: number) => void;\r\n    changeLanguage: (lang: string) => void;\r\n}\r\n\r\ntype LinkProps = Props & LinkStateProps & LinkDispatchProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => {\r\n    return {\r\n        weather: state.weatherReducer.weather,\r\n        localization: state.localizationReducer.language\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState, {}, AppActions>) => {\r\n    return {\r\n        fetchWeather: bindActionCreators(fetchWeather, dispatch),\r\n        changeLanguage: bindActionCreators(changeLanguage, dispatch)\r\n    }\r\n};\r\n\r\nclass CurrentWeatherContainer extends Component<LinkProps> {\r\n\r\n    componentDidMount() {\r\n        if (!this.props.weather.currentWeather) {\r\n            if ('geolocation' in navigator) {\r\n                navigator.geolocation.getCurrentPosition(pos => {\r\n                    // Set starting language based on position \r\n                    const localLang = regionRomania(pos.coords.latitude, pos.coords.longitude) ? 'romanian' : 'english';\r\n                    this.setLocalization(localLang);\r\n                    this.props.fetchWeather(pos.coords.latitude, pos.coords.longitude);\r\n                }, error => {\r\n                    // TODO: remove this when publishing autocomplete\r\n                    console.log(error.message);\r\n                    this.setLocalization('romanian');\r\n                    this.props.fetchWeather(+process.env.REACT_APP_DEFAULT_LAT!, +process.env.REACT_APP_DEFAULT_LONG!);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    setLocalization = (localLang: string) => {\r\n        let language = localStorage.getItem('localization');\r\n        if (language !== null) {\r\n            this.props.changeLanguage(language);\r\n        } else {\r\n            localStorage.setItem('localization', localLang);\r\n            this.props.changeLanguage(localLang);\r\n        }\r\n    }\r\n\r\n    onLoadWeather = () => {\r\n        let weather = <FetchingWeather />;\r\n\r\n        if (this.props.weather.currentWeather) {\r\n            weather = (\r\n                <div>\r\n                    <CurrentWeather\r\n                        temperature={this.props.weather.currentWeather.temp}\r\n                        feelsLike={this.props.weather.currentWeather.feelsLike}\r\n                        description={this.props.weather.currentWeather.weather[0].description}\r\n                        weatherIconId={this.props.weather.currentWeather.weather[0].id}\r\n                        day={UnixUTCDayIcon(this.props.weather.currentWeather.dt,\r\n                            this.props.weather.currentWeather.sunrise,\r\n                            this.props.weather.currentWeather.sunset)} />\r\n\r\n                <DetailWeather\r\n                    currentWeather={this.props.weather.currentWeather}\r\n                    precipitation={this.props.weather.hourlyWeather[0].precipitation} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return weather;\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.onLoadWeather()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentWeatherContainer);","export const regionRomania = (lat: number, long: number) => {\r\n    if (lat > 43.38 && lat < 48.16) {\r\n        if (long > 20.16 && long < 29.42) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","import React, { Suspense, useEffect, useState } from \"react\";\r\nimport { Switch, Route, withRouter, Redirect } from 'react-router-dom';\r\nimport Loading from \"./components/Loading/Loading\";\r\nimport QuickNavigation from \"./components/QuickNavigation/QuickNavigation\";\r\nimport BackgroundHOC from \"./components/BackgroundHOC/BackgroundHOC\";\r\nimport CurrentWeatherContainer from \"./containers/CurrentWeatherContainer/CurrentWeatherContainer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppState } from \"./store/rootStore\";\r\n\r\n// Lazy load components\r\nconst ForecastContainer = React.lazy(() => {\r\n    return import(\"./containers/ForecastContainer/ForecastContainer\");\r\n});\r\n\r\nconst HourlyWeatherContainer = React.lazy(() => {\r\n    return import(\"./containers/HourlyWeatherContainer/HourlyWeatherContainer\");\r\n});\r\n\r\nfunction App() {\r\n\r\n    const currentWeather = useSelector((state: AppState) => state.weatherReducer);\r\n    const [showNavigation, setshowNavigation] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        if (currentWeather.loading !== true) {\r\n            setshowNavigation(true);\r\n        }\r\n    },[currentWeather]);\r\n\r\n    const showNavigationMenu = () => {\r\n        let navMenu = null;\r\n        if (showNavigation) {\r\n            navMenu = <BackgroundHOC>\r\n                        <QuickNavigation />\r\n                    </BackgroundHOC>\r\n        }\r\n        return navMenu;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {showNavigationMenu()}\r\n            <Suspense fallback={<Loading />}>\r\n                <Switch>\r\n                    <Route path='/hourly' render={() => <HourlyWeatherContainer/>} />\r\n                    <Route path='/forecast' render={() => <ForecastContainer/>} />\r\n                    <Route path='/' component={CurrentWeatherContainer} />\r\n                    <Redirect to='/' />\r\n                </Switch>\r\n            </Suspense>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { WeatherActionTypes, FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from './models/WeatherActionsModel';\r\nimport { IWeather } from './models/Weather';\r\n\r\ninterface WeatherState {\r\n    loading: boolean;\r\n    error: string;\r\n    weather: IWeather;\r\n}\r\n\r\nconst initialState: WeatherState = {\r\n    loading: true,\r\n    error: '',\r\n    weather: {} as IWeather\r\n}\r\n\r\nconst FetchWeatherRequest = () => {\r\n    return { loading: true, error: '', weather: {} as IWeather };\r\n}\r\n\r\nconst FetchWeatherSuccess = (action: WeatherActionTypes) => {\r\n    return { loading: false, error: '', weather: action.weather};\r\n}\r\n\r\nconst FetchWeatherFailure = (action: WeatherActionTypes) => {\r\n    return { loading: false, error: action.error, weather: {} as IWeather};\r\n}\r\n\r\nexport const weatherReducer = (state = initialState, action: WeatherActionTypes): WeatherState => {\r\n    switch (action.type) {\r\n        case FETCH_WEATHER_REQUEST: return FetchWeatherRequest();\r\n        case FETCH_WEATHER_SUCCESS: return FetchWeatherSuccess(action);\r\n        case FETCH_WEATHER_FAILURE: return FetchWeatherFailure(action);\r\n        default:\r\n          return state;\r\n    }\r\n}","import { ILocalization } from \"../../localization/model/localizationModel\";\r\nimport * as English from '../../localization/english';\r\nimport { CHANGE_LANGUAGE, LocalizationActionTypes } from \"./models/LocalizationActionsModel\";\r\n\r\ninterface LocalizationState {\r\n    language: ILocalization;\r\n}\r\n\r\nconst initialState: LocalizationState = {\r\n    language: English.localization\r\n}\r\n\r\nconst ChangeLanguage = (action: LocalizationActionTypes) => {\r\n    return { language: action.language };\r\n}\r\n\r\nexport const localizationReducer = (state = initialState, action: LocalizationActionTypes): LocalizationState => {\r\n    switch (action.type) {\r\n        case CHANGE_LANGUAGE: return ChangeLanguage(action);\r\n        default:\r\n          return state;\r\n    }\r\n}","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\r\nimport { createLogger } from 'redux-logger';\r\nimport { weatherReducer } from \"./Weather/WeatherReducer\";\r\nimport { localizationReducer } from './Localization/LocalizationReducer';\r\nimport { AppActions } from \"./actions\";\r\n\r\nconst logger = createLogger();\r\n\r\nlet middleware = [];\r\nif (process.env.NODE_ENV === 'development') {\r\n    middleware = [thunk as ThunkMiddleware<AppState, AppActions>, logger];\r\n} else {\r\n    middleware = [thunk as ThunkMiddleware<AppState, AppActions>];\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n    weatherReducer, localizationReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore<AppState, AppActions, {}, {}>(\r\n    rootReducer,\r\n    applyMiddleware(...middleware)\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { store } from \"./store/rootStore\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                <App />\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();","enum DetailItemType {\r\n    PRECIPITATION_CHANCE,\r\n    WIND,\r\n    UV_INDEX,\r\n    CLOUD_COVER,\r\n    PRESSURE,\r\n    HUMIDITY,\r\n    DEW_POINT,\r\n    VISIBILITY,\r\n    SUNRISE,\r\n    SUNSET\r\n}\r\n\r\nexport default DetailItemType;","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Grid } from '@material-ui/core';\r\nimport * as Icon from 'react-icons/wi'\r\nimport { useSelector } from 'react-redux';\r\nimport DetailItemType from './DetailItemTypes';\r\nimport { AppState } from '../../../store/rootStore';\r\n\r\ninterface DetailItemProps {\r\n    itemType: DetailItemType,\r\n    value: number | string\r\n}\r\n\r\nconst DetailItem: React.FC<DetailItemProps> = (props) => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    let itemIcon = <Icon.WiAlien size={42} />\r\n    let itemValue = 'NA';\r\n    let itemDescription = 'NA';\r\n\r\n    switch (props.itemType) {\r\n        case DetailItemType.PRECIPITATION_CHANCE:\r\n            itemIcon = <Icon.WiUmbrella size={42} color='#666' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = localization.language.get('detail-chance')!;\r\n            break;\r\n        case DetailItemType.WIND:\r\n            itemIcon = <Icon.WiStrongWind size={42} color='#becbd1' />\r\n            itemValue = props.value + ' km/h';\r\n            itemDescription = localization.language.get('detail-wind')!;\r\n            break;\r\n        case DetailItemType.UV_INDEX:\r\n            itemIcon = <Icon.WiSolarEclipse size={42} color='#cbad33' />\r\n            itemValue = props.value as string;\r\n            itemDescription = localization.language.get('detail-uv')!;\r\n            break;\r\n        case DetailItemType.CLOUD_COVER:\r\n            itemIcon = <Icon.WiCloudRefresh size={42} color='#becbd1' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = localization.language.get('detail-cloud')!;\r\n            break;\r\n        case DetailItemType.PRESSURE:\r\n            itemIcon = <Icon.WiBarometer size={42} color='#666' />\r\n            itemValue = props.value + ' mmHg';\r\n            itemDescription = localization.language.get('detail-pressure')!;\r\n            break;\r\n        case DetailItemType.HUMIDITY:\r\n            itemIcon = <Icon.WiHumidity size={42} color='#86c3d6' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = localization.language.get('detail-humidity')!;\r\n            break;\r\n        case DetailItemType.DEW_POINT:\r\n            itemIcon = <Icon.WiThermometerInternal size={42} color='#86c3d6' />\r\n            itemValue = props.value + ' ' + String.fromCharCode(176);\r\n            itemDescription = localization.language.get('detail-dew')!;\r\n            break;\r\n        case DetailItemType.VISIBILITY:\r\n            itemIcon = <Icon.WiTrain size={42} color='#999' />\r\n            itemValue = props.value + ' km';\r\n            itemDescription = localization.language.get('detail-visibility')!;\r\n            break;\r\n        case DetailItemType.SUNRISE:\r\n            itemIcon = <Icon.WiSunrise size={42} color='#edcf53' />\r\n            itemValue = props.value as string;\r\n            itemDescription = localization.language.get('detail-sunrise')!;\r\n            break;\r\n        case DetailItemType.SUNSET:\r\n            itemIcon = <Icon.WiSunset size={42} color='#edcf53' />\r\n            itemValue = props.value as string;\r\n            itemDescription = localization.language.get('detail-sunset')!;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return(\r\n        <Grid container spacing={2} style={{marginTop: '1px'}}>\r\n            <Grid item xs={4}>\r\n                <div style={{textAlign: 'right'}}>\r\n                    {itemIcon}\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <div style={{textAlign: 'left'}}>\r\n                    <Typography variant='subtitle2' className='typography-primary'><strong>{itemValue}</strong></Typography>\r\n                    <Typography variant='body2' className='typography-secondary'>{itemDescription}</Typography>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default DetailItem;","export interface ILocalization {\r\n    language: Map<string, string>;\r\n    weekArray: string[];\r\n    selected: Languages;\r\n}\r\n\r\nexport enum Languages {\r\n    ENGLISH,\r\n    ROMANIAN\r\n}","import { ILocalization } from \"../localization/model/localizationModel\";\r\n\r\nexport const UnixUTCToHourMinuteString = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours() + ':' + date.getMinutes();\r\n}\r\n\r\nexport const UnixUTCToDayString = (utcTime: number, localization: ILocalization) => {\r\n    const days = localization.weekArray;\r\n    const date = new Date(utcTime);\r\n    return days[date.getDay()] + ' ' + date.getDate();\r\n}\r\n\r\nexport const UnixUTCHourString = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours();\r\n}\r\n\r\nexport const UnixUTCHourStringFakeMinutes = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours() + ':00';\r\n}\r\n\r\nexport const UnixUTCDayIcon = (utcTime: number, sunrise: number, sunset: number) => {\r\n    return (utcTime > sunrise && utcTime < sunset); \r\n}\r\n\r\nexport const UnixUTCToDayOfMonth = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getDate();\r\n}","import React from 'react';\r\nimport * as Icon from 'react-icons/wi'\r\n\r\ninterface WeatherIconProps {\r\n    iconId: number,\r\n    day: boolean,\r\n    size?: number\r\n}\r\n\r\nconst WeatherIcon: React.FC<WeatherIconProps> = (props) => {\r\n\r\n    // Default alien icon\r\n    let weatherIcon = <Icon.WiAlien size={props.size} color='#7d8b8e' />\r\n\r\n    // Thunderstorm\r\n    if (props.iconId >= 200 && props.iconId < 300) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiThunderstorm size={props.size} color='#7d8b8e' /> :\r\n            <Icon.WiNightThunderstorm size={props.size} color='#7d8b8e' />\r\n    }\r\n\r\n    // Drizzle\r\n    if (props.iconId >= 300 && props.iconId < 400) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiRainMix size={props.size} color='#96a7af' /> :\r\n            <Icon.WiNightRainMix size={props.size} color='#96a7af' />\r\n    }\r\n\r\n    // Rain\r\n    if (props.iconId >= 500 && props.iconId < 600) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiRain size={props.size} color='#83c2d3' /> :\r\n            <Icon.WiNightRain size={props.size} color='#83c2d3' />\r\n    }\r\n\r\n    // Snow\r\n    if (props.iconId >= 600 && props.iconId < 700) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiSnowflakeCold size={props.size} color='#97becf' /> :\r\n            <Icon.WiNightSnow size={props.size} color='#97becf' />\r\n    }\r\n\r\n    // Atmosphere\r\n    if (props.iconId >= 700 && props.iconId < 800) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiFog size={props.size} color='#becbd1' /> :\r\n            <Icon.WiNightFog size={props.size} color='#becbd1' />\r\n    }\r\n\r\n    // Clear\r\n    if (props.iconId === 800) {\r\n        weatherIcon = props.day ? \r\n            <Icon.WiDaySunny size={props.size} color='#edcf53' /> :\r\n            <Icon.WiNightClear size={props.size} color='#becbd1' />\r\n    }\r\n\r\n    // Cloudy\r\n    if (props.iconId > 800 && props.iconId < 900) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiCloudy size={props.size} color='#becbd1' /> :\r\n            <Icon.WiNightCloudy size={props.size} color='#becbd1' />\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {weatherIcon}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default WeatherIcon;","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppState } from \"../../store/rootStore\";\r\nimport { Sunny, Cloudy } from 'weather-styled-icon';\r\n\r\nconst FetchingWeather = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    const getLoadingIcon = () => {\r\n        let loadingIcon = <Sunny />;\r\n        switch (Math.floor(Math.random() * Math.floor(2))) {\r\n            case 0:\r\n                loadingIcon = <Sunny />;\r\n                break;\r\n            case 1:\r\n                loadingIcon = <Cloudy />;\r\n                break;\r\n            default:\r\n                loadingIcon = <Sunny />;\r\n                break;\r\n        }\r\n        return loadingIcon;\r\n    }\r\n\r\n    return <div style={{marginTop: '250px'}}>\r\n        {getLoadingIcon()}\r\n        <Typography variant='subtitle1'>{localization.language.get('loading')}</Typography>\r\n    </div>;\r\n};\r\n\r\nexport default FetchingWeather;"],"sourceRoot":""}