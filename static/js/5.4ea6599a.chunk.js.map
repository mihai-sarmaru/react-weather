{"version":3,"sources":["components/WeatherChart/chartType.ts","components/ClockIcon/ClockIcon.tsx","components/WeatherChart/ChartTooltip/ChartTooltip.tsx","components/WeatherChart/WeatherChart.tsx","components/HourlyList/HourlyList.tsx","containers/HourlyWeatherContainer/HourlyWeatherContainer.tsx"],"names":["chartType","ClockIcon","props","hour","dt","UnixUTCHourString","toString","hourIcon","size","ChartTooltip","tooltipMeasurement","tooltipMeasurementIcon","color","active","TEMPERATURE","payload","temp","WIND","windSpeed","PRECIPITATION","precipitation","tooltip","Paper","elevation","style","padding","background","Grid","container","spacing","item","Typography","Fragment","WeatherChart","localization","useSelector","state","localizationReducer","language","parsedData","hourlyWeather","forEach","element","index","newElem","push","chartDataKey","chartDataUnit","Tooltip","title","get","IconButton","onClick","chartTypeHandler","justifyContent","md","xs","display","width","height","margin","top","left","right","data","dataKey","tickLine","tick","position","offset","value","axisLine","stroke","strokeDasharray","horizontal","content","strokeWidth","HourlyList","dayIcon","forecast","slice","dayForecast","UnixUTCToDayOfMonth","hourly","UnixUTCDayIcon","sunrise","sunset","marginRight","alignItems","variant","UnixUTCHourStringFakeMinutes","WeatherIcon","iconId","weather","id","day","HourlyWeatherContainer","moreInfo","fetchHourlyWeather","weatherChart","FetchingWeather","type","onChartButtonClick","fetchHourlyDetailWeather","hourlyDetail","filter","el","map","forecastWeather","marginTop","setState","prevState","onMoreButtonClick","this","history","Button","Component","withRouter","connect","weatherReducer"],"mappings":"iIAAKA,E,yFAAAA,O,6BAAAA,I,eAAAA,I,kCAAAA,M,KAMUA,Q,4ECoDAC,EAjD6B,SAACC,GAEzC,IAAMC,EAA2B,kBAAbD,EAAME,GAAkBC,aAAmBH,EAAME,IAAIE,WAAaJ,EAAME,GACxFG,EAAW,cAAC,IAAD,CAAeC,KAAMN,EAAMM,OAuC1C,MArCa,MAATL,GAAyB,OAATA,IAChBI,EAAW,cAAC,IAAD,CAAeC,KAAMN,EAAMM,QAE7B,MAATL,GAAyB,OAATA,IAChBI,EAAW,cAAC,IAAD,CAAcC,KAAMN,EAAMM,QAE5B,MAATL,GAAyB,OAATA,IAChBI,EAAW,cAAC,IAAD,CAAcC,KAAMN,EAAMM,QAE5B,MAATL,GAAyB,OAATA,IAChBI,EAAW,cAAC,IAAD,CAAcC,KAAMN,EAAMM,QAE5B,MAATL,GAAyB,OAATA,IAChBI,EAAW,cAAC,IAAD,CAAcC,KAAMN,EAAMM,QAE5B,MAATL,GAAyB,OAATA,IAChBI,EAAW,cAAC,IAAD,CAAcC,KAAMN,EAAMM,QAE5B,MAATL,GAAyB,OAATA,IAChBI,EAAW,cAAC,IAAD,CAAcC,KAAMN,EAAMM,QAE5B,MAATL,GAAyB,OAATA,IAChBI,EAAW,cAAC,IAAD,CAAcC,KAAMN,EAAMM,QAE5B,MAATL,GAAyB,OAATA,IAChBI,EAAW,cAAC,IAAD,CAAcC,KAAMN,EAAMM,QAE5B,MAATL,GAAyB,OAATA,IAChBI,EAAW,cAAC,IAAD,CAAcC,KAAMN,EAAMM,QAE5B,OAATL,GAA0B,OAATA,IACjBI,EAAW,cAAC,IAAD,CAAeC,KAAMN,EAAMM,QAE7B,OAATL,GAA0B,OAATA,IACjBI,EAAW,cAAC,IAAD,CAAeC,KAAMN,EAAMM,QAItC,8BACKD,KCSEE,EAlDmC,SAACP,GAE/C,IAAIQ,EAAqB,GACrBC,EAAyB,cAAC,IAAD,CAAiBH,KAAM,GAAII,MAAM,SAC9D,GAAIV,EAAMW,OACN,OAAQX,EAAMF,WACV,KAAKA,EAAUc,YACXJ,EAAqBR,EAAMa,QAAQ,GAAGA,QAAQC,KAAO,OACrDL,EAAyB,cAAC,IAAD,CAAuBH,KAAM,GAAII,MAAM,YAChE,MACJ,KAAKZ,EAAUiB,KACXP,EAAqBR,EAAMa,QAAQ,GAAGA,QAAQG,UAAY,QAC1DP,EAAyB,cAAC,IAAD,CAAsBH,KAAM,GAAII,MAAM,YAC/D,MACJ,KAAKZ,EAAUmB,cACXT,EAAqBR,EAAMa,QAAQ,GAAGA,QAAQK,cAAgB,IAC9DT,EAAyB,cAAC,IAAD,CAAoBH,KAAM,GAAII,MAAM,SAC7D,MACJ,QACIF,EAAqBR,EAAMa,QAAQ,GAAGA,QAAQC,KAAO,OACrDL,EAAyB,cAAC,IAAD,CAAuBH,KAAM,GAAII,MAAM,YAK5E,IAAIS,EAAU,KAkBd,OAjBInB,EAAMW,SACNQ,EAAU,cAACC,EAAA,EAAD,CAAOC,UAAW,EAAGC,MAAO,CAACC,QAAS,OAAQC,WAAY,6BAA1D,SAEF,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,eAACF,EAAA,EAAD,CAAMG,MAAI,EAAV,UACI,cAAC,EAAD,CAAW1B,GAAKF,EAAMa,QAAQ,GAAGA,QAAQX,GAAIE,WAAYE,KAAM,KAC/D,cAACuB,EAAA,EAAD,UAAY,mCAAS7B,EAAMa,QAAQ,GAAGA,QAAQX,GAAlC,cAEhB,eAACuB,EAAA,EAAD,CAAMG,MAAI,EAAV,UACKnB,EACD,cAACoB,EAAA,EAAD,UAAarB,aAQ7B,cAAC,IAAMsB,SAAP,UACKX,KCkDEY,EA1FmC,SAAC/B,GAE/C,IAAMgC,EAAeC,aAAY,SAACC,GAAD,OAAqBA,EAAMC,oBAAoBC,YAG1EC,EAA+B,GACrCrC,EAAMsC,cAAcC,SAAQ,SAACC,EAASC,GAClC,IAAMC,EAAO,2BACNF,GADM,IAETtC,GAAIC,YAAkBqC,EAAQtC,MAG9BuC,EAAQ,IAAM,GACdJ,EAAWM,KAAKD,MAGxB,IAAIE,EAAe,OACfC,EAAgB,QACpB,OAAQ7C,EAAMF,WACV,KAAKA,EAAUc,YACXgC,EAAe,OACfC,EAAgB,QAChB,MACJ,KAAK/C,EAAUiB,KACX6B,EAAe,YACfC,EAAgB,OAChB,MACJ,KAAK/C,EAAUmB,cACX2B,EAAe,gBACfC,EAAgB,MAChB,MACJ,QACIA,EAAgB,QAIxB,OACI,eAAC,IAAMf,SAAP,WACI,gCACI,cAACgB,EAAA,EAAD,CAASC,MAAOf,EAAaI,SAASY,IAAI,6BAA1C,SACI,cAACC,EAAA,EAAD,CACIvC,MAAOV,EAAMF,YAAcA,EAAUc,YAAc,UAAY,UAC/DsC,QAAS,kBAAMlD,EAAMmD,iBAAiBrD,EAAUc,cAFpD,SAGI,cAAC,IAAD,CAAsBN,KAAM,SAGpC,cAACwC,EAAA,EAAD,CAASC,MAAOf,EAAaI,SAASY,IAAI,sBAA1C,SACI,cAACC,EAAA,EAAD,CACIvC,MAAOV,EAAMF,YAAcA,EAAUiB,KAAO,UAAY,UACxDmC,QAAS,kBAAMlD,EAAMmD,iBAAiBrD,EAAUiB,OAFpD,SAGI,cAAC,IAAD,CAAqBT,KAAM,SAGnC,cAACwC,EAAA,EAAD,CAASC,MAAOf,EAAaI,SAASY,IAAI,+BAA1C,SACI,cAACC,EAAA,EAAD,CACIvC,MAAOV,EAAMF,YAAcA,EAAUmB,cAAgB,UAAY,UACjEiC,QAAS,kBAAMlD,EAAMmD,iBAAiBrD,EAAUmB,gBAFpD,SAGI,cAAC,IAAD,CAAmBX,KAAM,YAIrC,eAACmB,EAAA,EAAD,CAAMC,WAAS,EAACJ,MAAO,CAAC8B,eAAe,UAAvC,UACI,cAAC3B,EAAA,EAAD,CAAM4B,GAAI,IACV,cAAC5B,EAAA,EAAD,CAAM6B,GAAI,GAAID,GAAI,EAAG/B,MAAO,CAACiC,QAAS,OAAQH,eAAe,UAA7D,SACI,cAAC,IAAD,CAA2BI,MAAM,MAAMC,OAAQ,IAA/C,SACI,eAAC,IAAD,CAAiBC,OAAQ,CAACC,IAAK,GAAIC,KAAM,GAAIC,MAAO,IAAKC,KAAMzB,EAA/D,UACI,eAAC,IAAD,CAAa0B,QAAQ,KAAKC,UAAU,EAAOC,KAAM,wBAAjD,UACI,cAAC,IAAD,CAAaC,SAAS,mBAAmBC,OAAQ,EAC7CC,MAAOpC,EAAaI,SAASY,IAAI,oBACrC,cAAC,IAAD,CAAakB,SAAS,eAAeC,OAAQ,EACzCC,MAAOpC,EAAaI,SAASY,IAAI,mBACrC,cAAC,IAAD,CAAakB,SAAS,oBAAoBC,OAAQ,EAC9CC,MAAOpC,EAAaI,SAASY,IAAI,sBAEzC,cAAC,IAAD,CAAae,QAASnB,EAAcY,MAAO,GAAIQ,UAAU,EAAOK,UAAU,EAA1E,SACI,cAAC,IAAD,CAAaH,SAAS,MAAMC,OAAQ,GAAIC,MAAOvB,MAEnD,cAAC,IAAD,CAAqByB,OAAO,OAAOC,gBAAgB,MAAMC,YAAY,IACrE,cAAC,IAAD,CAAeC,QAAS,cAAC,EAAD,CAAc3E,UAAWE,EAAMF,cACvD,cAAC,IAAD,CAAYiE,QAASnB,EAAc8B,YAAa,WAI5D,cAACjD,EAAA,EAAD,CAAM4B,GAAI,W,iBCrDXsB,EAlC+B,SAAC3E,GAE3C,IAFqD,EAEjD4E,GAAU,EAFuC,cAG3B5E,EAAM6E,SAASC,MAAM,EAAG,IAHG,IAGrD,2BAAsD,CAAC,IAA5CC,EAA2C,QAC9CC,YAAoBD,EAAY7E,MAAQ8E,YAAoBhF,EAAMiF,OAAO/E,MACzE0E,EAAUM,YAAelF,EAAMiF,OAAO/E,GAAI6E,EAAYI,QAASJ,EAAYK,UAL9B,8BASrD,OACI,sBAAK9D,MAAO,CAACiC,QAAS,OAAQH,eAAe,SAAUiC,YAAa,QAApE,UACI,cAAC5D,EAAA,EAAD,CAAM6B,GAAI,EAAGD,GAAI,EAAG/B,MAAO,CAACkC,MAAO,UACnC,eAAC/B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGL,MAAO,CAACgE,WAAY,SAAU5B,OAAQ,QAASF,MAAO,OAAlF,UACI,eAAC/B,EAAA,EAAD,CAAM6B,GAAI,EAAGD,GAAI,EAAG/B,MAAO,CAACiC,QAAS,OAAQH,eAAe,SAA5D,UACI,cAAC,EAAD,CAAWlD,GAAIF,EAAMiF,OAAO/E,GAAII,KAAM,KACtC,cAACuB,EAAA,EAAD,CAAY0D,QAAQ,QAApB,SAA6BC,YAA6BxF,EAAMiF,OAAO/E,SAE3E,cAACuB,EAAA,EAAD,CAAM6B,GAAI,EAAGD,GAAI,EAAjB,SACI,cAACoC,EAAA,EAAD,CAAaC,OAAQ1F,EAAMiF,OAAOU,QAAQ,GAAGC,GAAIC,IAAKjB,EAAStE,KAAM,OAEzE,cAACmB,EAAA,EAAD,CAAM6B,GAAI,EAAGD,GAAI,EAAG/B,MAAO,CAACkC,MAAO,UACnC,eAAC/B,EAAA,EAAD,CAAM6B,GAAI,EAAGD,GAAI,EAAG/B,MAAO,CAACiC,QAAS,OAAQH,eAAe,QAA5D,UACI,cAAC,IAAD,CAAoB9C,KAAM,GAAII,MAAM,SACpC,eAACmB,EAAA,EAAD,CAAY0D,QAAQ,QAApB,UAA6BvF,EAAMiF,OAAO/D,cAA1C,UAEJ,eAACO,EAAA,EAAD,CAAM6B,GAAI,EAAGD,GAAI,EAAG/B,MAAO,CAACiC,QAAS,OAAQH,eAAe,QAA5D,UACI,cAAC,IAAD,CAAuB9C,KAAM,GAAII,MAAM,YACvC,eAACmB,EAAA,EAAD,CAAY0D,QAAQ,QAApB,UAA6BvF,EAAMiF,OAAOnE,KAA1C,oB,iBCDdgF,E,4MAEF5D,MAAoB,CAChBpC,UAAWA,EAAUc,YACrBmF,UAAU,G,EASdC,mBAAqB,WACjB,IAAIC,EAAe,cAACC,EAAA,EAAD,GAAsB,YAOzC,OANI,EAAKlG,MAAMsC,gBACX2D,EAAe,cAAC,EAAD,CACC3D,cAAe,EAAKtC,MAAMsC,cAC1BxC,UAAW,EAAKoC,MAAMpC,UACtBqD,iBAAkB,SAACgD,GAAD,OAAqB,EAAKC,mBAAmBD,OAE5EF,G,EAGXI,yBAA2B,WACvB,IAAIC,EAAe,KAYnB,OAXI,EAAKtG,MAAMsC,gBACXgE,EAAe,EAAKtG,MAAMsC,cAAciE,QAAO,SAACC,EAAI/D,GAChD,OAAiB,IAAVA,KACRgE,KAAI,SAACxB,EAAQxC,GACZ,OAAI,EAAKP,MAAM6D,SACJtD,EAAQ,IAAM,EAAI,cAAC,EAAD,CAAwBwC,OAAQA,EAAQJ,SAAU,EAAK7E,MAAM0G,iBAA5CjE,GAAkE,KAErGA,EAAQ,EAAI,cAAC,EAAD,CAAwBwC,OAAQA,EAAQJ,SAAU,EAAK7E,MAAM0G,iBAA5CjE,GAAkE,SAI3G,qBAAKnB,MAAO,CAACqF,UAAW,QAAxB,SAAkCL,K,EAG7CF,mBAAqB,SAACD,GAClB,EAAKS,UAAS,SAACC,GACX,MAAO,CACH/G,UAAWqG,O,EAKvBW,kBAAoB,WAChB,EAAKF,UAAS,SAACC,GACX,MAAO,CACHd,UAAWc,EAAUd,aAG7B,EAAKM,4B,kEA9CAU,KAAK/G,MAAMsC,eACZyE,KAAK/G,MAAMgH,QAAQrE,KAAK,O,+BAiD5B,OACI,gCACKoE,KAAKf,qBACLe,KAAKV,2BACN,eAACY,EAAA,EAAD,CAAQ1B,QAAQ,WAAWjF,KAAK,QAAQgB,MAAO,CAACoC,OAAQ,UACpDR,QAAS6D,KAAKD,kBADlB,UAESC,KAAK7E,MAAM6D,SAAW,cAAC,IAAD,IAAwB,cAAC,IAAD,IAC9CgB,KAAK7E,MAAM6D,SAAWgB,KAAK/G,MAAMgC,aAAaI,SAASY,IAAI,eACrC+D,KAAK/G,MAAMgC,aAAaI,SAASY,IAAI,yB,GAlE/CkE,aAyEtBC,sBAAWC,aAtFF,SAAClF,GACrB,MAAO,CACHI,cAAeJ,EAAMmF,eAAe1B,QAAQrD,cAC5CoE,gBAAiBxE,EAAMmF,eAAe1B,QAAQd,SAC9C7C,aAAcE,EAAMC,oBAAoBC,YAkFtBgF,CAAyBtB","file":"static/js/5.4ea6599a.chunk.js","sourcesContent":["enum chartType {\r\n    TEMPERATURE,\r\n    WIND,\r\n    PRECIPITATION\r\n}\r\n\r\nexport default chartType;","import React from 'react';\r\nimport * as Icon from 'react-icons/wi';\r\nimport { UnixUTCHourString } from '../../utils/DateConverter';\r\n\r\ninterface ClockIconProps {\r\n    dt: number | string;\r\n    size?: number;\r\n}\r\n\r\nconst ClockIcon: React.FC<ClockIconProps> = (props) => {\r\n\r\n    const hour = typeof props.dt === 'number' ? UnixUTCHourString(+props.dt).toString() : props.dt;\r\n    let hourIcon = <Icon.WiTime12 size={props.size} />\r\n    \r\n    if (hour === '0' || hour === '12') {\r\n        hourIcon = <Icon.WiTime12 size={props.size} />\r\n    }\r\n    if (hour === '1' || hour === '13') {\r\n        hourIcon = <Icon.WiTime1 size={props.size} />\r\n    }\r\n    if (hour === '2' || hour === '14') {\r\n        hourIcon = <Icon.WiTime2 size={props.size} />\r\n    }\r\n    if (hour === '3' || hour === '15') {\r\n        hourIcon = <Icon.WiTime3 size={props.size} />\r\n    }\r\n    if (hour === '4' || hour === '16') {\r\n        hourIcon = <Icon.WiTime4 size={props.size} />\r\n    }\r\n    if (hour === '5' || hour === '17') {\r\n        hourIcon = <Icon.WiTime5 size={props.size} />\r\n    }\r\n    if (hour === '6' || hour === '18') {\r\n        hourIcon = <Icon.WiTime6 size={props.size} />\r\n    }\r\n    if (hour === '7' || hour === '19') {\r\n        hourIcon = <Icon.WiTime7 size={props.size} />\r\n    }\r\n    if (hour === '8' || hour === '20') {\r\n        hourIcon = <Icon.WiTime8 size={props.size} />\r\n    }\r\n    if (hour === '9' || hour === '21') {\r\n        hourIcon = <Icon.WiTime9 size={props.size} />\r\n    }\r\n    if (hour === '10' || hour === '22') {\r\n        hourIcon = <Icon.WiTime10 size={props.size} />\r\n    }\r\n    if (hour === '11' || hour === '23') {\r\n        hourIcon = <Icon.WiTime11 size={props.size} />\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {hourIcon}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClockIcon;","import React from 'react';\r\nimport { Grid, Paper, Typography } from '@material-ui/core';\r\nimport * as WiIcons from 'react-icons/wi';\r\nimport chartType from '../chartType';\r\nimport ClockIcon from '../../ClockIcon/ClockIcon';\r\n\r\ninterface ChartTooltipProps {\r\n    chartType: chartType;\r\n    active?: boolean;\r\n    payload?: any;\r\n}\r\n\r\nconst ChartTooltip: React.FC<ChartTooltipProps> = (props) => {\r\n\r\n    let tooltipMeasurement = '';\r\n    let tooltipMeasurementIcon = <WiIcons.WiAlien size={20} color='#000'/>;\r\n    if (props.active) {\r\n        switch (props.chartType) {\r\n            case chartType.TEMPERATURE:\r\n                tooltipMeasurement = props.payload[0].payload.temp + '°';\r\n                tooltipMeasurementIcon = <WiIcons.WiThermometer size={20} color='#86c3d6'/>;\r\n                break;\r\n            case chartType.WIND:\r\n                tooltipMeasurement = props.payload[0].payload.windSpeed + ' km/h';\r\n                tooltipMeasurementIcon = <WiIcons.WiStrongWind size={20} color='#becbd1'/>;\r\n                break;\r\n            case chartType.PRECIPITATION:\r\n                tooltipMeasurement = props.payload[0].payload.precipitation + '%';\r\n                tooltipMeasurementIcon = <WiIcons.WiUmbrella size={20} color='#666'/>;\r\n                break;\r\n            default:\r\n                tooltipMeasurement = props.payload[0].payload.temp + '°';\r\n                tooltipMeasurementIcon = <WiIcons.WiThermometer size={20} color='#86c3d6'/>;\r\n                break;\r\n        }\r\n    }\r\n\r\n    let tooltip = null;\r\n    if (props.active) {\r\n        tooltip = <Paper elevation={1} style={{padding: '10px', background: 'rgba(255, 255, 255, 0.95)'}}>\r\n\r\n                <Grid container spacing={3}>\r\n                    <Grid item >\r\n                        <ClockIcon dt={(props.payload[0].payload.dt).toString()} size={20} />\r\n                        <Typography><strong>{props.payload[0].payload.dt}:00</strong></Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        {tooltipMeasurementIcon}\r\n                        <Typography>{tooltipMeasurement}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Paper>;\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {tooltip}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ChartTooltip;","import React from 'react';\r\nimport { Grid, IconButton, Tooltip } from '@material-ui/core';\r\nimport * as WiIcon from 'react-icons/wi'\r\nimport * as Chart from 'recharts';\r\nimport { IHourlyWeather } from '../../store/Weather/models/Weather';\r\nimport { UnixUTCHourString } from '../../utils/DateConverter';\r\nimport chartType from './chartType';\r\nimport ChartTooltip from './ChartTooltip/ChartTooltip';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/rootStore';\r\n\r\ninterface WeatherChartProps {\r\n    hourlyWeather: IHourlyWeather[];\r\n    chartType: chartType;\r\n    chartTypeHandler: (type: chartType) => void;\r\n}\r\n\r\nconst WeatherChart: React.FC<WeatherChartProps> = (props) => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    // Convert Date\r\n    const parsedData: IHourlyWeather[] = [];\r\n    props.hourlyWeather.forEach((element, index) => {\r\n        const newElem = {\r\n            ...element,\r\n            dt: UnixUTCHourString(element.dt)\r\n        }\r\n        // Chart complexity - element devided by 3\r\n        if (index % 3 === 0)\r\n            parsedData.push(newElem);\r\n    });\r\n\r\n    let chartDataKey = 'temp';\r\n    let chartDataUnit = '°C';\r\n    switch (props.chartType) {\r\n        case chartType.TEMPERATURE:\r\n            chartDataKey = 'temp';\r\n            chartDataUnit = '°C';\r\n            break;\r\n        case chartType.WIND:\r\n            chartDataKey = 'windSpeed';\r\n            chartDataUnit = 'km/h';\r\n            break;\r\n        case chartType.PRECIPITATION:\r\n            chartDataKey = 'precipitation';\r\n            chartDataUnit = '(%)';\r\n            break;\r\n        default:\r\n            chartDataUnit = '°C';\r\n            break;\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div>\r\n                <Tooltip title={localization.language.get('chart-tooltip-temperature')!} >\r\n                    <IconButton\r\n                        color={props.chartType === chartType.TEMPERATURE ? 'primary' : 'default'}\r\n                        onClick={() => props.chartTypeHandler(chartType.TEMPERATURE)}>\r\n                        <WiIcon.WiThermometer size={32}/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title={localization.language.get('chart-tooltip-wind')!} >\r\n                    <IconButton\r\n                        color={props.chartType === chartType.WIND ? 'primary' : 'default'}\r\n                        onClick={() => props.chartTypeHandler(chartType.WIND)}>\r\n                        <WiIcon.WiStrongWind size={32}/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title={localization.language.get('chart-tooltip-precipitation')!} >\r\n                    <IconButton\r\n                        color={props.chartType === chartType.PRECIPITATION ? 'primary' : 'default'}\r\n                        onClick={() => props.chartTypeHandler(chartType.PRECIPITATION)}>\r\n                        <WiIcon.WiUmbrella size={32}/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </div>\r\n            <Grid container style={{justifyContent:'center'}}>\r\n                <Grid md={2} />\r\n                <Grid xs={12} md={8} style={{display: 'flex', justifyContent:'center'}}>\r\n                    <Chart.ResponsiveContainer width='95%' height={250}>\r\n                        <Chart.LineChart margin={{top: 35, left: 10, right: 10}} data={parsedData}>\r\n                            <Chart.XAxis dataKey='dt' tickLine={false} tick={<div/>}>\r\n                                <Chart.Label position='insideBottomLeft' offset={0}\r\n                                    value={localization.language.get('chart-axis-now')!}/>\r\n                                <Chart.Label position='insideBottom' offset={0}\r\n                                    value={localization.language.get('chart-axis-24')!}/>\r\n                                <Chart.Label position='insideBottomRight' offset={0}\r\n                                    value={localization.language.get('chart-axis-48')!}/>\r\n                            </Chart.XAxis>\r\n                            <Chart.YAxis dataKey={chartDataKey} width={30} tickLine={false} axisLine={false}>\r\n                                <Chart.Label position='top' offset={20} value={chartDataUnit}/>\r\n                            </Chart.YAxis>\r\n                            <Chart.CartesianGrid stroke=\"#eee\" strokeDasharray='3 5' horizontal={false} />\r\n                            <Chart.Tooltip content={<ChartTooltip chartType={props.chartType} />} />\r\n                            <Chart.Line dataKey={chartDataKey} strokeWidth={2}/>\r\n                        </Chart.LineChart>\r\n                    </Chart.ResponsiveContainer>\r\n                </Grid>\r\n                <Grid md={2} />\r\n                \r\n            </Grid>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default WeatherChart;","import React from 'react';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport * as WiIcons from 'react-icons/wi';\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\nimport { IHourlyWeather, IForecastWeather } from '../../store/Weather/models/Weather';\r\nimport { UnixUTCHourStringFakeMinutes, UnixUTCToDayOfMonth, UnixUTCDayIcon } from '../../utils/DateConverter';\r\nimport ClockIcon from '../ClockIcon/ClockIcon';\r\n\r\ninterface HourlyListProps {\r\n    hourly: IHourlyWeather;\r\n    forecast: IForecastWeather[];\r\n}\r\n\r\nconst HourlyList: React.FC<HourlyListProps> = (props) => {\r\n\r\n    let dayIcon = true;\r\n    for (const dayForecast of props.forecast.slice(0, 3)) {\r\n        if (UnixUTCToDayOfMonth(dayForecast.dt) === UnixUTCToDayOfMonth(props.hourly.dt)) {\r\n            dayIcon = UnixUTCDayIcon(props.hourly.dt, dayForecast.sunrise, dayForecast.sunset);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div style={{display: 'flex', justifyContent:'center', marginRight: '20px'}}>\r\n            <Grid xs={1} md={3} style={{width: '100%'}} />\r\n            <Grid container spacing={2} style={{alignItems: 'center', margin: '3px 0', width: '90%'}}>\r\n                <Grid xs={3} md={2} style={{display: 'flex', justifyContent:'right'}}>\r\n                    <ClockIcon dt={props.hourly.dt} size={25} />\r\n                    <Typography variant='body1'>{UnixUTCHourStringFakeMinutes(props.hourly.dt)}</Typography>\r\n                </Grid>\r\n                <Grid xs={1} md={1}>\r\n                    <WeatherIcon iconId={props.hourly.weather[0].id} day={dayIcon} size={35} />\r\n                </Grid>\r\n                <Grid xs={3} md={3} style={{width: '100%'}} />\r\n                <Grid xs={3} md={2} style={{display: 'flex', justifyContent:'left'}}>\r\n                    <WiIcons.WiUmbrella size={25} color='#666' />\r\n                    <Typography variant='body1'>{props.hourly.precipitation}%</Typography>\r\n                </Grid>\r\n                <Grid xs={2} md={4} style={{display: 'flex', justifyContent:'left'}}>\r\n                    <WiIcons.WiThermometer size={25} color='#86c3d6' />\r\n                    <Typography variant='body1'>{props.hourly.temp}°</Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HourlyList;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport FetchingWeather from '../../components/FetchingWeather/FetchingWeather';\r\nimport chartType from '../../components/WeatherChart/chartType';\r\nimport WeatherChart from '../../components/WeatherChart/WeatherChart';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { IForecastWeather, IHourlyWeather } from '../../store/Weather/models/Weather';\r\nimport HourlyList from '../../components/HourlyList/HourlyList';\r\nimport { Button } from '@material-ui/core';\r\nimport * as Icon from 'react-icons/md';\r\nimport { ILocalization } from '../../localization/model/localizationModel';\r\n\r\ninterface Props {}\r\n\r\ninterface LinkStateProps {\r\n    hourlyWeather: IHourlyWeather[];\r\n    forecastWeather: IForecastWeather[];\r\n    localization: ILocalization;\r\n}\r\n\r\ninterface LinkDispatchProps {}\r\n\r\ntype LinkProps = Props & LinkStateProps & LinkDispatchProps & RouteComponentProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => {\r\n    return {\r\n        hourlyWeather: state.weatherReducer.weather.hourlyWeather,\r\n        forecastWeather: state.weatherReducer.weather.forecast,\r\n        localization: state.localizationReducer.language\r\n    }\r\n}\r\n\r\ninterface LocalState {\r\n    chartType: chartType;\r\n    moreInfo: boolean;\r\n}\r\n\r\nclass HourlyWeatherContainer extends Component<LinkProps> {\r\n\r\n    state: LocalState = {\r\n        chartType: chartType.TEMPERATURE,\r\n        moreInfo: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.hourlyWeather) {\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    fetchHourlyWeather = () => {\r\n        let weatherChart = <FetchingWeather key={'fetching'} />;\r\n        if (this.props.hourlyWeather) {\r\n            weatherChart = <WeatherChart\r\n                            hourlyWeather={this.props.hourlyWeather}\r\n                            chartType={this.state.chartType}\r\n                            chartTypeHandler={(type: chartType) => this.onChartButtonClick(type)} />;\r\n        }\r\n        return weatherChart;\r\n    }\r\n\r\n    fetchHourlyDetailWeather = () => {\r\n        let hourlyDetail = null;\r\n        if (this.props.hourlyWeather) {\r\n            hourlyDetail = this.props.hourlyWeather.filter((el, index) => {\r\n                return index !== 0;\r\n            }).map((hourly, index) => {\r\n                if (this.state.moreInfo) {\r\n                    return index % 3 === 0 ? <HourlyList key={index} hourly={hourly} forecast={this.props.forecastWeather} /> : null;\r\n                } else {\r\n                    return index < 3 ? <HourlyList key={index} hourly={hourly} forecast={this.props.forecastWeather} /> : null;\r\n                }\r\n            });\r\n        }\r\n        return <div style={{marginTop: '50px'}}>{hourlyDetail}</div>;\r\n    }\r\n\r\n    onChartButtonClick = (type: chartType) => {\r\n        this.setState((prevState: LocalState) => {\r\n            return {\r\n                chartType: type\r\n            }\r\n        });\r\n    }\r\n\r\n    onMoreButtonClick = () => {\r\n        this.setState((prevState: LocalState) => {\r\n            return {\r\n                moreInfo: !prevState.moreInfo\r\n            }\r\n        });\r\n        this.fetchHourlyDetailWeather();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.fetchHourlyWeather()}\r\n                {this.fetchHourlyDetailWeather()}\r\n                <Button variant='outlined' size='small' style={{margin: '20px 0'}}\r\n                    onClick={this.onMoreButtonClick}>\r\n                        {this.state.moreInfo ? <Icon.MdUnfoldLess /> : <Icon.MdUnfoldMore />}\r\n                        {this.state.moreInfo ? this.props.localization.language.get('toggle-less') :\r\n                                               this.props.localization.language.get('toggle-more')}\r\n                        </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(HourlyWeatherContainer));"],"sourceRoot":""}