{"version":3,"sources":["localization/model/localizationModel.ts","store/Localization/models/LocalizationActionsModel.ts","localization/english.ts","localization/romanian.ts","components/DetailWeather/DetailItem/DetailItemTypes.ts","store/Localization/LocalizationActions.ts","components/LanguageOptions/LanguageOptions.tsx","components/OptionsDrawer/OptionsDrawer.tsx","components/QuickNavigation/QuickNavigation.tsx","components/WeatherIcon/WeatherIcon.tsx","components/CurrentWeather/CurrentWeather.tsx","components/WeatherChart/chartType.ts","components/DetailWeather/DetailItem/DetailItem.tsx","utils/DateConverter.ts","components/DetailWeather/DetailWeather.tsx","components/FetchingWeather/FetchingWeather.tsx","utils/env.ts","axios/axios-weather.ts","store/Weather/models/WeatherActionsModel.ts","store/Weather/utils/WeatherMapper.ts","store/Weather/WeatherActions.ts","containers/CurrentWeatherContainer/CurrentWeatherContainer.tsx","localization/utils/coordinates.ts","components/Forecast/OverviewDetailItem/OverviewDetailItem.tsx","components/Forecast/OverviewItem/OverviewItem.tsx","containers/ForecastContainer/ForecastContainer.tsx","components/ClockIcon/ClockIcon.tsx","components/WeatherChart/ChartTooltip/ChartTooltip.tsx","components/WeatherChart/WeatherChart.tsx","components/HourlyList/HourlyList.tsx","containers/HourlyWeatherContainer/HourlyWeatherContainer.tsx","App.tsx","store/Weather/WeatherReducer.ts","store/Localization/LocalizationReducer.ts","store/rootStore.ts","index.tsx"],"names":["Languages","CHANGE_LANGUAGE","languageMap","Map","set","localization","language","weekArray","selected","ENGLISH","DetailItemType","ROMANIAN","changeLanguage","lang","type","English","Romanian","LanguageOptions","useSelector","state","localizationReducer","dispatch","useDispatch","style","width","margin","FormControl","component","FormLabel","get","RadioGroup","aria-label","name","value","onChange","event","target","localStorage","setItem","FormControlLabel","control","Radio","label","OptionsDrawer","props","Drawer","anchor","open","onClose","Grid","container","QuickNavigation","useState","drawer","navState","setNavState","onOptionsButtonClick","Fragment","ButtonGroup","variant","size","Button","startIcon","Link","to","onClick","WeatherIcon","weatherIcon","color","iconId","day","CurrentWeather","spacing","marginBottom","item","xs","textAlign","weatherIconId","from","number","temperature","Typography","className","toFixed","feelsLike","description","chartType","DetailItem","itemIcon","itemValue","itemDescription","itemType","PRECIPITATION_CHANCE","WIND","UV_INDEX","CLOUD_COVER","PRESSURE","HUMIDITY","DEW_POINT","VISIBILITY","SUNRISE","SUNSET","marginTop","UnixUTCToHourMinuteString","utcTime","date","Date","getHours","getMinutes","UnixUTCToDayString","days","getDay","getDate","UnixUTCHourString","UnixUTCDayIcon","sunrise","sunset","UnixUTCToDayOfMonth","DetailWeather","opacity","sprops","md","lg","precipitation","currentWeather","windSpeed","uvi","clouds","pressure","humidity","dewPoint","visibility","FetchingWeather","CircularProgress","env","process","this","buildApi","main","apiK","replace","substring","length","instance","axios","create","baseURL","getBaseAPI","FETCH_WEATHER_REQUEST","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","mapIWeatherCoordinates","coord","latitude","lat","longitude","lon","timezoneOffset","timezone_offset","mapICurrentWeather","current","weatherDesc","mapIWeatherDescription","weather","dt","temp","feels_like","dew_point","wind_speed","map","wdesc","id","mapIHourlyWeather","hourlyWeather","hourly","pop","mapIForecastWeather","forecastWeather","forecast","maxTemp","max","minTemp","min","fetchWeather","long","loading","error","getApiDefaultParams","params","then","response","fetchedWeather","data","coordinates","daily","catch","console","log","message","CurrentWeatherContainer","setLocalization","localLang","getItem","onLoadWeather","navigator","geolocation","getCurrentPosition","pos","coords","Component","connect","weatherReducer","bindActionCreators","OverviewDetailItem","sm","marginLeft","Paper","background","OverviewItem","expandClick","display","marginRight","IconButton","expanded","isOpened","ForecastContainer","initLocalState","forecastLength","exArr","i","push","setState","onExpandClick","index","prevState","itemIndex","fetchWeatherForecast","overviewItems","filter","el","history","withRouter","ClockIcon","hour","toString","hourIcon","ChartTooltip","tooltipMeasurement","tooltipMeasurementIcon","active","TEMPERATURE","payload","PRECIPITATION","tooltip","elevation","padding","WeatherChart","parsedData","forEach","element","newElem","chartDataKey","chartDataUnit","Tooltip","title","chartTypeHandler","justifyContent","height","top","left","right","dataKey","tickLine","tick","position","offset","axisLine","stroke","strokeDasharray","horizontal","content","strokeWidth","HourlyList","dayIcon","slice","dayForecast","alignItems","HourlyWeatherContainer","moreInfo","fetchHourlyWeather","weatherChart","onChartButtonClick","fetchHourlyDetailWeather","hourlyDetail","onMoreButtonClick","path","initialState","FetchWeatherSuccess","action","FetchWeatherFailure","ChangeLanguage","middleware","createLogger","thunk","rootReducer","combineReducers","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.be8831e8.chunk.js","sourcesContent":["export interface ILocalization {\r\n    language: Map<string, string>;\r\n    weekArray: string[];\r\n    selected: Languages;\r\n}\r\n\r\nexport enum Languages {\r\n    ENGLISH,\r\n    ROMANIAN\r\n}","import { ILocalization } from '../../../localization/model/localizationModel';\r\n\r\nexport const CHANGE_LANGUAGE = \"CHANGE_LANGUAGE\";\r\n\r\ninterface Localization {\r\n    language: ILocalization;\r\n}\r\n\r\ninterface ChangeLanguage extends Localization {\r\n    type: typeof CHANGE_LANGUAGE;\r\n}\r\n\r\nexport type LocalizationActionTypes = ChangeLanguage;","import { ILocalization, Languages } from \"./model/localizationModel\";\r\n\r\nlet languageMap = new Map<string, string>();\r\n\r\n// loading\r\nlanguageMap.set('loading', 'Fetching weather');\r\n\r\n// navigation\r\nlanguageMap.set('nav-now', 'Now');\r\nlanguageMap.set('nav-hourly', 'Hourly');\r\nlanguageMap.set('nav-later', 'Later');\r\n\r\n// current weather\r\nlanguageMap.set('current-feels', 'Feels like');\r\n\r\n// detail weather\r\nlanguageMap.set('detail-chance', 'Chance');\r\nlanguageMap.set('detail-wind', 'Wind speed');\r\nlanguageMap.set('detail-uv', 'UV Index');\r\nlanguageMap.set('detail-cloud', 'Cloud cover');\r\nlanguageMap.set('detail-pressure', 'Pressure');\r\nlanguageMap.set('detail-humidity', 'Humidity');\r\nlanguageMap.set('detail-dew', 'Dew point');\r\nlanguageMap.set('detail-visibility', 'Visibility');\r\nlanguageMap.set('detail-sunrise', 'Sunrise');\r\nlanguageMap.set('detail-sunset', 'Sunset');\r\n\r\n// chart tooltip\r\nlanguageMap.set('chart-tooltip-temperature', 'Temperature');\r\nlanguageMap.set('chart-tooltip-wind', 'Wind speed');\r\nlanguageMap.set('chart-tooltip-precipitation', 'Precipitation');\r\n\r\n// chart X axis\r\nlanguageMap.set('chart-axis-now', 'Now');\r\nlanguageMap.set('chart-axis-24', '24h');\r\nlanguageMap.set('chart-axis-48', '48h');\r\n\r\n// more less toggle button\r\nlanguageMap.set('toggle-more', 'More');\r\nlanguageMap.set('toggle-less', 'Less');\r\n\r\n// options\r\nlanguageMap.set('options-lang-title', 'Weather language');\r\nlanguageMap.set('options-lang-en', 'English');\r\nlanguageMap.set('options-lang-ro', 'Romanian');\r\n\r\n// week days array\r\nconst weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nconst selectedLanguage = Languages.ENGLISH;\r\n\r\nexport const localization: ILocalization = {\r\n    language: languageMap,\r\n    weekArray: weekDays,\r\n    selected: selectedLanguage\r\n}","import { ILocalization, Languages } from \"./model/localizationModel\";\r\n\r\nlet languageMap = new Map<string, string>();\r\n\r\n// loading\r\nlanguageMap.set('loading', 'Se incarca vremea');\r\n\r\n// navigation\r\nlanguageMap.set('nav-now', 'Acum');\r\nlanguageMap.set('nav-hourly', 'Urmeaza');\r\nlanguageMap.set('nav-later', 'Viitor');\r\n\r\n// current weather\r\nlanguageMap.set('current-feels', 'Se simte');\r\n\r\n// detail weather\r\nlanguageMap.set('detail-chance', 'Sanse');\r\nlanguageMap.set('detail-wind', 'Vant');\r\nlanguageMap.set('detail-uv', 'Index UV');\r\nlanguageMap.set('detail-cloud', 'Acoperire');\r\nlanguageMap.set('detail-pressure', 'Presiune');\r\nlanguageMap.set('detail-humidity', 'Umiditate');\r\nlanguageMap.set('detail-dew', 'Condens');\r\nlanguageMap.set('detail-visibility', 'Visibilitate');\r\nlanguageMap.set('detail-sunrise', 'Rasarit');\r\nlanguageMap.set('detail-sunset', 'Apus');\r\n\r\n// chart tooltip\r\nlanguageMap.set('chart-tooltip-temperature', 'Temperatura');\r\nlanguageMap.set('chart-tooltip-wind', 'Vant');\r\nlanguageMap.set('chart-tooltip-precipitation', 'Precipitatie');\r\n\r\n// chart X axis\r\nlanguageMap.set('chart-axis-now', 'Acum');\r\nlanguageMap.set('chart-axis-24', '24 ore');\r\nlanguageMap.set('chart-axis-48', '48 ore');\r\n\r\n// more less toggle button\r\nlanguageMap.set('toggle-more', 'Mai Mult');\r\nlanguageMap.set('toggle-less', 'Mai Putin');\r\n\r\n// options\r\nlanguageMap.set('options-lang-title', 'Schimba limba');\r\nlanguageMap.set('options-lang-en', 'Engleza');\r\nlanguageMap.set('options-lang-ro', 'Romana');\r\n\r\n// week days array\r\nconst weekDays = ['Duminica', 'Luni', 'Marti', 'Miercuri', 'Joi', 'Vineri', 'Sambata'];\r\n\r\nconst selectedLanguage = Languages.ROMANIAN;\r\n\r\nexport const localization: ILocalization = {\r\n    language: languageMap,\r\n    weekArray: weekDays,\r\n    selected: selectedLanguage\r\n}","enum DetailItemType {\r\n    PRECIPITATION_CHANCE,\r\n    WIND,\r\n    UV_INDEX,\r\n    CLOUD_COVER,\r\n    PRESSURE,\r\n    HUMIDITY,\r\n    DEW_POINT,\r\n    VISIBILITY,\r\n    SUNRISE,\r\n    SUNSET\r\n}\r\n\r\nexport default DetailItemType;","import { AppActions } from \"../actions\";\r\nimport { CHANGE_LANGUAGE } from \"./models/LocalizationActionsModel\";\r\n\r\nimport * as English from '../../localization/english';\r\nimport * as Romanian from '../../localization/romanian';\r\n\r\nexport const changeLanguage = (lang: string): AppActions => {\r\n     return {\r\n        type: CHANGE_LANGUAGE,\r\n        language: lang === 'english' ? English.localization : Romanian.localization\r\n     }\r\n}","import React from 'react';\r\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { AppActions } from '../../store/actions';\r\nimport { Languages } from '../../localization/model/localizationModel';\r\nimport { changeLanguage } from '../../store/Localization/LocalizationActions';\r\n\r\nconst LanguageOptions = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n    const dispatch = useDispatch<ThunkDispatch<AppState, {}, AppActions>>();\r\n\r\n    const handleSelectedLanguage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = +(event.target as HTMLInputElement).value === 0 ? 'english' : 'romanian';\r\n        dispatch(changeLanguage(value));\r\n        localStorage.setItem('localization', value);\r\n    }\r\n\r\n    return(\r\n        <div style={{width: '70%', margin: '10px auto'}}>\r\n             <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">{localization.language.get('options-lang-title')}</FormLabel>\r\n                <RadioGroup aria-label=\"language\" name=\"language\" value={localization.selected} onChange={handleSelectedLanguage} >\r\n                    <FormControlLabel value={Languages.ENGLISH} control={<Radio />} label={localization.language.get('options-lang-en')} />\r\n                    <FormControlLabel value={Languages.ROMANIAN} control={<Radio />} label={localization.language.get('options-lang-ro')} />\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LanguageOptions;","import React from 'react';\r\nimport { Drawer, Grid } from '@material-ui/core';\r\nimport LanguageOptions from '../LanguageOptions/LanguageOptions';\r\n\r\ninterface OptionsDrawerProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nconst OptionsDrawer: React.FC<OptionsDrawerProps> = (props) => {\r\n    return (\r\n        <Drawer anchor='top' open={props.open} onClose={props.onClose}>\r\n\r\n            <Grid container>\r\n                <LanguageOptions />\r\n            </Grid>\r\n\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default OptionsDrawer;","import { Button, ButtonGroup } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as WiIcons from 'react-icons/wi';\r\nimport * as MdIcons from 'react-icons/md';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/rootStore';\r\nimport OptionsDrawer from '../OptionsDrawer/OptionsDrawer';\r\n\r\ninterface QuickNavigationLocalState {\r\n    drawer: boolean;\r\n}\r\n\r\nconst QuickNavigation = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    const [navState, setNavState] = useState<QuickNavigationLocalState>({drawer: false});\r\n\r\n    const onOptionsButtonClick = () => {\r\n        setNavState({drawer: !navState.drawer});\r\n    }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            <ButtonGroup variant='outlined' size='small' style={{margin: '40px 0'}}>\r\n                <Button startIcon={<WiIcons.WiThermometer />}\r\n                    component={Link} to={'/'}>{localization.language.get('nav-now')}</Button>\r\n                <Button startIcon={<WiIcons.WiTime4 />}\r\n                    component={Link} to={'/hourly'}>{localization.language.get('nav-hourly')}</Button>\r\n                <Button startIcon={<WiIcons.WiWindDeg />}\r\n                    component={Link} to={'/forecast'}>{localization.language.get('nav-later')}</Button>\r\n                <Button onClick={onOptionsButtonClick}><MdIcons.MdLanguage /></Button>\r\n            </ButtonGroup>\r\n            <OptionsDrawer open={navState.drawer} onClose={onOptionsButtonClick} />\r\n        </React.Fragment>\r\n        \r\n    );\r\n}\r\n\r\nexport default QuickNavigation;","import React from 'react';\r\nimport * as Icon from 'react-icons/wi'\r\n\r\ninterface WeatherIconProps {\r\n    iconId: number,\r\n    day: boolean,\r\n    size?: number\r\n}\r\n\r\nconst WeatherIcon: React.FC<WeatherIconProps> = (props) => {\r\n\r\n    // Default alien icon\r\n    let weatherIcon = <Icon.WiAlien size={props.size} color='#7d8b8e' />\r\n\r\n    // Thunderstorm\r\n    if (props.iconId >= 200 && props.iconId < 300) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiThunderstorm size={props.size} color='#7d8b8e' /> :\r\n            <Icon.WiNightThunderstorm size={props.size} color='#7d8b8e' />\r\n    }\r\n\r\n    // Drizzle\r\n    if (props.iconId >= 300 && props.iconId < 400) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiRainMix size={props.size} color='#96a7af' /> :\r\n            <Icon.WiNightRainMix size={props.size} color='#96a7af' />\r\n    }\r\n\r\n    // Rain\r\n    if (props.iconId >= 500 && props.iconId < 600) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiRain size={props.size} color='#83c2d3' /> :\r\n            <Icon.WiNightRain size={props.size} color='#83c2d3' />\r\n    }\r\n\r\n    // Snow\r\n    if (props.iconId >= 600 && props.iconId < 700) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiSnowflakeCold size={props.size} color='#97becf' /> :\r\n            <Icon.WiNightSnow size={props.size} color='#97becf' />\r\n    }\r\n\r\n    // Atmosphere\r\n    if (props.iconId >= 700 && props.iconId < 800) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiFog size={props.size} color='#becbd1' /> :\r\n            <Icon.WiNightFog size={props.size} color='#becbd1' />\r\n    }\r\n\r\n    // Clear\r\n    if (props.iconId === 800) {\r\n        weatherIcon = props.day ? \r\n            <Icon.WiDaySunny size={props.size} color='#edcf53' /> :\r\n            <Icon.WiNightClear size={props.size} color='#becbd1' />\r\n    }\r\n\r\n    // Cloudy\r\n    if (props.iconId > 800 && props.iconId < 900) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiCloudy size={props.size} color='#becbd1' /> :\r\n            <Icon.WiNightCloudy size={props.size} color='#becbd1' />\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {weatherIcon}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default WeatherIcon;","import React from \"react\";\r\nimport 'fontsource-roboto';\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport { Spring } from 'react-spring/renderprops';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\nimport { AppState } from \"../../store/rootStore\";\r\nimport { Languages } from \"../../localization/model/localizationModel\";\r\n\r\ninterface CurrentWeatherProps {\r\n    temperature: number,\r\n    feelsLike: number,\r\n    description: string,\r\n    weatherIconId: number,\r\n    day: boolean\r\n}\r\n\r\nconst CurrentWeather: React.FC<CurrentWeatherProps> = (props) => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    return (\r\n        <Grid container spacing={2} style={{marginBottom: '40px', width: '98%'}}>\r\n            <Grid item xs={6}>\r\n                <div style={{textAlign: 'right'}}>\r\n                    <WeatherIcon iconId={props.weatherIconId} day={props.day}\r\n                    size={localization.selected === Languages.ENGLISH ? 140 : 110}/>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <div style={{textAlign: 'left'}}>\r\n                    <Spring\r\n                        from={{number: 0}}\r\n                        to={{number: props.temperature}}>\r\n                            {props => <Typography variant='h2' className='typography-primary'>{props.number.toFixed()}°</Typography> }\r\n                    </Spring>\r\n                    <Typography variant='h6' className='typography-primary'>{localization.language.get('current-feels')!} {props.feelsLike}°</Typography>\r\n                    <Typography variant='subtitle1' className='typography-secondary'>\r\n                        {localization.selected === Languages.ENGLISH ? props.description : ''}\r\n                    </Typography>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","enum chartType {\r\n    TEMPERATURE,\r\n    WIND,\r\n    PRECIPITATION\r\n}\r\n\r\nexport default chartType;","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Grid } from '@material-ui/core';\r\nimport * as Icon from 'react-icons/wi'\r\nimport { useSelector } from 'react-redux';\r\nimport DetailItemType from './DetailItemTypes';\r\nimport { AppState } from '../../../store/rootStore';\r\n\r\ninterface DetailItemProps {\r\n    itemType: DetailItemType,\r\n    value: number | string\r\n}\r\n\r\nconst DetailItem: React.FC<DetailItemProps> = (props) => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    let itemIcon = <Icon.WiAlien size={42} />\r\n    let itemValue = 'NA';\r\n    let itemDescription = 'NA';\r\n\r\n    switch (props.itemType) {\r\n        case DetailItemType.PRECIPITATION_CHANCE:\r\n            itemIcon = <Icon.WiUmbrella size={42} color='#666' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = localization.language.get('detail-chance')!;\r\n            break;\r\n        case DetailItemType.WIND:\r\n            itemIcon = <Icon.WiStrongWind size={42} color='#becbd1' />\r\n            itemValue = props.value + ' km/h';\r\n            itemDescription = localization.language.get('detail-wind')!;\r\n            break;\r\n        case DetailItemType.UV_INDEX:\r\n            itemIcon = <Icon.WiSolarEclipse size={42} color='#cbad33' />\r\n            itemValue = props.value as string;\r\n            itemDescription = localization.language.get('detail-uv')!;\r\n            break;\r\n        case DetailItemType.CLOUD_COVER:\r\n            itemIcon = <Icon.WiCloudRefresh size={42} color='#becbd1' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = localization.language.get('detail-cloud')!;\r\n            break;\r\n        case DetailItemType.PRESSURE:\r\n            itemIcon = <Icon.WiBarometer size={42} color='#666' />\r\n            itemValue = props.value + ' mmHg';\r\n            itemDescription = localization.language.get('detail-pressure')!;\r\n            break;\r\n        case DetailItemType.HUMIDITY:\r\n            itemIcon = <Icon.WiHumidity size={42} color='#86c3d6' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = localization.language.get('detail-humidity')!;\r\n            break;\r\n        case DetailItemType.DEW_POINT:\r\n            itemIcon = <Icon.WiThermometerInternal size={42} color='#86c3d6' />\r\n            itemValue = props.value + ' °';\r\n            itemDescription = localization.language.get('detail-dew')!;\r\n            break;\r\n        case DetailItemType.VISIBILITY:\r\n            itemIcon = <Icon.WiTrain size={42} color='#999' />\r\n            itemValue = props.value + ' km';\r\n            itemDescription = localization.language.get('detail-visibility')!;\r\n            break;\r\n        case DetailItemType.SUNRISE:\r\n            itemIcon = <Icon.WiSunrise size={42} color='#edcf53' />\r\n            itemValue = props.value as string;\r\n            itemDescription = localization.language.get('detail-sunrise')!;\r\n            break;\r\n        case DetailItemType.SUNSET:\r\n            itemIcon = <Icon.WiSunset size={42} color='#edcf53' />\r\n            itemValue = props.value as string;\r\n            itemDescription = localization.language.get('detail-sunset')!;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return(\r\n        <Grid container spacing={2} style={{marginTop: '1px'}}>\r\n            <Grid item xs={4}>\r\n                <div style={{textAlign: 'right'}}>\r\n                    {itemIcon}\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <div style={{textAlign: 'left'}}>\r\n                    <Typography variant='subtitle2' className='typography-primary'><strong>{itemValue}</strong></Typography>\r\n                    <Typography variant='body2' className='typography-secondary'>{itemDescription}</Typography>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default DetailItem;","import { ILocalization } from \"../localization/model/localizationModel\";\r\n\r\nexport const UnixUTCToHourMinuteString = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours() + ':' + date.getMinutes();\r\n}\r\n\r\nexport const UnixUTCToDayString = (utcTime: number, localization: ILocalization) => {\r\n    const days = localization.weekArray;\r\n    const date = new Date(utcTime);\r\n    return days[date.getDay()] + ' ' + date.getDate();\r\n}\r\n\r\nexport const UnixUTCHourString = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours();\r\n}\r\n\r\nexport const UnixUTCHourStringFakeMinutes = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours() + ':00';\r\n}\r\n\r\nexport const UnixUTCDayIcon = (utcTime: number, sunrise: number, sunset: number) => {\r\n    return (utcTime > sunrise && utcTime < sunset); \r\n}\r\n\r\nexport const UnixUTCToDayOfMonth = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getDate();\r\n}","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport DetailItem from './DetailItem/DetailItem';\r\nimport DetailItemType from './DetailItem/DetailItemTypes';\r\nimport { ICurrentWeather } from '../../store/Weather/models/Weather';\r\nimport { UnixUTCToHourMinuteString } from '../../utils/DateConverter';\r\nimport { Spring } from 'react-spring/renderprops';\r\n\r\ninterface DetailWeatherProps {\r\n    currentWeather: ICurrentWeather;\r\n    precipitation: number;\r\n}\r\n\r\nconst DetailWeather: React.FC<DetailWeatherProps> = (props) => {\r\n    return (\r\n        <Spring from={{opacity: 0}} to={{opacity: 1}}>\r\n                { sprops => \r\n                    <div style={sprops}>\r\n\r\n                        <div style={{margin: 'auto', width: '80%'}}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.PRECIPITATION_CHANCE} value={props.precipitation}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.WIND} value={props.currentWeather.windSpeed}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.UV_INDEX} value={props.currentWeather.uvi}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.CLOUD_COVER} value={props.currentWeather.clouds}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.PRESSURE} value={props.currentWeather.pressure}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.HUMIDITY} value={props.currentWeather.humidity}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.DEW_POINT} value={props.currentWeather.dewPoint}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.VISIBILITY} value={props.currentWeather.visibility}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.SUNRISE} value={UnixUTCToHourMinuteString(props.currentWeather.sunrise)}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.SUNSET} value={UnixUTCToHourMinuteString(props.currentWeather.sunset)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n\r\n                    </div>\r\n                }\r\n        </Spring>\r\n    );\r\n}\r\n\r\nexport default DetailWeather;","import React from \"react\";\r\nimport { CircularProgress, Typography } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppState } from \"../../store/rootStore\";\r\n\r\nconst FetchingWeather = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    return <div style={{margin: '50px 0'}}>\r\n        <CircularProgress />\r\n        <Typography variant='subtitle1'>{localization.language.get('loading')}</Typography>\r\n    </div>;\r\n};\r\n\r\nexport default FetchingWeather;","class env {\r\n\r\n    public static getBaseAPI() {\r\n        return process.env.REACT_APP_BASE_API;\r\n    }\r\n\r\n    public static getApiDefaultParams() {\r\n        return process.env.REACT_APP_API_PARAMS + this.buildApi(true);\r\n    }\r\n\r\n    public static getApiLocK() {\r\n        return this.buildApi(false);\r\n    }\r\n\r\n    private static buildApi(main: boolean) {\r\n        const apiK = main ? process.env.REACT_APP_WK! : process.env.REACT_APP_LC!;\r\n        return apiK.replace(apiK.substring(apiK.length - 2, apiK.length), '');\r\n    }\r\n\r\n}\r\n\r\nexport default env;","import axios from \"axios\";\r\nimport env from '../utils/env';\r\n\r\nconst instance = axios.create({\r\n    baseURL:\r\n        env.getBaseAPI() ||\r\n        \"https://raw.githubusercontent.com/Predator7/react-weather/main/src/sample-api/weather.json\",\r\n});\r\n\r\nexport default instance;\r\n","import { IWeather } from \"./Weather\";\r\n\r\nexport const FETCH_WEATHER_REQUEST = \"FETCH_WEATHER_REQUEST\";\r\nexport const FETCH_WEATHER_SUCCESS = \"FETCH_WEATHER_SUCCESS\";\r\nexport const FETCH_WEATHER_FAILURE = \"FETCH_WEATHER_FAILURE\";\r\n\r\ninterface WeatherAsync {\r\n    loading: boolean;\r\n    error: string;\r\n    weather: IWeather;\r\n}\r\n\r\ninterface FetchWeatherRequest extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_REQUEST;\r\n}\r\ninterface FetchWeatherSuccess extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_SUCCESS;\r\n}\r\ninterface FetchWeatherFailure extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_FAILURE;\r\n}\r\n\r\nexport type WeatherActionTypes =\r\n    | FetchWeatherRequest\r\n    | FetchWeatherSuccess\r\n    | FetchWeatherFailure; // | PostWeather ...\r\n","import { IForecastWeather, IHourlyWeather, IWeather, IWeatherDescription } from \"../models/Weather\"\r\n\r\nexport const mapIWeather = (weather: any): IWeather => {\r\n    const coords = mapIWeatherCoordinates(weather);\r\n    const current = mapICurrentWeather(weather.current);\r\n    const hourly = mapIHourlyWeather(weather.hourly);\r\n    const fcst = mapIForecastWeather(weather.daily);\r\n    \r\n    const convertedWeather: IWeather = {\r\n        coordinates: coords,\r\n        currentWeather: current,\r\n        hourlyWeather: hourly,\r\n        forecast: fcst\r\n    }\r\n\r\n    return convertedWeather;\r\n}\r\n\r\nconst mapIWeatherCoordinates = (coord: any) => {\r\n    return {\r\n        latitude: coord.lat,\r\n        longitude: coord.lon,\r\n        timezoneOffset: coord.timezone_offset * 1000\r\n    }\r\n}\r\n\r\nconst mapICurrentWeather = (current: any) => {\r\n    const weatherDesc = mapIWeatherDescription(current.weather);\r\n    return {\r\n        dt: current.dt * 1000,\r\n        sunrise: current.sunrise * 1000,\r\n        sunset: current.sunset * 1000,\r\n        temp: current.temp.toFixed(0),\r\n        feelsLike: current.feels_like.toFixed(0),\r\n        pressure: current.pressure,\r\n        humidity: current.humidity,\r\n        dewPoint: current.dew_point.toFixed(0),\r\n        uvi: current.uvi,\r\n        clouds: current.clouds,\r\n        visibility: current.visibility / 1000,\r\n        windSpeed: current.wind_speed.toFixed(0),\r\n        weather: weatherDesc\r\n    }\r\n}\r\n\r\nconst mapIWeatherDescription = (weather: any[]) => {\r\n    return weather.map(wdesc => {\r\n        return ({\r\n            id: wdesc.id,\r\n            main: wdesc.main,\r\n            description: wdesc.description,\r\n        } as IWeatherDescription);\r\n    });\r\n}\r\n\r\nconst mapIHourlyWeather = (hourlyWeather: any[]) => {\r\n    return hourlyWeather.map(hourly => {\r\n        return ({\r\n            dt: hourly.dt * 1000,\r\n            temp: hourly.temp.toFixed(0),\r\n            windSpeed: hourly.wind_speed.toFixed(0),\r\n            precipitation: +(hourly.pop * 100).toFixed(0),\r\n            weather: mapIWeatherDescription(hourly.weather)\r\n        } as IHourlyWeather);\r\n    });\r\n}\r\n\r\nconst mapIForecastWeather = (forecastWeather: any[]) => {\r\n    return forecastWeather.map(forecast => {\r\n        return ({\r\n            dt: forecast.dt * 1000,\r\n            precipitation: +(forecast.pop * 100).toFixed(0),\r\n            maxTemp: +forecast.temp.max.toFixed(0),\r\n            minTemp: +forecast.temp.min.toFixed(0),\r\n            windSpeed: +forecast.wind_speed.toFixed(0),\r\n            uvi: forecast.uvi,\r\n            clouds: forecast.clouds,\r\n            pressure: forecast.pressure,\r\n            sunrise: forecast.sunrise * 1000,\r\n            sunset: forecast.sunset * 1000,\r\n            weather: mapIWeatherDescription(forecast.weather)\r\n        } as IForecastWeather);\r\n    });\r\n}","import { Dispatch } from 'redux';\r\nimport axios from '../../axios/axios-weather';\r\nimport env from '../../utils/env';\r\nimport { FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from './models/WeatherActionsModel';\r\nimport { IWeather } from './models/Weather';\r\nimport { AppActions } from '../actions';\r\nimport { mapIWeather } from './utils/WeatherMapper';\r\n\r\nconst requestWeather = (): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_REQUEST,\r\n        loading: true,\r\n        error: '',\r\n        weather: {} as IWeather\r\n    }\r\n}\r\n\r\nconst receiveWeather = (fetchedWeather: IWeather): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_SUCCESS,\r\n        loading: false,\r\n        error: '',\r\n        weather: fetchedWeather\r\n    }\r\n}\r\n\r\nconst invalidWeather = (): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_FAILURE,\r\n        loading: false,\r\n        error: 'Something went wrong fetching weather',\r\n        weather: {} as any\r\n    }\r\n}\r\n\r\nexport const fetchWeather = (lat: number, long: number) => {\r\n    return (dispatch: Dispatch<AppActions>) => {\r\n        dispatch(requestWeather());\r\n        axios.get('/' + env.getApiDefaultParams(), {params: {lat: lat, lon: long}})\r\n            .then(response => { \r\n                dispatch(receiveWeather(mapIWeather(response.data)));\r\n            })\r\n            .catch(error => {\r\n                console.log(error.message);\r\n                dispatch(invalidWeather());\r\n            });\r\n    };\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport CurrentWeather from '../../components/CurrentWeather/CurrentWeather';\r\nimport DetailWeather from '../../components/DetailWeather/DetailWeather';\r\nimport FetchingWeather from '../../components/FetchingWeather/FetchingWeather';\r\nimport { ILocalization } from '../../localization/model/localizationModel';\r\nimport { AppActions } from '../../store/actions';\r\nimport { changeLanguage } from '../../store/Localization/LocalizationActions';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { IWeather } from '../../store/Weather/models/Weather';\r\nimport { fetchWeather } from '../../store/Weather/WeatherActions';\r\nimport { UnixUTCDayIcon } from '../../utils/DateConverter';\r\nimport { regionRomania } from '../../localization/utils/coordinates';\r\n\r\ninterface Props {}\r\n\r\ninterface LinkStateProps {\r\n    weather: IWeather;\r\n    localization: ILocalization;\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n    fetchWeather: (lat: number, long: number) => void;\r\n    changeLanguage: (lang: string) => void;\r\n}\r\n\r\ntype LinkProps = Props & LinkStateProps & LinkDispatchProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => {\r\n    return {\r\n        weather: state.weatherReducer.weather,\r\n        localization: state.localizationReducer.language\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState, {}, AppActions>) => {\r\n    return {\r\n        fetchWeather: bindActionCreators(fetchWeather, dispatch),\r\n        changeLanguage: bindActionCreators(changeLanguage, dispatch)\r\n    }\r\n};\r\n\r\nclass CurrentWeatherContainer extends Component<LinkProps> {\r\n\r\n    componentDidMount() {\r\n        if (!this.props.weather.currentWeather) {\r\n            if ('geolocation' in navigator) {\r\n                navigator.geolocation.getCurrentPosition(pos => {\r\n                    // Set starting language based on position \r\n                    const localLang = regionRomania(pos.coords.latitude, pos.coords.longitude) ? 'romanian' : 'english';\r\n                    this.setLocalization(localLang);\r\n                    this.props.fetchWeather(pos.coords.latitude, pos.coords.longitude);\r\n                }, error => {\r\n                    // TODO: remove this when publishing autocomplete\r\n                    console.log(error.message);\r\n                    this.setLocalization('romanian');\r\n                    this.props.fetchWeather(+process.env.REACT_APP_DEFAULT_LAT!, +process.env.REACT_APP_DEFAULT_LONG!);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    setLocalization = (localLang: string) => {\r\n        let language = localStorage.getItem('localization');\r\n        if (language !== null) {\r\n            this.props.changeLanguage(language);\r\n        } else {\r\n            localStorage.setItem('localization', localLang);\r\n            this.props.changeLanguage(localLang);\r\n        }\r\n    }\r\n\r\n    onLoadWeather = () => {\r\n        let weather = <FetchingWeather />;\r\n\r\n        if (this.props.weather.currentWeather) {\r\n            weather = (\r\n                <div>\r\n                    <CurrentWeather\r\n                        temperature={this.props.weather.currentWeather.temp}\r\n                        feelsLike={this.props.weather.currentWeather.feelsLike}\r\n                        description={this.props.weather.currentWeather.weather[0].description}\r\n                        weatherIconId={this.props.weather.currentWeather.weather[0].id}\r\n                        day={UnixUTCDayIcon(this.props.weather.currentWeather.dt,\r\n                            this.props.weather.currentWeather.sunrise,\r\n                            this.props.weather.currentWeather.sunset)} />\r\n\r\n                <DetailWeather\r\n                    currentWeather={this.props.weather.currentWeather}\r\n                    precipitation={this.props.weather.hourlyWeather[0].precipitation} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return weather;\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.onLoadWeather()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentWeatherContainer);","export const regionRomania = (lat: number, long: number) => {\r\n    if (lat > 43.38 && lat < 48.16) {\r\n        if (long > 20.16 && long < 29.42) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","import React from 'react';\r\nimport { Grid, Typography, Paper } from '@material-ui/core';\r\nimport DetailItem from '../../DetailWeather/DetailItem/DetailItem';\r\nimport DetailItemType from '../../DetailWeather/DetailItem/DetailItemTypes';\r\nimport { IForecastWeather } from '../../../store/Weather/models/Weather';\r\nimport { UnixUTCToHourMinuteString } from '../../../utils/DateConverter';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../../store/rootStore';\r\nimport { Languages } from '../../../localization/model/localizationModel';\r\n\r\ninterface OverviewDetailItemProps {\r\n    forecast: IForecastWeather;\r\n}\r\n\r\nconst OverviewDetailItem: React.FC<OverviewDetailItemProps> = (props) => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n    \r\n    return(\r\n        <Grid container spacing={2} style={{width: '100%'}}>\r\n            <Grid item xs={2} sm={2} md={3}/>\r\n            <Grid item xs={10} sm={9} md={6}>\r\n                \r\n                <div style={{textAlign: 'left', marginLeft: '10px', marginBottom: '20px'}}>\r\n                    <Typography variant='subtitle1' className='typography-secondary'>\r\n                        {localization.selected === Languages.ENGLISH ? props.forecast.weather[0].description : ''}\r\n                    </Typography>\r\n\r\n                    <Grid container spacing={2} style={{marginTop: '15px'}}>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.WIND} value={props.forecast.windSpeed}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.CLOUD_COVER} value={props.forecast.clouds}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.UV_INDEX} value={props.forecast.uvi}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.PRESSURE} value={props.forecast.pressure}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.SUNRISE} value={UnixUTCToHourMinuteString(props.forecast.sunrise)}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.SUNSET} value={UnixUTCToHourMinuteString(props.forecast.sunset)}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n\r\n            </Grid>\r\n\r\n            <Grid item xs={1} sm={1} md={3} style={{width: '100%'}}/>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default OverviewDetailItem;","import React from 'react';\r\nimport { Grid, IconButton, Typography } from '@material-ui/core';\r\nimport { UnmountClosed } from 'react-collapse';\r\nimport * as WiIcon from 'react-icons/wi'\r\nimport * as Icon from 'react-icons/md'\r\nimport WeatherIcon from '../../WeatherIcon/WeatherIcon';\r\nimport OverviewDetailItem from '../OverviewDetailItem/OverviewDetailItem';\r\nimport { IForecastWeather } from '../../../store/Weather/models/Weather';\r\nimport { UnixUTCToDayString } from '../../../utils/DateConverter';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../../store/rootStore';\r\n\r\ninterface OverviewItemProps {\r\n    forecast: IForecastWeather;\r\n    expanded: boolean;\r\n    expandClick: () => void;\r\n}\r\n\r\nconst OverviewItem: React.FC<OverviewItemProps> = (props) => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    return (\r\n        <React.Fragment>\r\n        <Grid container spacing={2} style={{margin: 'auto', width: '98%'}}>\r\n            <Grid item xs={2} md={3}>\r\n                <div style={{textAlign: 'right'}}>\r\n                    <WeatherIcon iconId={props.forecast.weather[0].id} day={true} size={58}/>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={8} md={6}>\r\n                <div style={{textAlign: 'left'}} onClick={props.expandClick}>\r\n                    <Typography variant='h6' className='typography-primary'>\r\n                        <strong>{UnixUTCToDayString(props.forecast.dt, localization)}</strong>\r\n                    </Typography>\r\n                    <div style={{display: 'flex'}}>\r\n                        <WiIcon.WiUmbrella size={20} color='#7d8b8e' />\r\n                        <Typography variant='subtitle2' className='typography-secondary' style={{marginRight: '20px'}}>{props.forecast.precipitation} %</Typography>\r\n                        <WiIcon.WiThermometer size={20} color='#86c3d6' />\r\n                        <Typography variant='subtitle2' className='typography-secondary'>{props.forecast.maxTemp}° | {props.forecast.minTemp}°</Typography>\r\n                    </div>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={2} md={3}>\r\n                <div style={{textAlign: 'left'}}>\r\n                    <IconButton onClick={props.expandClick}>\r\n                        {props.expanded ? <Icon.MdExpandLess size={32}/> : <Icon.MdExpandMore size={32}/>}\r\n                    </IconButton>\r\n                </div>\r\n            </Grid>\r\n\r\n        </Grid>\r\n            <UnmountClosed isOpened={props.expanded}>\r\n                <OverviewDetailItem forecast={props.forecast}/> \r\n            </UnmountClosed>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default OverviewItem;","import { connect } from 'react-redux';\r\nimport React, {Component} from 'react';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { AppState } from '../../store/rootStore';\r\nimport { IForecastWeather } from '../../store/Weather/models/Weather';\r\nimport OverviewItem from '../../components/Forecast/OverviewItem/OverviewItem';\r\nimport FetchingWeather from '../../components/FetchingWeather/FetchingWeather';\r\n\r\ninterface Props {}\r\n\r\ninterface LinkStateProps {\r\n    forecast: IForecastWeather[];\r\n}\r\n\r\ninterface LinkDispatchProps {}\r\n\r\ntype LinkProps = Props & LinkStateProps & LinkDispatchProps & RouteComponentProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => {\r\n    return {\r\n        forecast: state.weatherReducer.weather.forecast,\r\n    }\r\n}\r\n\r\ninterface LocalState {\r\n    expanded: boolean[];\r\n}\r\n\r\nclass ForecastContainer extends Component<LinkProps> {\r\n\r\n    state: LocalState = {\r\n        expanded: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        // prevent inifite loop\r\n        if (this.props.forecast && this.state.expanded.length === 0) {\r\n            this.initLocalState(this.props.forecast.length);\r\n        } else {\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    initLocalState = (forecastLength: number) => {\r\n        let exArr: boolean[] = [];\r\n        for (let i = 0; i < forecastLength; i++) {\r\n            exArr.push(false);\r\n        }\r\n        this.setState( () => {\r\n            return { expanded: exArr }\r\n        })\r\n    }\r\n\r\n    onExpandClick = (index: number) => {\r\n        this.setState((prevState: LocalState) => {\r\n            return {\r\n                expanded: prevState.expanded.map((item, itemIndex) => {\r\n                    return itemIndex === index ? !item : item;\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    fetchWeatherForecast = () => {\r\n        let overviewItems = [<FetchingWeather key={'fetching'} />];\r\n        if (this.props.forecast) {\r\n            overviewItems = this.props.forecast.filter((el, index) => {\r\n                return index !== 0;\r\n            }).map((item, index) => (\r\n                <OverviewItem\r\n                    key={item.dt}\r\n                    forecast={item}\r\n                    expanded={this.state.expanded[index]}\r\n                    expandClick={() => this.onExpandClick(index)}/>\r\n                )\r\n            );\r\n        }\r\n        return overviewItems;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.fetchWeatherForecast()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(ForecastContainer));","import React from 'react';\r\nimport * as Icon from 'react-icons/wi';\r\nimport { UnixUTCHourString } from '../../utils/DateConverter';\r\n\r\ninterface ClockIconProps {\r\n    dt: number | string;\r\n    size?: number;\r\n}\r\n\r\nconst ClockIcon: React.FC<ClockIconProps> = (props) => {\r\n\r\n    const hour = typeof props.dt === 'number' ? UnixUTCHourString(+props.dt).toString() : props.dt;\r\n    let hourIcon = <Icon.WiTime12 size={props.size} />\r\n    \r\n    if (hour === '0' || hour === '12') {\r\n        hourIcon = <Icon.WiTime12 size={props.size} />\r\n    }\r\n    if (hour === '1' || hour === '13') {\r\n        hourIcon = <Icon.WiTime1 size={props.size} />\r\n    }\r\n    if (hour === '2' || hour === '14') {\r\n        hourIcon = <Icon.WiTime2 size={props.size} />\r\n    }\r\n    if (hour === '3' || hour === '15') {\r\n        hourIcon = <Icon.WiTime3 size={props.size} />\r\n    }\r\n    if (hour === '4' || hour === '16') {\r\n        hourIcon = <Icon.WiTime4 size={props.size} />\r\n    }\r\n    if (hour === '5' || hour === '17') {\r\n        hourIcon = <Icon.WiTime5 size={props.size} />\r\n    }\r\n    if (hour === '6' || hour === '18') {\r\n        hourIcon = <Icon.WiTime6 size={props.size} />\r\n    }\r\n    if (hour === '7' || hour === '19') {\r\n        hourIcon = <Icon.WiTime7 size={props.size} />\r\n    }\r\n    if (hour === '8' || hour === '20') {\r\n        hourIcon = <Icon.WiTime8 size={props.size} />\r\n    }\r\n    if (hour === '9' || hour === '21') {\r\n        hourIcon = <Icon.WiTime9 size={props.size} />\r\n    }\r\n    if (hour === '10' || hour === '22') {\r\n        hourIcon = <Icon.WiTime10 size={props.size} />\r\n    }\r\n    if (hour === '11' || hour === '23') {\r\n        hourIcon = <Icon.WiTime11 size={props.size} />\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {hourIcon}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClockIcon;","import React from 'react';\r\nimport { Grid, Paper, Typography } from '@material-ui/core';\r\nimport * as WiIcons from 'react-icons/wi';\r\nimport chartType from '../chartType';\r\nimport ClockIcon from '../../ClockIcon/ClockIcon';\r\n\r\ninterface ChartTooltipProps {\r\n    chartType: chartType;\r\n    active?: boolean;\r\n    payload?: any;\r\n}\r\n\r\nconst ChartTooltip: React.FC<ChartTooltipProps> = (props) => {\r\n\r\n    let tooltipMeasurement = '';\r\n    let tooltipMeasurementIcon = <WiIcons.WiAlien size={20} color='#000'/>;\r\n    if (props.active) {\r\n        switch (props.chartType) {\r\n            case chartType.TEMPERATURE:\r\n                tooltipMeasurement = props.payload[0].payload.temp + '°';\r\n                tooltipMeasurementIcon = <WiIcons.WiThermometer size={20} color='#86c3d6'/>;\r\n                break;\r\n            case chartType.WIND:\r\n                tooltipMeasurement = props.payload[0].payload.windSpeed + ' km/h';\r\n                tooltipMeasurementIcon = <WiIcons.WiStrongWind size={20} color='#becbd1'/>;\r\n                break;\r\n            case chartType.PRECIPITATION:\r\n                tooltipMeasurement = props.payload[0].payload.precipitation + '%';\r\n                tooltipMeasurementIcon = <WiIcons.WiUmbrella size={20} color='#666'/>;\r\n                break;\r\n            default:\r\n                tooltipMeasurement = props.payload[0].payload.temp + '°';\r\n                tooltipMeasurementIcon = <WiIcons.WiThermometer size={20} color='#86c3d6'/>;\r\n                break;\r\n        }\r\n    }\r\n\r\n    let tooltip = null;\r\n    if (props.active) {\r\n        tooltip = <Paper elevation={1} style={{padding: '10px', background: 'rgba(255, 255, 255, 0.95)'}}>\r\n\r\n                <Grid container spacing={3}>\r\n                    <Grid item >\r\n                        <ClockIcon dt={(props.payload[0].payload.dt).toString()} size={20} />\r\n                        <Typography><strong>{props.payload[0].payload.dt}:00</strong></Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        {tooltipMeasurementIcon}\r\n                        <Typography>{tooltipMeasurement}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Paper>;\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {tooltip}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ChartTooltip;","import React from 'react';\r\nimport { Grid, IconButton, Tooltip } from '@material-ui/core';\r\nimport * as WiIcon from 'react-icons/wi'\r\nimport * as Chart from 'recharts';\r\nimport { IHourlyWeather } from '../../store/Weather/models/Weather';\r\nimport { UnixUTCHourString } from '../../utils/DateConverter';\r\nimport chartType from './chartType';\r\nimport ChartTooltip from './ChartTooltip/ChartTooltip';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/rootStore';\r\n\r\ninterface WeatherChartProps {\r\n    hourlyWeather: IHourlyWeather[];\r\n    chartType: chartType;\r\n    chartTypeHandler: (type: chartType) => void;\r\n}\r\n\r\nconst WeatherChart: React.FC<WeatherChartProps> = (props) => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    // Convert Date\r\n    const parsedData: IHourlyWeather[] = [];\r\n    props.hourlyWeather.forEach((element, index) => {\r\n        const newElem = {\r\n            ...element,\r\n            dt: UnixUTCHourString(element.dt)\r\n        }\r\n        // Chart complexity - element devided by 3\r\n        if (index % 3 === 0)\r\n            parsedData.push(newElem);\r\n    });\r\n\r\n    let chartDataKey = 'temp';\r\n    let chartDataUnit = '°C';\r\n    switch (props.chartType) {\r\n        case chartType.TEMPERATURE:\r\n            chartDataKey = 'temp';\r\n            chartDataUnit = '°C';\r\n            break;\r\n        case chartType.WIND:\r\n            chartDataKey = 'windSpeed';\r\n            chartDataUnit = 'km/h';\r\n            break;\r\n        case chartType.PRECIPITATION:\r\n            chartDataKey = 'precipitation';\r\n            chartDataUnit = '(%)';\r\n            break;\r\n        default:\r\n            chartDataUnit = '°C';\r\n            break;\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div>\r\n                <Tooltip title={localization.language.get('chart-tooltip-temperature')!} >\r\n                    <IconButton\r\n                        color={props.chartType === chartType.TEMPERATURE ? 'primary' : 'default'}\r\n                        onClick={() => props.chartTypeHandler(chartType.TEMPERATURE)}>\r\n                        <WiIcon.WiThermometer size={32}/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title={localization.language.get('chart-tooltip-wind')!} >\r\n                    <IconButton\r\n                        color={props.chartType === chartType.WIND ? 'primary' : 'default'}\r\n                        onClick={() => props.chartTypeHandler(chartType.WIND)}>\r\n                        <WiIcon.WiStrongWind size={32}/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title={localization.language.get('chart-tooltip-precipitation')!} >\r\n                    <IconButton\r\n                        color={props.chartType === chartType.PRECIPITATION ? 'primary' : 'default'}\r\n                        onClick={() => props.chartTypeHandler(chartType.PRECIPITATION)}>\r\n                        <WiIcon.WiUmbrella size={32}/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </div>\r\n            <Grid container style={{justifyContent:'center'}}>\r\n                <Grid md={2} />\r\n                <Grid xs={12} md={8} style={{display: 'flex', justifyContent:'center'}}>\r\n                    <Chart.ResponsiveContainer width='95%' height={250}>\r\n                        <Chart.LineChart margin={{top: 35, left: 10, right: 10}} data={parsedData}>\r\n                            <Chart.XAxis dataKey='dt' tickLine={false} tick={<div/>}>\r\n                                <Chart.Label position='insideBottomLeft' offset={0}\r\n                                    value={localization.language.get('chart-axis-now')!}/>\r\n                                <Chart.Label position='insideBottom' offset={0}\r\n                                    value={localization.language.get('chart-axis-24')!}/>\r\n                                <Chart.Label position='insideBottomRight' offset={0}\r\n                                    value={localization.language.get('chart-axis-48')!}/>\r\n                            </Chart.XAxis>\r\n                            <Chart.YAxis dataKey={chartDataKey} width={30} tickLine={false} axisLine={false}>\r\n                                <Chart.Label position='top' offset={20} value={chartDataUnit}/>\r\n                            </Chart.YAxis>\r\n                            <Chart.CartesianGrid stroke=\"#eee\" strokeDasharray='3 5' horizontal={false} />\r\n                            <Chart.Tooltip content={<ChartTooltip chartType={props.chartType} />} />\r\n                            <Chart.Line dataKey={chartDataKey} strokeWidth={2}/>\r\n                        </Chart.LineChart>\r\n                    </Chart.ResponsiveContainer>\r\n                </Grid>\r\n                <Grid md={2} />\r\n                \r\n            </Grid>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default WeatherChart;","import React from 'react';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport * as WiIcons from 'react-icons/wi';\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\nimport { IHourlyWeather, IForecastWeather } from '../../store/Weather/models/Weather';\r\nimport { UnixUTCHourStringFakeMinutes, UnixUTCToDayOfMonth, UnixUTCDayIcon } from '../../utils/DateConverter';\r\nimport ClockIcon from '../ClockIcon/ClockIcon';\r\n\r\ninterface HourlyListProps {\r\n    hourly: IHourlyWeather;\r\n    forecast: IForecastWeather[];\r\n}\r\n\r\nconst HourlyList: React.FC<HourlyListProps> = (props) => {\r\n\r\n    let dayIcon = true;\r\n    for (const dayForecast of props.forecast.slice(0, 3)) {\r\n        if (UnixUTCToDayOfMonth(dayForecast.dt) === UnixUTCToDayOfMonth(props.hourly.dt)) {\r\n            dayIcon = UnixUTCDayIcon(props.hourly.dt, dayForecast.sunrise, dayForecast.sunset);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div style={{display: 'flex', justifyContent:'center', marginRight: '20px'}}>\r\n            <Grid xs={1} md={3} style={{width: '100%'}} />\r\n            <Grid container spacing={2} style={{alignItems: 'center', margin: '3px 0', width: '90%'}}>\r\n                <Grid xs={3} md={2} style={{display: 'flex', justifyContent:'right'}}>\r\n                    <ClockIcon dt={props.hourly.dt} size={25} />\r\n                    <Typography variant='body1'>{UnixUTCHourStringFakeMinutes(props.hourly.dt)}</Typography>\r\n                </Grid>\r\n                <Grid xs={1} md={1}>\r\n                    <WeatherIcon iconId={props.hourly.weather[0].id} day={dayIcon} size={35} />\r\n                </Grid>\r\n                <Grid xs={3} md={3} style={{width: '100%'}} />\r\n                <Grid xs={3} md={2} style={{display: 'flex', justifyContent:'left'}}>\r\n                    <WiIcons.WiUmbrella size={25} color='#666' />\r\n                    <Typography variant='body1'>{props.hourly.precipitation}%</Typography>\r\n                </Grid>\r\n                <Grid xs={2} md={4} style={{display: 'flex', justifyContent:'left'}}>\r\n                    <WiIcons.WiThermometer size={25} color='#86c3d6' />\r\n                    <Typography variant='body1'>{props.hourly.temp}°</Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HourlyList;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport FetchingWeather from '../../components/FetchingWeather/FetchingWeather';\r\nimport chartType from '../../components/WeatherChart/chartType';\r\nimport WeatherChart from '../../components/WeatherChart/WeatherChart';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { IForecastWeather, IHourlyWeather } from '../../store/Weather/models/Weather';\r\nimport HourlyList from '../../components/HourlyList/HourlyList';\r\nimport { Button } from '@material-ui/core';\r\nimport * as Icon from 'react-icons/md';\r\nimport { ILocalization } from '../../localization/model/localizationModel';\r\n\r\ninterface Props {}\r\n\r\ninterface LinkStateProps {\r\n    hourlyWeather: IHourlyWeather[];\r\n    forecastWeather: IForecastWeather[];\r\n    localization: ILocalization;\r\n}\r\n\r\ninterface LinkDispatchProps {}\r\n\r\ntype LinkProps = Props & LinkStateProps & LinkDispatchProps & RouteComponentProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => {\r\n    return {\r\n        hourlyWeather: state.weatherReducer.weather.hourlyWeather,\r\n        forecastWeather: state.weatherReducer.weather.forecast,\r\n        localization: state.localizationReducer.language\r\n    }\r\n}\r\n\r\ninterface LocalState {\r\n    chartType: chartType;\r\n    moreInfo: boolean;\r\n}\r\n\r\nclass HourlyWeatherContainer extends Component<LinkProps> {\r\n\r\n    state: LocalState = {\r\n        chartType: chartType.TEMPERATURE,\r\n        moreInfo: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.hourlyWeather) {\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    fetchHourlyWeather = () => {\r\n        let weatherChart = <FetchingWeather key={'fetching'} />;\r\n        if (this.props.hourlyWeather) {\r\n            weatherChart = <WeatherChart\r\n                            hourlyWeather={this.props.hourlyWeather}\r\n                            chartType={this.state.chartType}\r\n                            chartTypeHandler={(type: chartType) => this.onChartButtonClick(type)} />;\r\n        }\r\n        return weatherChart;\r\n    }\r\n\r\n    fetchHourlyDetailWeather = () => {\r\n        let hourlyDetail = null;\r\n        if (this.props.hourlyWeather) {\r\n            hourlyDetail = this.props.hourlyWeather.filter((el, index) => {\r\n                return index !== 0;\r\n            }).map((hourly, index) => {\r\n                if (this.state.moreInfo) {\r\n                    return index % 3 === 0 ? <HourlyList key={index} hourly={hourly} forecast={this.props.forecastWeather} /> : null;\r\n                } else {\r\n                    return index < 3 ? <HourlyList key={index} hourly={hourly} forecast={this.props.forecastWeather} /> : null;\r\n                }\r\n            });\r\n        }\r\n        return <div style={{marginTop: '50px'}}>{hourlyDetail}</div>;\r\n    }\r\n\r\n    onChartButtonClick = (type: chartType) => {\r\n        this.setState((prevState: LocalState) => {\r\n            return {\r\n                chartType: type\r\n            }\r\n        });\r\n    }\r\n\r\n    onMoreButtonClick = () => {\r\n        this.setState((prevState: LocalState) => {\r\n            return {\r\n                moreInfo: !prevState.moreInfo\r\n            }\r\n        });\r\n        this.fetchHourlyDetailWeather();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.fetchHourlyWeather()}\r\n                {this.fetchHourlyDetailWeather()}\r\n                <Button variant='outlined' size='small' style={{margin: '20px 0'}}\r\n                    onClick={this.onMoreButtonClick}>\r\n                        {this.state.moreInfo ? <Icon.MdUnfoldLess /> : <Icon.MdUnfoldMore />}\r\n                        {this.state.moreInfo ? this.props.localization.language.get('toggle-less') :\r\n                                               this.props.localization.language.get('toggle-more')}\r\n                        </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(HourlyWeatherContainer));","import React from \"react\";\r\nimport { Switch, Route, withRouter, Redirect } from 'react-router-dom';\r\nimport QuickNavigation from \"./components/QuickNavigation/QuickNavigation\";\r\nimport CurrentWeatherContainer from \"./containers/CurrentWeatherContainer/CurrentWeatherContainer\";\r\nimport ForecastContainer from \"./containers/ForecastContainer/ForecastContainer\";\r\nimport HourlyWeatherContainer from \"./containers/HourlyWeatherContainer/HourlyWeatherContainer\";\r\n\r\nfunction App() {\r\n    return (\r\n        <React.Fragment>\r\n            <QuickNavigation />\r\n            <Switch>\r\n                <Route path='/hourly' component={HourlyWeatherContainer} />\r\n                <Route path='/forecast' component={ForecastContainer} />\r\n                <Route path='/' component={CurrentWeatherContainer} />\r\n                <Redirect to='/' />\r\n            </Switch>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(App);\r\n","import { WeatherActionTypes, FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from './models/WeatherActionsModel';\r\nimport { IWeather } from './models/Weather';\r\n\r\ninterface WeatherState {\r\n    loading: boolean;\r\n    error: string;\r\n    weather: IWeather;\r\n}\r\n\r\nconst initialState: WeatherState = {\r\n    loading: false,\r\n    error: '',\r\n    weather: {} as IWeather\r\n}\r\n\r\nconst FetchWeatherRequest = () => {\r\n    return { loading: true, error: '', weather: {} as IWeather };\r\n}\r\n\r\nconst FetchWeatherSuccess = (action: WeatherActionTypes) => {\r\n    return { loading: false, error: '', weather: action.weather};\r\n}\r\n\r\nconst FetchWeatherFailure = (action: WeatherActionTypes) => {\r\n    return { loading: false, error: action.error, weather: {} as IWeather};\r\n}\r\n\r\nexport const weatherReducer = (state = initialState, action: WeatherActionTypes): WeatherState => {\r\n    switch (action.type) {\r\n        case FETCH_WEATHER_REQUEST: return FetchWeatherRequest();\r\n        case FETCH_WEATHER_SUCCESS: return FetchWeatherSuccess(action);\r\n        case FETCH_WEATHER_FAILURE: return FetchWeatherFailure(action);\r\n        default:\r\n          return state;\r\n    }\r\n}","import { ILocalization } from \"../../localization/model/localizationModel\";\r\nimport * as English from '../../localization/english';\r\nimport { CHANGE_LANGUAGE, LocalizationActionTypes } from \"./models/LocalizationActionsModel\";\r\n\r\ninterface LocalizationState {\r\n    language: ILocalization;\r\n}\r\n\r\nconst initialState: LocalizationState = {\r\n    language: English.localization\r\n}\r\n\r\nconst ChangeLanguage = (action: LocalizationActionTypes) => {\r\n    return { language: action.language };\r\n}\r\n\r\nexport const localizationReducer = (state = initialState, action: LocalizationActionTypes): LocalizationState => {\r\n    switch (action.type) {\r\n        case CHANGE_LANGUAGE: return ChangeLanguage(action);\r\n        default:\r\n          return state;\r\n    }\r\n}","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\r\nimport { createLogger } from 'redux-logger';\r\nimport { weatherReducer } from \"./Weather/WeatherReducer\";\r\nimport { localizationReducer } from './Localization/LocalizationReducer';\r\nimport { AppActions } from \"./actions\";\r\n\r\nconst logger = createLogger();\r\n\r\nlet middleware = [];\r\nif (process.env.NODE_ENV === 'development') {\r\n    middleware = [thunk as ThunkMiddleware<AppState, AppActions>, logger];\r\n} else {\r\n    middleware = [thunk as ThunkMiddleware<AppState, AppActions>];\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n    weatherReducer, localizationReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore<AppState, AppActions, {}, {}>(\r\n    rootReducer,\r\n    applyMiddleware(...middleware)\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { store } from \"./store/rootStore\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                <App />\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}