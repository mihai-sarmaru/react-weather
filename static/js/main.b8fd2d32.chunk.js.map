{"version":3,"sources":["components/DetailWeather/DetailItem/DetailItemTypes.ts","components/QuickNavigation/QuickNavigation.tsx","components/WeatherIcon/WeatherIcon.tsx","components/CurrentWeather/CurrentWeather.tsx","components/WeatherChart/chartType.ts","components/DetailWeather/DetailItem/DetailItem.tsx","utils/DateConverter.ts","components/DetailWeather/DetailWeather.tsx","components/FetchingWeather/FetchingWeather.tsx","utils/env.ts","axios/axios-weather.ts","store/Weather/models/WeatherActionsModel.ts","store/Weather/utils/WeatherMapper.ts","store/Weather/WeatherActions.ts","containers/CurrentWeatherContainer/CurrentWeatherContainer.tsx","components/Forecast/OverviewDetailItem/OverviewDetailItem.tsx","components/Forecast/OverviewItem/OverviewItem.tsx","containers/ForecastContainer/ForecastContainer.tsx","components/WeatherChart/ChartTooltip/ChartTooltip.tsx","components/WeatherChart/WeatherChart.tsx","containers/HourlyWeatherContainer/HourlyWeatherContainer.tsx","App.tsx","store/Weather/WeatherReducer.ts","store/rootStore.ts","index.tsx"],"names":["DetailItemType","QuickNavigation","ButtonGroup","variant","style","marginTop","marginBottom","Button","component","Link","to","WeatherIcon","props","weatherIcon","size","color","iconId","Fragment","CurrentWeather","Grid","container","spacing","width","item","xs","textAlign","weatherIconId","from","number","temperature","Typography","className","toFixed","feelsLike","description","chartType","DetailItem","itemIcon","itemValue","itemDescription","itemType","PRECIPITATION_CHANCE","value","WIND","UV_INDEX","CLOUD_COVER","PRESSURE","HUMIDITY","DEW_POINT","VISIBILITY","SUNRISE","SUNSET","UnixUTCToHourMinuteString","utcTime","date","Date","getHours","getMinutes","UnixUTCToDayString","getDay","getDate","DetailWeather","opacity","sprops","margin","md","lg","precipitation","currentWeather","windSpeed","uvi","clouds","pressure","humidity","dewPoint","visibility","sunrise","sunset","FetchingWeather","CircularProgress","env","process","this","buildApi","main","apiK","replace","substring","length","instance","axios","create","baseURL","getBaseAPI","FETCH_WEATHER_REQUEST","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","mapIWeatherCoordinates","coord","latitude","lat","longitude","lon","timezoneOffset","timezone_offset","mapICurrentWeather","current","weatherDesc","mapIWeatherDescription","weather","dt","temp","feels_like","dew_point","wind_speed","map","wdesc","id","mapIHourlyWeather","hourlyWeather","hourly","pop","mapIForecastWeather","forecastWeather","forecast","maxTemp","max","minTemp","min","fetchWeather","long","dispatch","type","loading","error","get","getApiDefaultParams","params","then","response","fetchedWeather","console","log","data","coordinates","daily","catch","message","CurrentWeatherContainer","onLoadWeather","navigator","geolocation","getCurrentPosition","pos","coords","Component","connect","state","weatherReducer","bindActionCreators","OverviewDetailItem","marginLeft","Paper","background","OverviewItem","display","marginRight","IconButton","onClick","expandClick","expanded","isOpened","ForecastContainer","initLocalState","forecastLength","exArr","i","push","setState","onExpandClick","index","prevState","itemIndex","fetchWeatherForecast","overviewItems","ChartTooltip","tooltipMeasurement","active","TEMPERATURE","payload","PRECIPITATION","tooltip","elevation","padding","WeatherChart","parsedData","forEach","element","newElem","chartDataKey","chartDataUnit","chartTypeHandler","justifyContent","height","top","left","right","dataKey","tickLine","tick","position","offset","axisLine","stroke","strokeDasharray","horizontal","content","strokeWidth","HourlyWeatherContainer","fetchHourlyWeather","weatherChart","onChartButtonClick","withRouter","path","initialState","FetchWeatherSuccess","action","FetchWeatherFailure","logger","createLogger","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8fd2d32.chunk.js","sourcesContent":["enum DetailItemType {\r\n    PRECIPITATION_CHANCE,\r\n    WIND,\r\n    UV_INDEX,\r\n    CLOUD_COVER,\r\n    PRESSURE,\r\n    HUMIDITY,\r\n    DEW_POINT,\r\n    VISIBILITY,\r\n    SUNRISE,\r\n    SUNSET\r\n}\r\n\r\nexport default DetailItemType;","import { Button, ButtonGroup } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst QuickNavigation = () => {\r\n    return(\r\n        <ButtonGroup variant='outlined' style={{marginTop: '40px', marginBottom: '25px'}}>\r\n            <Button component={Link} to={'/'}>Now</Button>\r\n            <Button component={Link} to={'/hourly'}>Hourly</Button>\r\n            <Button component={Link} to={'/forecast'}>Forecast</Button>\r\n        </ButtonGroup>\r\n    );\r\n}\r\n\r\nexport default QuickNavigation;","import React from 'react';\r\nimport * as Icon from 'react-icons/wi'\r\n\r\ninterface WeatherIconProps {\r\n    iconId: number,\r\n    size?: number\r\n}\r\n\r\nconst WeatherIcon: React.FC<WeatherIconProps> = (props) => {\r\n\r\n    // Default alien icon\r\n    let weatherIcon = <Icon.WiAlien size={props.size} color='#7d8b8e' />\r\n\r\n    // Thunderstorm\r\n    if (props.iconId >= 200 && props.iconId < 300) {\r\n        weatherIcon = <Icon.WiThunderstorm size={props.size} color='#7d8b8e' />\r\n    }\r\n\r\n    // Drizzle\r\n    if (props.iconId >= 300 && props.iconId < 400) {\r\n        weatherIcon = <Icon.WiRainMix size={props.size} color='#96a7af' />\r\n    }\r\n\r\n    // Rain\r\n    if (props.iconId >= 500 && props.iconId < 600) {\r\n        weatherIcon = <Icon.WiRain size={props.size} color='#83c2d3' />\r\n    }\r\n\r\n    // Snow\r\n    if (props.iconId >= 600 && props.iconId < 700) {\r\n        weatherIcon = <Icon.WiSnowflakeCold size={props.size} color='#97becf' />\r\n    }\r\n\r\n    // Atmosphere\r\n    if (props.iconId >= 700 && props.iconId < 800) {\r\n        weatherIcon = <Icon.WiFog size={props.size} color='#becbd1' />\r\n    }\r\n\r\n    // Clear\r\n    if (props.iconId === 800) {\r\n        weatherIcon = <Icon.WiDaySunny size={props.size} color='#edcf53' />\r\n    }\r\n\r\n    // Cloudy\r\n    if (props.iconId > 800 && props.iconId < 900) {\r\n        weatherIcon = <Icon.WiCloudy size={props.size} color='#becbd1' />\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {weatherIcon}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default WeatherIcon;","import React from \"react\";\r\nimport 'fontsource-roboto';\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport { Spring } from 'react-spring/renderprops';\r\n\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\n\r\ninterface CurrentWeatherProps {\r\n    temperature: number,\r\n    feelsLike: number,\r\n    description: string,\r\n    weatherIconId: number\r\n}\r\n\r\nconst CurrentWeather: React.FC<CurrentWeatherProps> = (props) => {\r\n    return (\r\n        <Grid container spacing={2} style={{marginBottom: '40px', width: '98%'}}>\r\n            <Grid item xs={6}>\r\n                <div style={{textAlign: 'right'}}>\r\n                    <WeatherIcon iconId={props.weatherIconId} size={140}/>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <div style={{textAlign: 'left'}}>\r\n                    <Spring\r\n                        from={{number: 0}}\r\n                        to={{number: props.temperature}}>\r\n                            {props => <Typography variant='h2' className='typography-primary'>{props.number.toFixed()}°</Typography> }\r\n                    </Spring>\r\n                    <Typography variant='h6' className='typography-primary'>Feels like {props.feelsLike}°</Typography>\r\n                    <Typography variant='subtitle1' className='typography-secondary'>{props.description}</Typography>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","enum chartType {\r\n    TEMPERATURE,\r\n    WIND,\r\n    PRECIPITATION\r\n}\r\n\r\nexport default chartType;","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Grid } from '@material-ui/core';\r\nimport * as Icon from 'react-icons/wi'\r\nimport DetailItemType from './DetailItemTypes';\r\n\r\ninterface DetailItemProps {\r\n    itemType: DetailItemType,\r\n    value: number | string\r\n}\r\n\r\nconst DetailItem: React.FC<DetailItemProps> = (props) => {\r\n\r\n    let itemIcon = <Icon.WiAlien size={42} />\r\n    let itemValue = 'NA';\r\n    let itemDescription = 'NA';\r\n\r\n    switch (props.itemType) {\r\n        case DetailItemType.PRECIPITATION_CHANCE:\r\n            itemIcon = <Icon.WiUmbrella size={42} color='#666' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = 'Chance';\r\n            break;\r\n        case DetailItemType.WIND:\r\n            itemIcon = <Icon.WiStrongWind size={42} color='#becbd1' />\r\n            itemValue = props.value + ' km/h';\r\n            itemDescription = 'Wind speed';\r\n            break;\r\n        case DetailItemType.UV_INDEX:\r\n            itemIcon = <Icon.WiSolarEclipse size={42} color='#cbad33' />\r\n            itemValue = props.value as string;\r\n            itemDescription = 'UV index';\r\n            break;\r\n        case DetailItemType.CLOUD_COVER:\r\n            itemIcon = <Icon.WiCloudRefresh size={42} color='#becbd1' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = 'Cloud cover';\r\n            break;\r\n        case DetailItemType.PRESSURE:\r\n            itemIcon = <Icon.WiBarometer size={42} color='#666' />\r\n            itemValue = props.value + ' mmHg';\r\n            itemDescription = 'Pressure';\r\n            break;\r\n        case DetailItemType.HUMIDITY:\r\n            itemIcon = <Icon.WiHumidity size={42} color='#86c3d6' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = 'Humidity';\r\n            break;\r\n        case DetailItemType.DEW_POINT:\r\n            itemIcon = <Icon.WiThermometerInternal size={42} color='#86c3d6' />\r\n            itemValue = props.value + ' °';\r\n            itemDescription = 'Dew point';\r\n            break;\r\n        case DetailItemType.VISIBILITY:\r\n            itemIcon = <Icon.WiTrain size={42} color='#999' />\r\n            itemValue = props.value + ' km';\r\n            itemDescription = 'Visibility';\r\n            break;\r\n        case DetailItemType.SUNRISE:\r\n            itemIcon = <Icon.WiSunrise size={42} color='#edcf53' />\r\n            itemValue = props.value as string;\r\n            itemDescription = 'Sunrise';\r\n            break;\r\n        case DetailItemType.SUNSET:\r\n            itemIcon = <Icon.WiSunset size={42} color='#edcf53' />\r\n            itemValue = props.value as string;\r\n            itemDescription = 'Sunset';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return(\r\n        <Grid container spacing={2} style={{marginTop: '1px'}}>\r\n            <Grid item xs={4}>\r\n                <div style={{textAlign: 'right'}}>\r\n                    {itemIcon}\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <div style={{textAlign: 'left'}}>\r\n                    <Typography variant='subtitle2' className='typography-primary'><strong>{itemValue}</strong></Typography>\r\n                    <Typography variant='body2' className='typography-secondary'>{itemDescription}</Typography>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default DetailItem;","export const UnixUTCToHourMinuteString = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours() + ':' + date.getMinutes();\r\n}\r\n\r\nexport const UnixUTCToDayString = (utcTime: number) => {\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    const date = new Date(utcTime);\r\n    return days[date.getDay()] + ' ' + date.getDate();\r\n}\r\n\r\nexport const UnixUTCHourString = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours();\r\n}","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport DetailItem from './DetailItem/DetailItem';\r\nimport DetailItemType from './DetailItem/DetailItemTypes';\r\nimport { ICurrentWeather } from '../../store/Weather/models/Weather';\r\nimport { UnixUTCToHourMinuteString } from '../../utils/DateConverter';\r\nimport { Spring } from 'react-spring/renderprops';\r\n\r\ninterface DetailWeatherProps {\r\n    currentWeather: ICurrentWeather;\r\n    precipitation: number;\r\n}\r\n\r\nconst DetailWeather: React.FC<DetailWeatherProps> = (props) => {\r\n    return (\r\n        <Spring from={{opacity: 0}} to={{opacity: 1}}>\r\n                { sprops => \r\n                    <div style={sprops}>\r\n\r\n                        <div style={{margin: 'auto', width: '80%'}}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.PRECIPITATION_CHANCE} value={props.precipitation}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.WIND} value={props.currentWeather.windSpeed}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.UV_INDEX} value={props.currentWeather.uvi}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.CLOUD_COVER} value={props.currentWeather.clouds}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.PRESSURE} value={props.currentWeather.pressure}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.HUMIDITY} value={props.currentWeather.humidity}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.DEW_POINT} value={props.currentWeather.dewPoint}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.VISIBILITY} value={props.currentWeather.visibility}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.SUNRISE} value={UnixUTCToHourMinuteString(props.currentWeather.sunrise)}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.SUNSET} value={UnixUTCToHourMinuteString(props.currentWeather.sunset)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n\r\n                    </div>\r\n                }\r\n        </Spring>\r\n    );\r\n}\r\n\r\nexport default DetailWeather;","import React from \"react\";\r\nimport { CircularProgress, Typography } from \"@material-ui/core\";\r\n\r\nconst FetchingWeather = () => {\r\n    return <div style={{margin: '50px 0'}}>\r\n        <CircularProgress />\r\n        <Typography variant='subtitle1'>Fetching Weather</Typography>\r\n    </div>;\r\n};\r\n\r\nexport default FetchingWeather;","class env {\r\n\r\n    public static getBaseAPI() {\r\n        return process.env.REACT_APP_BASE_API;\r\n    }\r\n\r\n    public static getApiDefaultParams() {\r\n        return process.env.REACT_APP_API_PARAMS + this.buildApi(true);\r\n    }\r\n\r\n    public static getApiLocK() {\r\n        return this.buildApi(false);\r\n    }\r\n\r\n    private static buildApi(main: boolean) {\r\n        const apiK = main ? process.env.REACT_APP_WK! : process.env.REACT_APP_LC!;\r\n        return apiK.replace(apiK.substring(apiK.length - 2, apiK.length), '');\r\n    }\r\n\r\n}\r\n\r\nexport default env;","import axios from \"axios\";\r\nimport env from '../utils/env';\r\n\r\nconst instance = axios.create({\r\n    baseURL:\r\n        env.getBaseAPI() ||\r\n        \"https://raw.githubusercontent.com/Predator7/react-weather/main/src/sample-api/weather.json\",\r\n});\r\n\r\nexport default instance;\r\n","import { IWeather } from \"./Weather\";\r\n\r\nexport const FETCH_WEATHER_REQUEST = \"FETCH_WEATHER_REQUEST\";\r\nexport const FETCH_WEATHER_SUCCESS = \"FETCH_WEATHER_SUCCESS\";\r\nexport const FETCH_WEATHER_FAILURE = \"FETCH_WEATHER_FAILURE\";\r\n\r\ninterface WeatherAsync {\r\n    loading: boolean;\r\n    error: string;\r\n    weather: IWeather;\r\n}\r\n\r\ninterface FetchWeatherRequest extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_REQUEST;\r\n}\r\ninterface FetchWeatherSuccess extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_SUCCESS;\r\n}\r\ninterface FetchWeatherFailure extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_FAILURE;\r\n}\r\n\r\nexport type WeatherActionTypes =\r\n    | FetchWeatherRequest\r\n    | FetchWeatherSuccess\r\n    | FetchWeatherFailure; // | PostWeather ...\r\n","import { IForecastWeather, IHourlyWeather, IWeather, IWeatherDescription } from \"../models/Weather\"\r\n\r\nexport const mapIWeather = (weather: any): IWeather => {\r\n    const coords = mapIWeatherCoordinates(weather);\r\n    const current = mapICurrentWeather(weather.current);\r\n    const hourly = mapIHourlyWeather(weather.hourly);\r\n    const fcst = mapIForecastWeather(weather.daily);\r\n    \r\n    const convertedWeather: IWeather = {\r\n        coordinates: coords,\r\n        currentWeather: current,\r\n        hourlyWeather: hourly,\r\n        forecast: fcst\r\n    }\r\n\r\n    return convertedWeather;\r\n}\r\n\r\nconst mapIWeatherCoordinates = (coord: any) => {\r\n    return {\r\n        latitude: coord.lat,\r\n        longitude: coord.lon,\r\n        timezoneOffset: coord.timezone_offset * 1000\r\n    }\r\n}\r\n\r\nconst mapICurrentWeather = (current: any) => {\r\n    const weatherDesc = mapIWeatherDescription(current.weather);\r\n    return {\r\n        dt: current.dt * 1000,\r\n        sunrise: current.sunrise * 1000,\r\n        sunset: current.sunset * 1000,\r\n        temp: current.temp.toFixed(0),\r\n        feelsLike: current.feels_like.toFixed(0),\r\n        pressure: current.pressure,\r\n        humidity: current.humidity,\r\n        dewPoint: current.dew_point.toFixed(0),\r\n        uvi: current.uvi,\r\n        clouds: current.clouds,\r\n        visibility: current.visibility / 1000,\r\n        windSpeed: current.wind_speed.toFixed(0),\r\n        weather: weatherDesc\r\n    }\r\n}\r\n\r\nconst mapIWeatherDescription = (weather: any[]) => {\r\n    return weather.map(wdesc => {\r\n        return ({\r\n            id: wdesc.id,\r\n            main: wdesc.main,\r\n            description: wdesc.description,\r\n        } as IWeatherDescription);\r\n    });\r\n}\r\n\r\nconst mapIHourlyWeather = (hourlyWeather: any[]) => {\r\n    return hourlyWeather.map(hourly => {\r\n        return ({\r\n            dt: hourly.dt * 1000,\r\n            temp: hourly.temp.toFixed(0),\r\n            windSpeed: hourly.wind_speed.toFixed(0),\r\n            precipitation: +(hourly.pop * 100).toFixed(0),\r\n            weather: mapIWeatherDescription(hourly.weather)\r\n        } as IHourlyWeather);\r\n    });\r\n}\r\n\r\nconst mapIForecastWeather = (forecastWeather: any[]) => {\r\n    return forecastWeather.map(forecast => {\r\n        return ({\r\n            dt: forecast.dt * 1000,\r\n            precipitation: +(forecast.pop * 100).toFixed(0),\r\n            maxTemp: +forecast.temp.max.toFixed(0),\r\n            minTemp: +forecast.temp.min.toFixed(0),\r\n            windSpeed: +forecast.wind_speed.toFixed(0),\r\n            uvi: forecast.uvi,\r\n            clouds: forecast.clouds,\r\n            pressure: forecast.pressure,\r\n            sunrise: forecast.sunrise * 1000,\r\n            sunset: forecast.sunset * 1000,\r\n            weather: mapIWeatherDescription(forecast.weather)\r\n        } as IForecastWeather);\r\n    });\r\n}","import { Dispatch } from 'redux';\r\nimport axios from '../../axios/axios-weather';\r\nimport env from '../../utils/env';\r\nimport { FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from './models/WeatherActionsModel';\r\nimport { IWeather } from './models/Weather';\r\nimport { AppActions } from '../actions';\r\nimport { mapIWeather } from './utils/WeatherMapper';\r\n\r\nconst requestWeather = (): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_REQUEST,\r\n        loading: true,\r\n        error: '',\r\n        weather: {} as IWeather\r\n    }\r\n}\r\n\r\nconst receiveWeather = (fetchedWeather: IWeather): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_SUCCESS,\r\n        loading: false,\r\n        error: '',\r\n        weather: fetchedWeather\r\n    }\r\n}\r\n\r\nconst invalidWeather = (): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_FAILURE,\r\n        loading: false,\r\n        error: 'Something went wrong fetching weather',\r\n        weather: {} as any\r\n    }\r\n}\r\n\r\nexport const fetchWeather = (lat: number, long: number) => {\r\n    return (dispatch: Dispatch<AppActions>) => {\r\n        dispatch(requestWeather());\r\n        axios.get('/' + env.getApiDefaultParams(), {params: {lat: lat, lon: long}})\r\n            .then(response => { \r\n                console.log(response.data);\r\n                dispatch(receiveWeather(mapIWeather(response.data)));\r\n            })\r\n            .catch(error => {\r\n                console.log(error.message);\r\n                dispatch(invalidWeather());\r\n            });\r\n    };\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport CurrentWeather from '../../components/CurrentWeather/CurrentWeather';\r\nimport DetailWeather from '../../components/DetailWeather/DetailWeather';\r\nimport FetchingWeather from '../../components/FetchingWeather/FetchingWeather';\r\nimport { AppActions } from '../../store/actions';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { IWeather } from '../../store/Weather/models/Weather';\r\nimport { fetchWeather } from '../../store/Weather/WeatherActions';\r\n\r\ninterface Props {}\r\n\r\ninterface LinkStateProps {\r\n    weather: IWeather;\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n    fetchWeather: (lat: number, long: number) => void;\r\n}\r\n\r\ntype LinkProps = Props & LinkStateProps & LinkDispatchProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => {\r\n    return {\r\n        weather: state.weatherReducer.weather\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState, {}, AppActions>) => {\r\n    return {\r\n        fetchWeather: bindActionCreators(fetchWeather, dispatch)\r\n    }\r\n};\r\n\r\nclass CurrentWeatherContainer extends Component<LinkProps> {\r\n\r\n    componentDidMount() {\r\n        if (!this.props.weather.currentWeather) {\r\n            if ('geolocation' in navigator) {\r\n                navigator.geolocation.getCurrentPosition(pos => {\r\n                    this.props.fetchWeather(pos.coords.latitude, pos.coords.longitude);\r\n                }, error => {\r\n                    // TODO: remove this when publishing\r\n                    console.log(error.message);\r\n                    this.props.fetchWeather(+process.env.REACT_APP_DEFAULT_LAT!, +process.env.REACT_APP_DEFAULT_LONG!);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    onLoadWeather = () => {\r\n        let weather = <FetchingWeather />;\r\n\r\n        if (this.props.weather.currentWeather) {\r\n            weather = (\r\n                <div>\r\n                    <CurrentWeather\r\n                        temperature={this.props.weather.currentWeather.temp}\r\n                        feelsLike={this.props.weather.currentWeather.feelsLike}\r\n                        description={this.props.weather.currentWeather.weather[0].description}\r\n                        weatherIconId={this.props.weather.currentWeather.weather[0].id} />\r\n\r\n                <DetailWeather\r\n                    currentWeather={this.props.weather.currentWeather}\r\n                    precipitation={this.props.weather.hourlyWeather[0].precipitation} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return weather;\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.onLoadWeather()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentWeatherContainer);","import React from 'react';\r\nimport { Grid, Typography, Paper } from '@material-ui/core';\r\nimport DetailItem from '../../DetailWeather/DetailItem/DetailItem';\r\nimport DetailItemType from '../../DetailWeather/DetailItem/DetailItemTypes';\r\nimport { IForecastWeather } from '../../../store/Weather/models/Weather';\r\nimport { UnixUTCToHourMinuteString } from '../../../utils/DateConverter';\r\n\r\ninterface OverviewDetailItemProps {\r\n    forecast: IForecastWeather;\r\n}\r\n\r\nconst OverviewDetailItem: React.FC<OverviewDetailItemProps> = (props) => {\r\n    return(\r\n        <Grid container spacing={2}>\r\n            <Grid item xs={2} md={1}/>\r\n            <Grid item xs={10} md={11}>\r\n                \r\n                <div style={{textAlign: 'left', marginLeft: '8px', marginBottom: '20px'}}>\r\n                    <Typography variant='subtitle1' className='typography-secondary'>{props.forecast.weather[0].description}</Typography>\r\n\r\n                    <Grid container spacing={2} style={{marginTop: '15px'}}>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.WIND} value={props.forecast.windSpeed}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.CLOUD_COVER} value={props.forecast.clouds}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.UV_INDEX} value={props.forecast.uvi}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.PRESSURE} value={props.forecast.pressure}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.SUNRISE} value={UnixUTCToHourMinuteString(props.forecast.sunrise)}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                            <Paper variant='outlined' style={{background: 'transparent'}} >\r\n                                <DetailItem itemType={DetailItemType.SUNSET} value={UnixUTCToHourMinuteString(props.forecast.sunset)}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default OverviewDetailItem;","import React from 'react';\r\nimport { Grid, IconButton, Typography } from '@material-ui/core';\r\nimport { UnmountClosed } from 'react-collapse';\r\nimport * as WiIcon from 'react-icons/wi'\r\nimport * as Icon from 'react-icons/md'\r\nimport WeatherIcon from '../../WeatherIcon/WeatherIcon';\r\nimport OverviewDetailItem from '../OverviewDetailItem/OverviewDetailItem';\r\nimport { IForecastWeather } from '../../../store/Weather/models/Weather';\r\nimport { UnixUTCToDayString } from '../../../utils/DateConverter';\r\n\r\ninterface OverviewItemProps {\r\n    forecast: IForecastWeather;\r\n    expanded: boolean;\r\n    expandClick: () => void;\r\n}\r\n\r\nconst OverviewItem: React.FC<OverviewItemProps> = (props) => {\r\n    return (\r\n        <Grid container spacing={2} style={{margin: 'auto', width: '95%'}}>\r\n            <Grid item xs={2} md={1}>\r\n                <div style={{textAlign: 'center'}}>\r\n                    <WeatherIcon iconId={props.forecast.weather[0].id} size={58}/>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={8} md={10}>\r\n                <div style={{textAlign: 'left'}}>\r\n                    <Typography variant='h6' className='typography-primary'><strong>{UnixUTCToDayString(props.forecast.dt)}</strong></Typography>\r\n                    <div style={{display: 'flex'}}>\r\n                        <WiIcon.WiUmbrella size={20} color='#7d8b8e' />\r\n                        <Typography variant='subtitle2' className='typography-secondary' style={{marginRight: '20px'}}>{props.forecast.precipitation} %</Typography>\r\n                        <WiIcon.WiThermometer size={20} color='#86c3d6' />\r\n                        <Typography variant='subtitle2' className='typography-secondary'>{props.forecast.maxTemp}° | {props.forecast.minTemp}°</Typography>\r\n                    </div>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={2} md={1}>\r\n                <div style={{textAlign: 'right'}}>\r\n                    <IconButton onClick={props.expandClick}>\r\n                        {props.expanded ? <Icon.MdExpandLess size={32}/> : <Icon.MdExpandMore size={32}/>}\r\n                    </IconButton>\r\n                </div>\r\n            </Grid>\r\n\r\n            <UnmountClosed isOpened={props.expanded}>\r\n                <OverviewDetailItem forecast={props.forecast}/> \r\n            </UnmountClosed>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default OverviewItem;","import { connect } from 'react-redux';\r\nimport React, {Component} from 'react';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { IForecastWeather } from '../../store/Weather/models/Weather';\r\nimport OverviewItem from '../../components/Forecast/OverviewItem/OverviewItem';\r\nimport FetchingWeather from '../../components/FetchingWeather/FetchingWeather';\r\n\r\ninterface Props {}\r\n\r\ninterface LinkStateProps {\r\n    forecast: IForecastWeather[];\r\n}\r\n\r\ninterface LinkDispatchProps {}\r\n\r\ntype LinkProps = Props & LinkStateProps & LinkDispatchProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => {\r\n    return {\r\n        forecast: state.weatherReducer.weather.forecast,\r\n    }\r\n}\r\n\r\ninterface LocalState {\r\n    expanded: boolean[];\r\n}\r\n\r\nclass ForecastContainer extends Component<LinkProps> {\r\n\r\n    state: LocalState = {\r\n        expanded: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        // prevent inifite loop\r\n        if (this.props.forecast && this.state.expanded.length === 0) {\r\n            this.initLocalState(this.props.forecast.length);\r\n        }\r\n    }\r\n\r\n    initLocalState = (forecastLength: number) => {\r\n        let exArr: boolean[] = [];\r\n        for (let i = 0; i < forecastLength; i++) {\r\n            exArr.push(false);\r\n        }\r\n        this.setState( () => {\r\n            return { expanded: exArr }\r\n        })\r\n    }\r\n\r\n    onExpandClick = (index: number) => {\r\n        this.setState((prevState: LocalState) => {\r\n            return {\r\n                expanded: prevState.expanded.map((item, itemIndex) => {\r\n                    return itemIndex === index ? !item : item;\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    fetchWeatherForecast = () => {\r\n        let overviewItems = [<FetchingWeather key={'fetching'} />];\r\n        if (this.props.forecast) {\r\n            overviewItems = this.props.forecast.map( (item, index) => (\r\n                <OverviewItem\r\n                    key={item.dt}\r\n                    forecast={item}\r\n                    expanded={this.state.expanded[index]}\r\n                    expandClick={() => this.onExpandClick(index)}/>\r\n                )\r\n            );\r\n        }\r\n        return overviewItems;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.fetchWeatherForecast()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ForecastContainer);","import React from 'react';\r\nimport { Paper, Typography } from '@material-ui/core';\r\nimport chartType from '../chartType';\r\n\r\ninterface ChartTooltipProps {\r\n    chartType: chartType;\r\n    active?: boolean;\r\n    payload?: any;\r\n}\r\n\r\nconst ChartTooltip: React.FC<ChartTooltipProps> = (props) => {\r\n\r\n    let tooltipMeasurement = '';\r\n    if (props.active) {\r\n        switch (props.chartType) {\r\n            case chartType.TEMPERATURE:\r\n                tooltipMeasurement = 'Temperature: ' + props.payload[0].payload.temp + '°';\r\n                break;\r\n            case chartType.WIND:\r\n                tooltipMeasurement = 'Wind: ' + props.payload[0].payload.windSpeed + ' km/h';\r\n                break;\r\n            case chartType.PRECIPITATION:\r\n                tooltipMeasurement = 'Precipitation: ' + props.payload[0].payload.precipitation + '%';\r\n                break;\r\n            default:\r\n                tooltipMeasurement = 'Temperature: ' + props.payload[0].payload.temp + '°';\r\n                break;\r\n        }\r\n    }\r\n\r\n    let tooltip = null;\r\n    if (props.active) {\r\n        tooltip = <Paper elevation={1} style={{padding: '5px'}}>\r\n                <Typography><strong>{props.payload[0].payload.dt}:00</strong></Typography>\r\n                <Typography>{tooltipMeasurement}</Typography>\r\n            </Paper>;\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {tooltip}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ChartTooltip;","import React from 'react';\r\nimport { IconButton } from '@material-ui/core';\r\nimport * as WiIcon from 'react-icons/wi'\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Label, ResponsiveContainer, Tooltip } from 'recharts';\r\nimport { IHourlyWeather } from '../../store/Weather/models/Weather';\r\nimport { UnixUTCHourString } from '../../utils/DateConverter';\r\nimport chartType from './chartType';\r\nimport ChartTooltip from './ChartTooltip/ChartTooltip';\r\n\r\ninterface WeatherChartProps {\r\n    hourlyWeather: IHourlyWeather[];\r\n    chartType: chartType;\r\n    chartTypeHandler: (type: chartType) => void;\r\n}\r\n\r\nconst WeatherChart: React.FC<WeatherChartProps> = (props) => {\r\n\r\n    // Convert Date\r\n    const parsedData: IHourlyWeather[] = [];\r\n    props.hourlyWeather.forEach((element, index) => {\r\n        const newElem = {\r\n            ...element,\r\n            dt: UnixUTCHourString(element.dt)\r\n        }\r\n        // Chart complexity - element devided by 3\r\n        if (index % 3 === 0)\r\n            parsedData.push(newElem);\r\n    });\r\n\r\n    let chartDataKey = 'temp';\r\n    let chartDataUnit = '°C';\r\n    switch (props.chartType) {\r\n        case chartType.TEMPERATURE:\r\n            chartDataKey = 'temp';\r\n            chartDataUnit = '°C';\r\n            break;\r\n        case chartType.WIND:\r\n            chartDataKey = 'windSpeed';\r\n            chartDataUnit = 'km/h';\r\n            break;\r\n        case chartType.PRECIPITATION:\r\n            chartDataKey = 'precipitation';\r\n            chartDataUnit = '(%)';\r\n            break;\r\n        default:\r\n            chartDataUnit = '°C';\r\n            break;\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div>\r\n                <IconButton\r\n                    color={props.chartType === chartType.TEMPERATURE ? 'primary' : 'default'}\r\n                    onClick={() => props.chartTypeHandler(chartType.TEMPERATURE)}>\r\n                    <WiIcon.WiThermometer size={32}/>\r\n                </IconButton>\r\n                <IconButton\r\n                    color={props.chartType === chartType.WIND ? 'primary' : 'default'}\r\n                    onClick={() => props.chartTypeHandler(chartType.WIND)}>\r\n                    <WiIcon.WiStrongWind size={32}/>\r\n                </IconButton>\r\n                <IconButton\r\n                    color={props.chartType === chartType.PRECIPITATION ? 'primary' : 'default'}\r\n                    onClick={() => props.chartTypeHandler(chartType.PRECIPITATION)}>\r\n                    <WiIcon.WiUmbrella size={32}/>\r\n                </IconButton>\r\n            </div>\r\n            <div style={{display: 'flex', justifyContent:'center'}}>\r\n                <ResponsiveContainer width='90%' height={250}>\r\n                    <LineChart margin={{top: 35, left: 10, right: 10}} data={parsedData}>\r\n                        <XAxis dataKey='dt' tickLine={false} tick={<div/>}>\r\n                            <Label position='insideBottomLeft' offset={0} value='Now'/>\r\n                            <Label position='insideBottom' offset={0} value='24h'/>\r\n                            <Label position='insideBottomRight' offset={0} value='48h'/>\r\n                        </XAxis>\r\n                        <YAxis dataKey={chartDataKey} width={30} tickLine={false} axisLine={false}>\r\n                            <Label position='top' offset={20} value={chartDataUnit}/>\r\n                        </YAxis>\r\n                        <CartesianGrid stroke=\"#eee\" strokeDasharray='3 5' horizontal={false} />\r\n                        <Tooltip content={<ChartTooltip chartType={props.chartType} />} />\r\n                        <Line dataKey={chartDataKey} strokeWidth={2}/>\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default WeatherChart;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FetchingWeather from '../../components/FetchingWeather/FetchingWeather';\r\nimport chartType from '../../components/WeatherChart/chartType';\r\nimport WeatherChart from '../../components/WeatherChart/WeatherChart';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { IHourlyWeather } from '../../store/Weather/models/Weather';\r\n\r\ninterface Props {}\r\n\r\ninterface LinkStateProps {\r\n    hourlyWeather: IHourlyWeather[];\r\n}\r\n\r\ninterface LinkDispatchProps {}\r\n\r\ntype LinkProps = Props & LinkStateProps & LinkDispatchProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => {\r\n    return {\r\n        hourlyWeather: state.weatherReducer.weather.hourlyWeather\r\n    }\r\n}\r\n\r\ninterface LocalState {\r\n    chartType: chartType;\r\n}\r\n\r\nclass HourlyWeatherContainer extends Component<LinkProps> {\r\n\r\n    state: LocalState = {\r\n        chartType: chartType.TEMPERATURE\r\n    }\r\n\r\n    fetchHourlyWeather = () => {\r\n        let weatherChart = <FetchingWeather key={'fetching'} />;\r\n        if (this.props.hourlyWeather) {\r\n            weatherChart = <WeatherChart\r\n                            hourlyWeather={this.props.hourlyWeather}\r\n                            chartType={this.state.chartType}\r\n                            chartTypeHandler={(type: chartType) => this.onChartButtonClick(type)} />;\r\n        }\r\n        return weatherChart;\r\n    }\r\n\r\n    onChartButtonClick = (type: chartType) => {\r\n        this.setState((prevState: LocalState) => {\r\n            return {\r\n                chartType: type\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.fetchHourlyWeather()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(HourlyWeatherContainer);","import React from \"react\";\r\nimport { Switch, Route, withRouter, Redirect } from 'react-router-dom';\r\nimport QuickNavigation from \"./components/QuickNavigation/QuickNavigation\";\r\nimport CurrentWeatherContainer from \"./containers/CurrentWeatherContainer/CurrentWeatherContainer\";\r\nimport ForecastContainer from \"./containers/ForecastContainer/ForecastContainer\";\r\nimport HourlyWeatherContainer from \"./containers/HourlyWeatherContainer/HourlyWeatherContainer\";\r\n\r\nfunction App() {\r\n    return (\r\n        <React.Fragment>\r\n            <QuickNavigation />\r\n            <Switch>\r\n                <Route path='/hourly' component={HourlyWeatherContainer} />\r\n                <Route path='/forecast' component={ForecastContainer} />\r\n                <Route path='/' component={CurrentWeatherContainer} />\r\n                <Redirect to='/' />\r\n            </Switch>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(App);\r\n","import { WeatherActionTypes, FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from './models/WeatherActionsModel';\r\nimport { IWeather } from './models/Weather';\r\n\r\ninterface WeatherState {\r\n    loading: boolean;\r\n    error: string;\r\n    weather: IWeather;\r\n}\r\n\r\nconst initialState: WeatherState = {\r\n    loading: false,\r\n    error: '',\r\n    weather: {} as IWeather\r\n}\r\n\r\nconst FetchWeatherRequest = () => {\r\n    return { loading: true, error: '', weather: {} as IWeather };\r\n}\r\n\r\nconst FetchWeatherSuccess = (action: WeatherActionTypes) => {\r\n    return { loading: false, error: '', weather: action.weather};\r\n}\r\n\r\nconst FetchWeatherFailure = (action: WeatherActionTypes) => {\r\n    return { loading: false, error: action.error, weather: {} as IWeather};\r\n}\r\n\r\nexport const weatherReducer = (state = initialState, action: WeatherActionTypes): WeatherState => {\r\n    switch (action.type) {\r\n        case FETCH_WEATHER_REQUEST: return FetchWeatherRequest();\r\n        case FETCH_WEATHER_SUCCESS: return FetchWeatherSuccess(action);\r\n        case FETCH_WEATHER_FAILURE: return FetchWeatherFailure(action);\r\n        default:\r\n          return state;\r\n    }\r\n}","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\r\nimport { createLogger } from 'redux-logger';\r\nimport { weatherReducer } from \"./Weather/WeatherReducer\";\r\nimport { AppActions } from \"./actions\";\r\n\r\nconst logger = createLogger();\r\n\r\nexport const rootReducer = combineReducers({\r\n    weatherReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore<AppState, AppActions, {}, {}>(\r\n    rootReducer,\r\n    applyMiddleware(thunk as ThunkMiddleware<AppState, AppActions>, logger)\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { store } from \"./store/rootStore\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App />\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}