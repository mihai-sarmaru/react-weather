{"version":3,"sources":["components/DetailWeather/DetailItem/DetailItemTypes.ts","components/Loading/Loading.tsx","store/Localization/models/LocalizationActionsModel.ts","localization/english.ts","localization/romanian.ts","store/Localization/LocalizationActions.ts","components/LanguageOptions/LanguageOptions.tsx","components/OptionsDrawer/OptionsDrawer.tsx","components/QuickNavigation/QuickNavigation.tsx","components/CurrentWeather/CurrentWeather.tsx","components/DetailWeather/DetailWeather.tsx","utils/env.ts","axios/axios-weather.ts","store/Weather/models/WeatherActionsModel.ts","store/Weather/utils/WeatherMapper.ts","store/Weather/WeatherActions.ts","containers/CurrentWeatherContainer/CurrentWeatherContainer.tsx","localization/utils/coordinates.ts","App.tsx","serviceWorkerRegistration.ts","store/Weather/WeatherReducer.ts","store/Localization/LocalizationReducer.ts","store/rootStore.ts","index.tsx","components/DetailWeather/DetailItem/DetailItem.tsx","localization/model/localizationModel.ts","utils/DateConverter.ts","components/WeatherIcon/WeatherIcon.tsx","components/FetchingWeather/FetchingWeather.tsx"],"names":["DetailItemType","FetchingWeather","style","margin","CircularProgress","CHANGE_LANGUAGE","languageMap","Map","set","localization","language","weekArray","selected","Languages","ENGLISH","ROMANIAN","changeLanguage","lang","type","English","Romanian","LanguageOptions","useSelector","state","localizationReducer","dispatch","useDispatch","width","FormControl","component","FormLabel","get","RadioGroup","aria-label","name","value","onChange","event","target","localStorage","setItem","FormControlLabel","control","Radio","label","OptionsDrawer","props","Drawer","anchor","open","onClose","Grid","container","QuickNavigation","useState","drawer","navState","setNavState","onOptionsButtonClick","Fragment","ButtonGroup","variant","size","Button","startIcon","Link","to","onClick","CurrentWeather","spacing","marginBottom","item","xs","textAlign","WeatherIcon","iconId","weatherIconId","day","from","number","temperature","Typography","className","toFixed","feelsLike","description","DetailWeather","opacity","sprops","md","lg","DetailItem","itemType","PRECIPITATION_CHANCE","precipitation","WIND","currentWeather","windSpeed","UV_INDEX","uvi","CLOUD_COVER","clouds","PRESSURE","pressure","HUMIDITY","humidity","DEW_POINT","dewPoint","VISIBILITY","visibility","SUNRISE","UnixUTCToHourMinuteString","sunrise","SUNSET","sunset","env","process","this","buildApi","main","apiK","replace","substring","length","instance","axios","create","baseURL","getBaseAPI","FETCH_WEATHER_REQUEST","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","mapIWeatherCoordinates","coord","latitude","lat","longitude","lon","timezoneOffset","timezone_offset","mapICurrentWeather","current","weatherDesc","mapIWeatherDescription","weather","dt","temp","feels_like","dew_point","wind_speed","map","wdesc","id","mapIHourlyWeather","hourlyWeather","hourly","pop","mapIForecastWeather","forecastWeather","forecast","maxTemp","max","minTemp","min","fetchWeather","long","loading","error","getApiDefaultParams","params","then","response","fetchedWeather","data","coordinates","daily","catch","console","log","message","CurrentWeatherContainer","setLocalization","localLang","getItem","onLoadWeather","UnixUTCDayIcon","navigator","geolocation","getCurrentPosition","pos","coords","Component","connect","weatherReducer","bindActionCreators","ForecastContainer","React","lazy","HourlyWeatherContainer","withRouter","fallback","Loading","path","render","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialState","FetchWeatherSuccess","action","FetchWeatherFailure","ChangeLanguage","middleware","createLogger","thunk","rootReducer","combineReducers","store","createStore","applyMiddleware","ReactDOM","StrictMode","basename","document","getElementById","URL","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","itemIcon","itemValue","itemDescription","color","marginTop","utcTime","date","Date","getHours","getMinutes","UnixUTCToDayString","days","getDay","getDate","UnixUTCHourString","UnixUTCHourStringFakeMinutes","UnixUTCToDayOfMonth","weatherIcon"],"mappings":"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","file":"static/js/main.3bbe1dd4.chunk.js","sourcesContent":["enum DetailItemType {\r\n    PRECIPITATION_CHANCE,\r\n    WIND,\r\n    UV_INDEX,\r\n    CLOUD_COVER,\r\n    PRESSURE,\r\n    HUMIDITY,\r\n    DEW_POINT,\r\n    VISIBILITY,\r\n    SUNRISE,\r\n    SUNSET\r\n}\r\n\r\nexport default DetailItemType;","import React from \"react\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\nconst FetchingWeather = () => {\r\n\r\n    return <div style={{margin: '50px 0'}}>\r\n        <CircularProgress />\r\n    </div>;\r\n};\r\n\r\nexport default FetchingWeather;","import { ILocalization } from '../../../localization/model/localizationModel';\r\n\r\nexport const CHANGE_LANGUAGE = \"CHANGE_LANGUAGE\";\r\n\r\ninterface Localization {\r\n    language: ILocalization;\r\n}\r\n\r\ninterface ChangeLanguage extends Localization {\r\n    type: typeof CHANGE_LANGUAGE;\r\n}\r\n\r\nexport type LocalizationActionTypes = ChangeLanguage;","import { ILocalization, Languages } from \"./model/localizationModel\";\r\n\r\nlet languageMap = new Map<string, string>();\r\n\r\n// loading\r\nlanguageMap.set('loading', 'Fetching weather');\r\n\r\n// navigation\r\nlanguageMap.set('nav-now', 'Now');\r\nlanguageMap.set('nav-hourly', 'Hourly');\r\nlanguageMap.set('nav-later', 'Later');\r\nlanguageMap.set('nav-settings', 'Settings');\r\n\r\n// current weather\r\nlanguageMap.set('current-feels', 'Feels like');\r\n\r\n// detail weather\r\nlanguageMap.set('detail-chance', 'Chance');\r\nlanguageMap.set('detail-wind', 'Wind speed');\r\nlanguageMap.set('detail-uv', 'UV Index');\r\nlanguageMap.set('detail-cloud', 'Cloud cover');\r\nlanguageMap.set('detail-pressure', 'Pressure');\r\nlanguageMap.set('detail-humidity', 'Humidity');\r\nlanguageMap.set('detail-dew', 'Dew point');\r\nlanguageMap.set('detail-visibility', 'Visibility');\r\nlanguageMap.set('detail-sunrise', 'Sunrise');\r\nlanguageMap.set('detail-sunset', 'Sunset');\r\n\r\n// chart tooltip\r\nlanguageMap.set('chart-tooltip-temperature', 'Temperature');\r\nlanguageMap.set('chart-tooltip-wind', 'Wind speed');\r\nlanguageMap.set('chart-tooltip-precipitation', 'Precipitation');\r\n\r\n// chart X axis\r\nlanguageMap.set('chart-axis-now', 'Now');\r\nlanguageMap.set('chart-axis-24', '24h');\r\nlanguageMap.set('chart-axis-48', '48h');\r\n\r\n// more less toggle button\r\nlanguageMap.set('toggle-more', 'More');\r\nlanguageMap.set('toggle-less', 'Less');\r\n\r\n// options\r\nlanguageMap.set('options-lang-title', 'Weather language');\r\nlanguageMap.set('options-lang-en', 'English');\r\nlanguageMap.set('options-lang-ro', 'Romanian');\r\n\r\n// week days array\r\nconst weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nconst selectedLanguage = Languages.ENGLISH;\r\n\r\nexport const localization: ILocalization = {\r\n    language: languageMap,\r\n    weekArray: weekDays,\r\n    selected: selectedLanguage\r\n}","import { ILocalization, Languages } from \"./model/localizationModel\";\r\n\r\nlet languageMap = new Map<string, string>();\r\n\r\n// loading\r\nlanguageMap.set('loading', 'Se incarca vremea');\r\n\r\n// navigation\r\nlanguageMap.set('nav-now', 'Acum');\r\nlanguageMap.set('nav-hourly', 'Urmeaza');\r\nlanguageMap.set('nav-later', 'Viitor');\r\nlanguageMap.set('nav-settings', 'Setari');\r\n\r\n// current weather\r\nlanguageMap.set('current-feels', 'Se simte');\r\n\r\n// detail weather\r\nlanguageMap.set('detail-chance', 'Sanse');\r\nlanguageMap.set('detail-wind', 'Vant');\r\nlanguageMap.set('detail-uv', 'Index UV');\r\nlanguageMap.set('detail-cloud', 'Acoperire');\r\nlanguageMap.set('detail-pressure', 'Presiune');\r\nlanguageMap.set('detail-humidity', 'Umiditate');\r\nlanguageMap.set('detail-dew', 'Condens');\r\nlanguageMap.set('detail-visibility', 'Visibilitate');\r\nlanguageMap.set('detail-sunrise', 'Rasarit');\r\nlanguageMap.set('detail-sunset', 'Apus');\r\n\r\n// chart tooltip\r\nlanguageMap.set('chart-tooltip-temperature', 'Temperatura');\r\nlanguageMap.set('chart-tooltip-wind', 'Vant');\r\nlanguageMap.set('chart-tooltip-precipitation', 'Precipitatie');\r\n\r\n// chart X axis\r\nlanguageMap.set('chart-axis-now', 'Acum');\r\nlanguageMap.set('chart-axis-24', '24 ore');\r\nlanguageMap.set('chart-axis-48', '48 ore');\r\n\r\n// more less toggle button\r\nlanguageMap.set('toggle-more', 'Mai Mult');\r\nlanguageMap.set('toggle-less', 'Mai Putin');\r\n\r\n// options\r\nlanguageMap.set('options-lang-title', 'Schimba limba');\r\nlanguageMap.set('options-lang-en', 'Engleza');\r\nlanguageMap.set('options-lang-ro', 'Romana');\r\n\r\n// week days array\r\nconst weekDays = ['Duminica', 'Luni', 'Marti', 'Miercuri', 'Joi', 'Vineri', 'Sambata'];\r\n\r\nconst selectedLanguage = Languages.ROMANIAN;\r\n\r\nexport const localization: ILocalization = {\r\n    language: languageMap,\r\n    weekArray: weekDays,\r\n    selected: selectedLanguage\r\n}","import { AppActions } from \"../actions\";\r\nimport { CHANGE_LANGUAGE } from \"./models/LocalizationActionsModel\";\r\n\r\nimport * as English from '../../localization/english';\r\nimport * as Romanian from '../../localization/romanian';\r\n\r\nexport const changeLanguage = (lang: string): AppActions => {\r\n     return {\r\n        type: CHANGE_LANGUAGE,\r\n        language: lang === 'english' ? English.localization : Romanian.localization\r\n     }\r\n}","import React from 'react';\r\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { AppActions } from '../../store/actions';\r\nimport { Languages } from '../../localization/model/localizationModel';\r\nimport { changeLanguage } from '../../store/Localization/LocalizationActions';\r\n\r\nconst LanguageOptions = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n    const dispatch = useDispatch<ThunkDispatch<AppState, {}, AppActions>>();\r\n\r\n    const handleSelectedLanguage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = +(event.target as HTMLInputElement).value === 0 ? 'english' : 'romanian';\r\n        dispatch(changeLanguage(value));\r\n        localStorage.setItem('localization', value);\r\n    }\r\n\r\n    return(\r\n        <div style={{width: '70%', margin: '10px auto'}}>\r\n             <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">{localization.language.get('options-lang-title')}</FormLabel>\r\n                <RadioGroup aria-label=\"language\" name=\"language\" value={localization.selected} onChange={handleSelectedLanguage} >\r\n                    <FormControlLabel value={Languages.ENGLISH} control={<Radio />} label={localization.language.get('options-lang-en')} />\r\n                    <FormControlLabel value={Languages.ROMANIAN} control={<Radio />} label={localization.language.get('options-lang-ro')} />\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LanguageOptions;","import React from 'react';\r\nimport { Drawer, Grid } from '@material-ui/core';\r\nimport LanguageOptions from '../LanguageOptions/LanguageOptions';\r\n\r\ninterface OptionsDrawerProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nconst OptionsDrawer: React.FC<OptionsDrawerProps> = (props) => {\r\n    return (\r\n        <Drawer anchor='top' open={props.open} onClose={props.onClose}>\r\n\r\n            <Grid container>\r\n                <LanguageOptions />\r\n            </Grid>\r\n\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default OptionsDrawer;","import { Button, ButtonGroup } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as WiIcons from 'react-icons/wi';\r\nimport * as MdIcons from 'react-icons/md';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/rootStore';\r\nimport OptionsDrawer from '../OptionsDrawer/OptionsDrawer';\r\n\r\ninterface QuickNavigationLocalState {\r\n    drawer: boolean;\r\n}\r\n\r\nconst QuickNavigation = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    const [navState, setNavState] = useState<QuickNavigationLocalState>({drawer: false});\r\n\r\n    const onOptionsButtonClick = () => {\r\n        setNavState({drawer: !navState.drawer});\r\n    }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            <ButtonGroup variant='outlined' size='small' style={{margin: '40px 0'}}>\r\n                <Button startIcon={<WiIcons.WiThermometer />}\r\n                    component={Link} to={'/'}>{localization.language.get('nav-now')}</Button>\r\n                <Button startIcon={<WiIcons.WiTime4 />}\r\n                    component={Link} to={'/hourly'}>{localization.language.get('nav-hourly')}</Button>\r\n                <Button startIcon={<WiIcons.WiWindDeg />}\r\n                    component={Link} to={'/forecast'}>{localization.language.get('nav-later')}</Button>\r\n                <Button aria-label={localization.language.get('nav-settings')}\r\n                    onClick={onOptionsButtonClick}>\r\n                        <MdIcons.MdSettings />\r\n                    </Button>\r\n            </ButtonGroup>\r\n            <OptionsDrawer open={navState.drawer} onClose={onOptionsButtonClick} />\r\n        </React.Fragment>\r\n        \r\n    );\r\n}\r\n\r\nexport default QuickNavigation;","import React from \"react\";\r\nimport 'fontsource-roboto';\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport { Spring } from 'react-spring/renderprops';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\nimport { AppState } from \"../../store/rootStore\";\r\nimport { Languages } from \"../../localization/model/localizationModel\";\r\n\r\ninterface CurrentWeatherProps {\r\n    temperature: number,\r\n    feelsLike: number,\r\n    description: string,\r\n    weatherIconId: number,\r\n    day: boolean\r\n}\r\n\r\nconst CurrentWeather: React.FC<CurrentWeatherProps> = (props) => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    return (\r\n        <Grid container spacing={2} style={{marginBottom: '40px', width: '98%'}}>\r\n            <Grid item xs={6}>\r\n                <div style={{textAlign: 'right'}}>\r\n                    <WeatherIcon iconId={props.weatherIconId} day={props.day}\r\n                    size={localization.selected === Languages.ENGLISH ? 140 : 110}/>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <div style={{textAlign: 'left'}}>\r\n                    <Spring\r\n                        from={{number: 0}}\r\n                        to={{number: props.temperature}}>\r\n                            {props => <Typography variant='h2' className='typography-primary'>{props.number.toFixed()}°</Typography> }\r\n                    </Spring>\r\n                    <Typography variant='h6' className='typography-primary'>{localization.language.get('current-feels')!} {props.feelsLike}°</Typography>\r\n                    <Typography variant='subtitle1' className='typography-secondary'>\r\n                        {localization.selected === Languages.ENGLISH ? props.description : ''}\r\n                    </Typography>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport DetailItem from './DetailItem/DetailItem';\r\nimport DetailItemType from './DetailItem/DetailItemTypes';\r\nimport { ICurrentWeather } from '../../store/Weather/models/Weather';\r\nimport { UnixUTCToHourMinuteString } from '../../utils/DateConverter';\r\nimport { Spring } from 'react-spring/renderprops';\r\n\r\ninterface DetailWeatherProps {\r\n    currentWeather: ICurrentWeather;\r\n    precipitation: number;\r\n}\r\n\r\nconst DetailWeather: React.FC<DetailWeatherProps> = (props) => {\r\n    return (\r\n        <Spring from={{opacity: 0}} to={{opacity: 1}}>\r\n                { sprops => \r\n                    <div style={sprops}>\r\n\r\n                        <div style={{margin: 'auto', width: '80%'}}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.PRECIPITATION_CHANCE} value={props.precipitation}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.WIND} value={props.currentWeather.windSpeed}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.UV_INDEX} value={props.currentWeather.uvi}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.CLOUD_COVER} value={props.currentWeather.clouds}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.PRESSURE} value={props.currentWeather.pressure}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.HUMIDITY} value={props.currentWeather.humidity}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.DEW_POINT} value={props.currentWeather.dewPoint}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.VISIBILITY} value={props.currentWeather.visibility}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.SUNRISE} value={UnixUTCToHourMinuteString(props.currentWeather.sunrise)}/>\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4} lg={3}>\r\n                                    <DetailItem itemType={DetailItemType.SUNSET} value={UnixUTCToHourMinuteString(props.currentWeather.sunset)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n\r\n                    </div>\r\n                }\r\n        </Spring>\r\n    );\r\n}\r\n\r\nexport default DetailWeather;","class env {\r\n\r\n    public static getBaseAPI() {\r\n        return process.env.REACT_APP_BASE_API;\r\n    }\r\n\r\n    public static getApiDefaultParams() {\r\n        return process.env.REACT_APP_API_PARAMS + this.buildApi(true);\r\n    }\r\n\r\n    public static getApiLocK() {\r\n        return this.buildApi(false);\r\n    }\r\n\r\n    private static buildApi(main: boolean) {\r\n        const apiK = main ? process.env.REACT_APP_WK! : process.env.REACT_APP_LC!;\r\n        return apiK.replace(apiK.substring(apiK.length - 2, apiK.length), '');\r\n    }\r\n\r\n}\r\n\r\nexport default env;","import axios from \"axios\";\r\nimport env from '../utils/env';\r\n\r\nconst instance = axios.create({\r\n    baseURL:\r\n        env.getBaseAPI() ||\r\n        \"https://raw.githubusercontent.com/Predator7/react-weather/main/src/sample-api/weather.json\",\r\n});\r\n\r\nexport default instance;\r\n","import { IWeather } from \"./Weather\";\r\n\r\nexport const FETCH_WEATHER_REQUEST = \"FETCH_WEATHER_REQUEST\";\r\nexport const FETCH_WEATHER_SUCCESS = \"FETCH_WEATHER_SUCCESS\";\r\nexport const FETCH_WEATHER_FAILURE = \"FETCH_WEATHER_FAILURE\";\r\n\r\ninterface WeatherAsync {\r\n    loading: boolean;\r\n    error: string;\r\n    weather: IWeather;\r\n}\r\n\r\ninterface FetchWeatherRequest extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_REQUEST;\r\n}\r\ninterface FetchWeatherSuccess extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_SUCCESS;\r\n}\r\ninterface FetchWeatherFailure extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_FAILURE;\r\n}\r\n\r\nexport type WeatherActionTypes =\r\n    | FetchWeatherRequest\r\n    | FetchWeatherSuccess\r\n    | FetchWeatherFailure; // | PostWeather ...\r\n","import { IForecastWeather, IHourlyWeather, IWeather, IWeatherDescription } from \"../models/Weather\"\r\n\r\nexport const mapIWeather = (weather: any): IWeather => {\r\n    const coords = mapIWeatherCoordinates(weather);\r\n    const current = mapICurrentWeather(weather.current);\r\n    const hourly = mapIHourlyWeather(weather.hourly);\r\n    const fcst = mapIForecastWeather(weather.daily);\r\n    \r\n    const convertedWeather: IWeather = {\r\n        coordinates: coords,\r\n        currentWeather: current,\r\n        hourlyWeather: hourly,\r\n        forecast: fcst\r\n    }\r\n\r\n    return convertedWeather;\r\n}\r\n\r\nconst mapIWeatherCoordinates = (coord: any) => {\r\n    return {\r\n        latitude: coord.lat,\r\n        longitude: coord.lon,\r\n        timezoneOffset: coord.timezone_offset * 1000\r\n    }\r\n}\r\n\r\nconst mapICurrentWeather = (current: any) => {\r\n    const weatherDesc = mapIWeatherDescription(current.weather);\r\n    return {\r\n        dt: current.dt * 1000,\r\n        sunrise: current.sunrise * 1000,\r\n        sunset: current.sunset * 1000,\r\n        temp: current.temp.toFixed(0),\r\n        feelsLike: current.feels_like.toFixed(0),\r\n        pressure: current.pressure,\r\n        humidity: current.humidity,\r\n        dewPoint: current.dew_point.toFixed(0),\r\n        uvi: current.uvi,\r\n        clouds: current.clouds,\r\n        visibility: current.visibility / 1000,\r\n        windSpeed: current.wind_speed.toFixed(0),\r\n        weather: weatherDesc\r\n    }\r\n}\r\n\r\nconst mapIWeatherDescription = (weather: any[]) => {\r\n    return weather.map(wdesc => {\r\n        return ({\r\n            id: wdesc.id,\r\n            main: wdesc.main,\r\n            description: wdesc.description,\r\n        } as IWeatherDescription);\r\n    });\r\n}\r\n\r\nconst mapIHourlyWeather = (hourlyWeather: any[]) => {\r\n    return hourlyWeather.map(hourly => {\r\n        return ({\r\n            dt: hourly.dt * 1000,\r\n            temp: hourly.temp.toFixed(0),\r\n            windSpeed: hourly.wind_speed.toFixed(0),\r\n            precipitation: +(hourly.pop * 100).toFixed(0),\r\n            weather: mapIWeatherDescription(hourly.weather)\r\n        } as IHourlyWeather);\r\n    });\r\n}\r\n\r\nconst mapIForecastWeather = (forecastWeather: any[]) => {\r\n    return forecastWeather.map(forecast => {\r\n        return ({\r\n            dt: forecast.dt * 1000,\r\n            precipitation: +(forecast.pop * 100).toFixed(0),\r\n            maxTemp: +forecast.temp.max.toFixed(0),\r\n            minTemp: +forecast.temp.min.toFixed(0),\r\n            windSpeed: +forecast.wind_speed.toFixed(0),\r\n            uvi: forecast.uvi,\r\n            clouds: forecast.clouds,\r\n            pressure: forecast.pressure,\r\n            sunrise: forecast.sunrise * 1000,\r\n            sunset: forecast.sunset * 1000,\r\n            weather: mapIWeatherDescription(forecast.weather)\r\n        } as IForecastWeather);\r\n    });\r\n}","import { Dispatch } from 'redux';\r\nimport axios from '../../axios/axios-weather';\r\nimport env from '../../utils/env';\r\nimport { FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from './models/WeatherActionsModel';\r\nimport { IWeather } from './models/Weather';\r\nimport { AppActions } from '../actions';\r\nimport { mapIWeather } from './utils/WeatherMapper';\r\n\r\nconst requestWeather = (): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_REQUEST,\r\n        loading: true,\r\n        error: '',\r\n        weather: {} as IWeather\r\n    }\r\n}\r\n\r\nconst receiveWeather = (fetchedWeather: IWeather): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_SUCCESS,\r\n        loading: false,\r\n        error: '',\r\n        weather: fetchedWeather\r\n    }\r\n}\r\n\r\nconst invalidWeather = (): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_FAILURE,\r\n        loading: false,\r\n        error: 'Something went wrong fetching weather',\r\n        weather: {} as any\r\n    }\r\n}\r\n\r\nexport const fetchWeather = (lat: number, long: number) => {\r\n    return (dispatch: Dispatch<AppActions>) => {\r\n        dispatch(requestWeather());\r\n        axios.get('/' + env.getApiDefaultParams(), {params: {lat: lat, lon: long}})\r\n            .then(response => { \r\n                dispatch(receiveWeather(mapIWeather(response.data)));\r\n            })\r\n            .catch(error => {\r\n                console.log(error.message);\r\n                dispatch(invalidWeather());\r\n            });\r\n    };\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport CurrentWeather from '../../components/CurrentWeather/CurrentWeather';\r\nimport DetailWeather from '../../components/DetailWeather/DetailWeather';\r\nimport FetchingWeather from '../../components/FetchingWeather/FetchingWeather';\r\nimport { ILocalization } from '../../localization/model/localizationModel';\r\nimport { AppActions } from '../../store/actions';\r\nimport { changeLanguage } from '../../store/Localization/LocalizationActions';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { IWeather } from '../../store/Weather/models/Weather';\r\nimport { fetchWeather } from '../../store/Weather/WeatherActions';\r\nimport { UnixUTCDayIcon } from '../../utils/DateConverter';\r\nimport { regionRomania } from '../../localization/utils/coordinates';\r\n\r\ninterface Props {}\r\n\r\ninterface LinkStateProps {\r\n    weather: IWeather;\r\n    localization: ILocalization;\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n    fetchWeather: (lat: number, long: number) => void;\r\n    changeLanguage: (lang: string) => void;\r\n}\r\n\r\ntype LinkProps = Props & LinkStateProps & LinkDispatchProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => {\r\n    return {\r\n        weather: state.weatherReducer.weather,\r\n        localization: state.localizationReducer.language\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState, {}, AppActions>) => {\r\n    return {\r\n        fetchWeather: bindActionCreators(fetchWeather, dispatch),\r\n        changeLanguage: bindActionCreators(changeLanguage, dispatch)\r\n    }\r\n};\r\n\r\nclass CurrentWeatherContainer extends Component<LinkProps> {\r\n\r\n    componentDidMount() {\r\n        if (!this.props.weather.currentWeather) {\r\n            if ('geolocation' in navigator) {\r\n                navigator.geolocation.getCurrentPosition(pos => {\r\n                    // Set starting language based on position \r\n                    const localLang = regionRomania(pos.coords.latitude, pos.coords.longitude) ? 'romanian' : 'english';\r\n                    this.setLocalization(localLang);\r\n                    this.props.fetchWeather(pos.coords.latitude, pos.coords.longitude);\r\n                }, error => {\r\n                    // TODO: remove this when publishing autocomplete\r\n                    console.log(error.message);\r\n                    this.setLocalization('romanian');\r\n                    this.props.fetchWeather(+process.env.REACT_APP_DEFAULT_LAT!, +process.env.REACT_APP_DEFAULT_LONG!);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    setLocalization = (localLang: string) => {\r\n        let language = localStorage.getItem('localization');\r\n        if (language !== null) {\r\n            this.props.changeLanguage(language);\r\n        } else {\r\n            localStorage.setItem('localization', localLang);\r\n            this.props.changeLanguage(localLang);\r\n        }\r\n    }\r\n\r\n    onLoadWeather = () => {\r\n        let weather = <FetchingWeather />;\r\n\r\n        if (this.props.weather.currentWeather) {\r\n            weather = (\r\n                <div>\r\n                    <CurrentWeather\r\n                        temperature={this.props.weather.currentWeather.temp}\r\n                        feelsLike={this.props.weather.currentWeather.feelsLike}\r\n                        description={this.props.weather.currentWeather.weather[0].description}\r\n                        weatherIconId={this.props.weather.currentWeather.weather[0].id}\r\n                        day={UnixUTCDayIcon(this.props.weather.currentWeather.dt,\r\n                            this.props.weather.currentWeather.sunrise,\r\n                            this.props.weather.currentWeather.sunset)} />\r\n\r\n                <DetailWeather\r\n                    currentWeather={this.props.weather.currentWeather}\r\n                    precipitation={this.props.weather.hourlyWeather[0].precipitation} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return weather;\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.onLoadWeather()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentWeatherContainer);","export const regionRomania = (lat: number, long: number) => {\r\n    if (lat > 43.38 && lat < 48.16) {\r\n        if (long > 20.16 && long < 29.42) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","import React, { Suspense } from \"react\";\r\nimport { Switch, Route, withRouter, Redirect } from 'react-router-dom';\r\nimport Loading from \"./components/Loading/Loading\";\r\nimport QuickNavigation from \"./components/QuickNavigation/QuickNavigation\";\r\nimport CurrentWeatherContainer from \"./containers/CurrentWeatherContainer/CurrentWeatherContainer\";\r\n\r\n// Lazy load components\r\nconst ForecastContainer = React.lazy(() => {\r\n    return import(\"./containers/ForecastContainer/ForecastContainer\");\r\n});\r\n\r\nconst HourlyWeatherContainer = React.lazy(() => {\r\n    return import(\"./containers/HourlyWeatherContainer/HourlyWeatherContainer\");\r\n});\r\n\r\nfunction App() {\r\n    return (\r\n        <React.Fragment>\r\n            <QuickNavigation />\r\n            <Suspense fallback={<Loading />}>\r\n                <Switch>\r\n                    <Route path='/hourly' render={() => <HourlyWeatherContainer/>} />\r\n                    <Route path='/forecast' render={() => <ForecastContainer/>} />\r\n                    <Route path='/' component={CurrentWeatherContainer} />\r\n                    <Redirect to='/' />\r\n                </Switch>\r\n            </Suspense>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { WeatherActionTypes, FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from './models/WeatherActionsModel';\r\nimport { IWeather } from './models/Weather';\r\n\r\ninterface WeatherState {\r\n    loading: boolean;\r\n    error: string;\r\n    weather: IWeather;\r\n}\r\n\r\nconst initialState: WeatherState = {\r\n    loading: false,\r\n    error: '',\r\n    weather: {} as IWeather\r\n}\r\n\r\nconst FetchWeatherRequest = () => {\r\n    return { loading: true, error: '', weather: {} as IWeather };\r\n}\r\n\r\nconst FetchWeatherSuccess = (action: WeatherActionTypes) => {\r\n    return { loading: false, error: '', weather: action.weather};\r\n}\r\n\r\nconst FetchWeatherFailure = (action: WeatherActionTypes) => {\r\n    return { loading: false, error: action.error, weather: {} as IWeather};\r\n}\r\n\r\nexport const weatherReducer = (state = initialState, action: WeatherActionTypes): WeatherState => {\r\n    switch (action.type) {\r\n        case FETCH_WEATHER_REQUEST: return FetchWeatherRequest();\r\n        case FETCH_WEATHER_SUCCESS: return FetchWeatherSuccess(action);\r\n        case FETCH_WEATHER_FAILURE: return FetchWeatherFailure(action);\r\n        default:\r\n          return state;\r\n    }\r\n}","import { ILocalization } from \"../../localization/model/localizationModel\";\r\nimport * as English from '../../localization/english';\r\nimport { CHANGE_LANGUAGE, LocalizationActionTypes } from \"./models/LocalizationActionsModel\";\r\n\r\ninterface LocalizationState {\r\n    language: ILocalization;\r\n}\r\n\r\nconst initialState: LocalizationState = {\r\n    language: English.localization\r\n}\r\n\r\nconst ChangeLanguage = (action: LocalizationActionTypes) => {\r\n    return { language: action.language };\r\n}\r\n\r\nexport const localizationReducer = (state = initialState, action: LocalizationActionTypes): LocalizationState => {\r\n    switch (action.type) {\r\n        case CHANGE_LANGUAGE: return ChangeLanguage(action);\r\n        default:\r\n          return state;\r\n    }\r\n}","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\r\nimport { createLogger } from 'redux-logger';\r\nimport { weatherReducer } from \"./Weather/WeatherReducer\";\r\nimport { localizationReducer } from './Localization/LocalizationReducer';\r\nimport { AppActions } from \"./actions\";\r\n\r\nconst logger = createLogger();\r\n\r\nlet middleware = [];\r\nif (process.env.NODE_ENV === 'development') {\r\n    middleware = [thunk as ThunkMiddleware<AppState, AppActions>, logger];\r\n} else {\r\n    middleware = [thunk as ThunkMiddleware<AppState, AppActions>];\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n    weatherReducer, localizationReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore<AppState, AppActions, {}, {}>(\r\n    rootReducer,\r\n    applyMiddleware(...middleware)\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { store } from \"./store/rootStore\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                <App />\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Grid } from '@material-ui/core';\r\nimport * as Icon from 'react-icons/wi'\r\nimport { useSelector } from 'react-redux';\r\nimport DetailItemType from './DetailItemTypes';\r\nimport { AppState } from '../../../store/rootStore';\r\n\r\ninterface DetailItemProps {\r\n    itemType: DetailItemType,\r\n    value: number | string\r\n}\r\n\r\nconst DetailItem: React.FC<DetailItemProps> = (props) => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    let itemIcon = <Icon.WiAlien size={42} />\r\n    let itemValue = 'NA';\r\n    let itemDescription = 'NA';\r\n\r\n    switch (props.itemType) {\r\n        case DetailItemType.PRECIPITATION_CHANCE:\r\n            itemIcon = <Icon.WiUmbrella size={42} color='#666' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = localization.language.get('detail-chance')!;\r\n            break;\r\n        case DetailItemType.WIND:\r\n            itemIcon = <Icon.WiStrongWind size={42} color='#becbd1' />\r\n            itemValue = props.value + ' km/h';\r\n            itemDescription = localization.language.get('detail-wind')!;\r\n            break;\r\n        case DetailItemType.UV_INDEX:\r\n            itemIcon = <Icon.WiSolarEclipse size={42} color='#cbad33' />\r\n            itemValue = props.value as string;\r\n            itemDescription = localization.language.get('detail-uv')!;\r\n            break;\r\n        case DetailItemType.CLOUD_COVER:\r\n            itemIcon = <Icon.WiCloudRefresh size={42} color='#becbd1' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = localization.language.get('detail-cloud')!;\r\n            break;\r\n        case DetailItemType.PRESSURE:\r\n            itemIcon = <Icon.WiBarometer size={42} color='#666' />\r\n            itemValue = props.value + ' mmHg';\r\n            itemDescription = localization.language.get('detail-pressure')!;\r\n            break;\r\n        case DetailItemType.HUMIDITY:\r\n            itemIcon = <Icon.WiHumidity size={42} color='#86c3d6' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = localization.language.get('detail-humidity')!;\r\n            break;\r\n        case DetailItemType.DEW_POINT:\r\n            itemIcon = <Icon.WiThermometerInternal size={42} color='#86c3d6' />\r\n            itemValue = props.value + ' °';\r\n            itemDescription = localization.language.get('detail-dew')!;\r\n            break;\r\n        case DetailItemType.VISIBILITY:\r\n            itemIcon = <Icon.WiTrain size={42} color='#999' />\r\n            itemValue = props.value + ' km';\r\n            itemDescription = localization.language.get('detail-visibility')!;\r\n            break;\r\n        case DetailItemType.SUNRISE:\r\n            itemIcon = <Icon.WiSunrise size={42} color='#edcf53' />\r\n            itemValue = props.value as string;\r\n            itemDescription = localization.language.get('detail-sunrise')!;\r\n            break;\r\n        case DetailItemType.SUNSET:\r\n            itemIcon = <Icon.WiSunset size={42} color='#edcf53' />\r\n            itemValue = props.value as string;\r\n            itemDescription = localization.language.get('detail-sunset')!;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return(\r\n        <Grid container spacing={2} style={{marginTop: '1px'}}>\r\n            <Grid item xs={4}>\r\n                <div style={{textAlign: 'right'}}>\r\n                    {itemIcon}\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <div style={{textAlign: 'left'}}>\r\n                    <Typography variant='subtitle2' className='typography-primary'><strong>{itemValue}</strong></Typography>\r\n                    <Typography variant='body2' className='typography-secondary'>{itemDescription}</Typography>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default DetailItem;","export interface ILocalization {\r\n    language: Map<string, string>;\r\n    weekArray: string[];\r\n    selected: Languages;\r\n}\r\n\r\nexport enum Languages {\r\n    ENGLISH,\r\n    ROMANIAN\r\n}","import { ILocalization } from \"../localization/model/localizationModel\";\r\n\r\nexport const UnixUTCToHourMinuteString = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours() + ':' + date.getMinutes();\r\n}\r\n\r\nexport const UnixUTCToDayString = (utcTime: number, localization: ILocalization) => {\r\n    const days = localization.weekArray;\r\n    const date = new Date(utcTime);\r\n    return days[date.getDay()] + ' ' + date.getDate();\r\n}\r\n\r\nexport const UnixUTCHourString = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours();\r\n}\r\n\r\nexport const UnixUTCHourStringFakeMinutes = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours() + ':00';\r\n}\r\n\r\nexport const UnixUTCDayIcon = (utcTime: number, sunrise: number, sunset: number) => {\r\n    return (utcTime > sunrise && utcTime < sunset); \r\n}\r\n\r\nexport const UnixUTCToDayOfMonth = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getDate();\r\n}","import React from 'react';\r\nimport * as Icon from 'react-icons/wi'\r\n\r\ninterface WeatherIconProps {\r\n    iconId: number,\r\n    day: boolean,\r\n    size?: number\r\n}\r\n\r\nconst WeatherIcon: React.FC<WeatherIconProps> = (props) => {\r\n\r\n    // Default alien icon\r\n    let weatherIcon = <Icon.WiAlien size={props.size} color='#7d8b8e' />\r\n\r\n    // Thunderstorm\r\n    if (props.iconId >= 200 && props.iconId < 300) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiThunderstorm size={props.size} color='#7d8b8e' /> :\r\n            <Icon.WiNightThunderstorm size={props.size} color='#7d8b8e' />\r\n    }\r\n\r\n    // Drizzle\r\n    if (props.iconId >= 300 && props.iconId < 400) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiRainMix size={props.size} color='#96a7af' /> :\r\n            <Icon.WiNightRainMix size={props.size} color='#96a7af' />\r\n    }\r\n\r\n    // Rain\r\n    if (props.iconId >= 500 && props.iconId < 600) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiRain size={props.size} color='#83c2d3' /> :\r\n            <Icon.WiNightRain size={props.size} color='#83c2d3' />\r\n    }\r\n\r\n    // Snow\r\n    if (props.iconId >= 600 && props.iconId < 700) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiSnowflakeCold size={props.size} color='#97becf' /> :\r\n            <Icon.WiNightSnow size={props.size} color='#97becf' />\r\n    }\r\n\r\n    // Atmosphere\r\n    if (props.iconId >= 700 && props.iconId < 800) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiFog size={props.size} color='#becbd1' /> :\r\n            <Icon.WiNightFog size={props.size} color='#becbd1' />\r\n    }\r\n\r\n    // Clear\r\n    if (props.iconId === 800) {\r\n        weatherIcon = props.day ? \r\n            <Icon.WiDaySunny size={props.size} color='#edcf53' /> :\r\n            <Icon.WiNightClear size={props.size} color='#becbd1' />\r\n    }\r\n\r\n    // Cloudy\r\n    if (props.iconId > 800 && props.iconId < 900) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiCloudy size={props.size} color='#becbd1' /> :\r\n            <Icon.WiNightCloudy size={props.size} color='#becbd1' />\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {weatherIcon}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default WeatherIcon;","import React from \"react\";\r\nimport { CircularProgress, Typography } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppState } from \"../../store/rootStore\";\r\n\r\nconst FetchingWeather = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    return <div style={{margin: '50px 0'}}>\r\n        <CircularProgress />\r\n        <Typography variant='subtitle1'>{localization.language.get('loading')}</Typography>\r\n    </div>;\r\n};\r\n\r\nexport default FetchingWeather;"],"sourceRoot":""}