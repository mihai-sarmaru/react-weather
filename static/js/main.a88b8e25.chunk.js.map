{"version":3,"sources":["components/Loading/Loading.tsx","store/Localization/models/LocalizationActionsModel.ts","localization/english.ts","localization/romanian.ts","store/Localization/LocalizationActions.ts","components/LanguageOptions/LanguageOptions.tsx","components/About/About.tsx","utils/env.ts","utils/LocationUtils.ts","components/GooglePlaces/GooglePlaces.tsx","components/LastLocations/LastLocations.tsx","utils/ImageUtil.ts","components/BackgroundImageToggle/BackgroundImageToggle.tsx","components/OptionsDrawer/OptionsDrawer.tsx","components/QuickNavigation/QuickNavigation.tsx","components/BackgroundWithLocationHOC/BackgroundWithLocationHOC.tsx","components/CurrentWeather/CurrentWeather.tsx","components/DetailWeather/DetailWeather.tsx","axios/axios-weather.ts","store/Weather/models/WeatherActionsModel.ts","store/Weather/utils/WeatherMapper.ts","store/Weather/WeatherActions.ts","components/NoGeolocation/NoGeolocation.tsx","containers/CurrentWeatherContainer/CurrentWeatherContainer.tsx","localization/utils/coordinates.ts","App.tsx","serviceWorkerRegistration.ts","store/Weather/WeatherReducer.ts","store/Localization/LocalizationReducer.ts","store/rootStore.ts","index.tsx","components/DetailWeather/DetailItem/DetailItemTypes.ts","components/DetailWeather/DetailItem/DetailItem.tsx","localization/model/localizationModel.ts","utils/DateConverter.ts","components/WeatherIcon/WeatherIcon.tsx","components/FetchingWeather/FetchingWeather.tsx"],"names":["FetchingWeather","style","margin","CircularProgress","CHANGE_LANGUAGE","languageMap","Map","set","localization","language","weekArray","selected","Languages","ENGLISH","ROMANIAN","changeLanguage","lang","type","English","Romanian","LanguageOptions","useSelector","state","localizationReducer","dispatch","useDispatch","width","textAlign","paddingTop","paddingLeft","FormControl","component","FormLabel","get","RadioGroup","aria-label","name","value","onChange","event","target","localStorage","setItem","FormControlLabel","control","Radio","label","About","Box","borderRadius","className","padding","Typography","variant","size","color","Tooltip","title","IconButton","href","env","process","this","buildApi","main","apiK","replace","substring","length","addLocationToLocalStorageAndRefresh","locationLabel","a","addLocationToLocalStorage","window","location","reload","localStorageLocations","getItem","getLocation","locations","locExists","JSON","parse","locationExists","pop","unshift","push","stringify","addToCurrentLocation","Promise","resolve","reject","geocodeByAddress","then","results","getLatLng","lat","lng","long","GooglePlaces","apiKey","getApiLocK","minLengthAutocomplete","debounce","autocompletionRequest","types","selectProps","placeholder","result","console","log","LastLocations","getLocationsFromStorage","display","map","loc","index","justifyContent","alignItems","Link","onClick","getUnsplashOption","option","BackgroundImageToggle","useState","setOption","useEffect","Grid","container","item","xs","Switch","checked","saveUnsplashOption","OptionsDrawer","props","Drawer","anchor","open","onClose","backgroundColor","position","top","left","right","removeItem","background","height","marginTop","QuickNavigation","drawer","navState","setNavState","onOptionsButtonClick","Fragment","opacity","ButtonGroup","Button","startIcon","to","BackgroundWithLocationHOC","currentWeather","weatherReducer","weather","weatherImage","setweatherImage","weatherLocation","setWeatherLocation","undefined","imageLink","weatherId","randomImageNumber","Math","floor","random","getRandomWeatherImage","id","coordinates","locationName","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","children","backdropFilter","fontSize","CurrentWeather","from","sprops","spacing","marginBottom","WeatherIcon","iconId","weatherIconId","day","number","temperature","delay","toFixed","feelsLike","description","DetailWeather","md","lg","DetailItem","itemType","DetailItemType","PRECIPITATION_CHANCE","precipitation","WIND","windSpeed","UV_INDEX","uvi","CLOUD_COVER","clouds","PRESSURE","pressure","HUMIDITY","humidity","DEW_POINT","dewPoint","VISIBILITY","visibility","SUNRISE","UnixUTCToHourMinuteString","sunrise","SUNSET","sunset","instance","axios","create","baseURL","getBaseAPI","FETCH_WEATHER_REQUEST","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","mapIWeather","coords","mapIWeatherCoordinates","current","mapICurrentWeather","hourly","mapIHourlyWeather","fcst","mapIForecastWeather","daily","convertedWeather","hourlyWeather","forecast","coord","latitude","longitude","lon","timezoneOffset","timezone_offset","weatherDesc","mapIWeatherDescription","dt","temp","feels_like","dew_point","wind_speed","wdesc","forecastWeather","maxTemp","max","minTemp","min","requestWeather","loading","error","receiveWeather","fetchedWeather","invalidWeather","fetchWeather","getApiDefaultParams","params","response","data","catch","message","NoGeolocation","CurrentWeatherContainer","didLocate","fetchWeatherWithDescription","Geocode","fromLatLng","toString","formatted_address","err","setLocalization","localLang","onLoadWeather","UnixUTCDayIcon","savedLocation","localStorageCurrentLocation","getCurrentSavedLocationFromStorage","navigator","geolocation","getCurrentPosition","pos","setState","Component","connect","bindActionCreators","ForecastContainer","React","lazy","HourlyWeatherContainer","withRouter","showNavigation","setshowNavigation","navMenu","showNavigationMenu","fallback","Loading","path","render","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialState","FetchWeatherSuccess","action","FetchWeatherFailure","ChangeLanguage","middleware","createLogger","thunk","rootReducer","combineReducers","store","createStore","applyMiddleware","ReactDOM","StrictMode","basename","document","getElementById","URL","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration","itemIcon","itemValue","itemDescription","String","fromCharCode","utcTime","date","Date","getHours","getMinutes","UnixUTCToDayString","days","getDay","getDate","UnixUTCHourString","UnixUTCHourStringFakeMinutes","UnixUTCToDayOfMonth","weatherIcon","loadingIcon","getLoadingIcon"],"mappings":"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","file":"static/js/main.a88b8e25.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\nconst FetchingWeather = () => {\r\n\r\n    return <div style={{margin: '100px auto'}}>\r\n        <CircularProgress />\r\n    </div>;\r\n};\r\n\r\nexport default FetchingWeather;","import { ILocalization } from '../../../localization/model/localizationModel';\r\n\r\nexport const CHANGE_LANGUAGE = \"CHANGE_LANGUAGE\";\r\n\r\ninterface Localization {\r\n    language: ILocalization;\r\n}\r\n\r\ninterface ChangeLanguage extends Localization {\r\n    type: typeof CHANGE_LANGUAGE;\r\n}\r\n\r\nexport type LocalizationActionTypes = ChangeLanguage;","import { ILocalization, Languages } from \"./model/localizationModel\";\r\n\r\nlet languageMap = new Map<string, string>();\r\n\r\n// loading\r\nlanguageMap.set('loading', 'Fetching weather');\r\n\r\n// navigation\r\nlanguageMap.set('nav-now', 'Now');\r\nlanguageMap.set('nav-hourly', 'Hourly');\r\nlanguageMap.set('nav-later', 'Later');\r\nlanguageMap.set('nav-settings', 'Settings');\r\n\r\n// drawer\r\nlanguageMap.set('drawer-back', 'Back');\r\nlanguageMap.set('drawer-location', 'Current location');\r\n\r\n// current weather\r\nlanguageMap.set('current-feels', 'Feels like');\r\n\r\n// detail weather\r\nlanguageMap.set('detail-chance', 'Chance');\r\nlanguageMap.set('detail-wind', 'Wind speed');\r\nlanguageMap.set('detail-uv', 'UV Index');\r\nlanguageMap.set('detail-cloud', 'Cloud cover');\r\nlanguageMap.set('detail-pressure', 'Pressure');\r\nlanguageMap.set('detail-humidity', 'Humidity');\r\nlanguageMap.set('detail-dew', 'Dew point');\r\nlanguageMap.set('detail-visibility', 'Visibility');\r\nlanguageMap.set('detail-sunrise', 'Sunrise');\r\nlanguageMap.set('detail-sunset', 'Sunset');\r\n\r\n// chart tooltip\r\nlanguageMap.set('chart-tooltip-temperature', 'Temperature');\r\nlanguageMap.set('chart-tooltip-wind', 'Wind speed');\r\nlanguageMap.set('chart-tooltip-precipitation', 'Precipitation');\r\n\r\n// chart X axis\r\nlanguageMap.set('chart-axis-now', 'Now');\r\nlanguageMap.set('chart-axis-24', '24h');\r\nlanguageMap.set('chart-axis-48', '48h');\r\n\r\n// more less toggle button\r\nlanguageMap.set('toggle-more', 'More');\r\nlanguageMap.set('toggle-less', 'Less');\r\n\r\n// search\r\nlanguageMap.set('search-placeholder', 'Search...');\r\n\r\n// options\r\nlanguageMap.set('options-lang-title', 'Weather language');\r\nlanguageMap.set('options-lang-en', 'English');\r\nlanguageMap.set('options-lang-ro', 'Romanian');\r\n\r\n// unsplash\r\nlanguageMap.set('unsplash', 'Random background');\r\n\r\n// about\r\nlanguageMap.set('about-built', 'Built with ');\r\nlanguageMap.set('about-by', ' by ');\r\n\r\n// week days array\r\nconst weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nconst selectedLanguage = Languages.ENGLISH;\r\n\r\nexport const localization: ILocalization = {\r\n    language: languageMap,\r\n    weekArray: weekDays,\r\n    selected: selectedLanguage\r\n}","import { ILocalization, Languages } from \"./model/localizationModel\";\r\n\r\nlet languageMap = new Map<string, string>();\r\n\r\n// loading\r\nlanguageMap.set('loading', 'Se incarcă vremea');\r\n\r\n// navigation\r\nlanguageMap.set('nav-now', 'Acum');\r\nlanguageMap.set('nav-hourly', 'Urmează');\r\nlanguageMap.set('nav-later', 'Viitor');\r\nlanguageMap.set('nav-settings', 'Setări');\r\n\r\n// drawer\r\nlanguageMap.set('drawer-back', 'Înapoi');\r\nlanguageMap.set('drawer-location', 'Locația curentă');\r\n\r\n// current weather\r\nlanguageMap.set('current-feels', 'Se simte');\r\n\r\n// detail weather\r\nlanguageMap.set('detail-chance', 'Șanse');\r\nlanguageMap.set('detail-wind', 'Vânt');\r\nlanguageMap.set('detail-uv', 'Index UV');\r\nlanguageMap.set('detail-cloud', 'Acoperire');\r\nlanguageMap.set('detail-pressure', 'Presiune');\r\nlanguageMap.set('detail-humidity', 'Umiditate');\r\nlanguageMap.set('detail-dew', 'Condens');\r\nlanguageMap.set('detail-visibility', 'Vizibilitate');\r\nlanguageMap.set('detail-sunrise', 'Răsărit');\r\nlanguageMap.set('detail-sunset', 'Apus');\r\n\r\n// chart tooltip\r\nlanguageMap.set('chart-tooltip-temperature', 'Temperatură');\r\nlanguageMap.set('chart-tooltip-wind', 'Vânt');\r\nlanguageMap.set('chart-tooltip-precipitation', 'Precipitație');\r\n\r\n// chart X axis\r\nlanguageMap.set('chart-axis-now', 'Acum');\r\nlanguageMap.set('chart-axis-24', '24 ore');\r\nlanguageMap.set('chart-axis-48', '48 ore');\r\n\r\n// more less toggle button\r\nlanguageMap.set('toggle-more', 'Mai Mult');\r\nlanguageMap.set('toggle-less', 'Mai Puțin');\r\n\r\n// search\r\nlanguageMap.set('search-placeholder', 'Caută...');\r\n\r\n// options\r\nlanguageMap.set('options-lang-title', 'Schimbă limba');\r\nlanguageMap.set('options-lang-en', 'Engleză');\r\nlanguageMap.set('options-lang-ro', 'Romană');\r\n\r\n// unsplash\r\nlanguageMap.set('unsplash', 'Fundal aleatoriu');\r\n\r\n// about\r\nlanguageMap.set('about-built', 'Construit cu ');\r\nlanguageMap.set('about-by', ' de ');\r\n\r\n// week days array\r\nconst weekDays = ['Duminică', 'Luni', 'Marți', 'Miercuri', 'Joi', 'Vineri', 'Sâmbătă'];\r\n\r\nconst selectedLanguage = Languages.ROMANIAN;\r\n\r\nexport const localization: ILocalization = {\r\n    language: languageMap,\r\n    weekArray: weekDays,\r\n    selected: selectedLanguage\r\n}","import { AppActions } from \"../actions\";\r\nimport { CHANGE_LANGUAGE } from \"./models/LocalizationActionsModel\";\r\n\r\nimport * as English from '../../localization/english';\r\nimport * as Romanian from '../../localization/romanian';\r\n\r\nexport const changeLanguage = (lang: string): AppActions => {\r\n     return {\r\n        type: CHANGE_LANGUAGE,\r\n        language: lang === 'english' ? English.localization : Romanian.localization\r\n     }\r\n}","import React from 'react';\r\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { AppActions } from '../../store/actions';\r\nimport { Languages } from '../../localization/model/localizationModel';\r\nimport { changeLanguage } from '../../store/Localization/LocalizationActions';\r\n\r\nconst LanguageOptions = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n    const dispatch = useDispatch<ThunkDispatch<AppState, {}, AppActions>>();\r\n\r\n    const handleSelectedLanguage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = +(event.target as HTMLInputElement).value === 0 ? 'english' : 'romanian';\r\n        dispatch(changeLanguage(value));\r\n        localStorage.setItem('localization', value);\r\n    }\r\n\r\n    return(\r\n        <div style={{width: '70%', textAlign: 'left', margin: '10px', paddingTop: '10px', paddingLeft: '10px'}}>\r\n             <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">{localization.language.get('options-lang-title')}</FormLabel>\r\n                <RadioGroup aria-label=\"language\" name=\"language\" value={localization.selected} onChange={handleSelectedLanguage} >\r\n                    <FormControlLabel value={Languages.ENGLISH} control={<Radio />} label={localization.language.get('options-lang-en')} />\r\n                    <FormControlLabel value={Languages.ROMANIAN} control={<Radio />} label={localization.language.get('options-lang-ro')} />\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LanguageOptions;","import React from 'react';\r\nimport { Box, IconButton, Tooltip, Typography } from '@material-ui/core';\r\nimport * as Icons from \"react-icons/fa\";\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/rootStore';\r\n\r\nconst About = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    return(\r\n        <div>\r\n            <Box borderRadius={16} className='box-default' style={{padding: '20px 0 10px 0'}}>\r\n                <Typography variant='body2' className='typography-secondary'>\r\n                    {localization.language.get('about-built')} \r\n                    <Icons.FaHeart size={11} color='#d32f2f'/> \r\n                    {localization.language.get('about-by')} \r\n                    <strong>Mihai Sârmaru</strong>\r\n                </Typography>\r\n                <div>\r\n                    <Tooltip title='Github' >\r\n                        <IconButton href='https://github.com/Predator7'>\r\n                            <Icons.FaGithub size={28} color='#211F1F' />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title='LinkedIn' >\r\n                        <IconButton href='https://linkedin.com/in/mihai-sarmaru'>\r\n                            <Icons.FaLinkedin size={28} color='#0e76a8' />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </div>\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","class env {\r\n\r\n    public static getBaseAPI() {\r\n        return process.env.REACT_APP_BASE_API;\r\n    }\r\n\r\n    public static getApiDefaultParams() {\r\n        return process.env.REACT_APP_API_PARAMS + this.buildApi(true);\r\n    }\r\n\r\n    public static getApiLocK() {\r\n        return this.buildApi(false);\r\n    }\r\n\r\n    private static buildApi(main: boolean) {\r\n        const apiK = main ? process.env.REACT_APP_WK! : process.env.REACT_APP_LC!;\r\n        return apiK.replace(apiK.substring(apiK.length - 2, apiK.length), '');\r\n    }\r\n\r\n}\r\n\r\nexport default env;","import { geocodeByAddress, getLatLng } from 'react-google-places-autocomplete';\r\n\r\nexport interface Location {\r\n    name: string;\r\n    lat: number;\r\n    long: number;\r\n}\r\n\r\nexport const addLocationToLocalStorageAndRefresh = async (locationLabel: string) => {\r\n    await addLocationToLocalStorage (locationLabel);\r\n    window.location.reload();\r\n}\r\n\r\nexport const addLocationToLocalStorage = async (locationLabel: string) => {\r\n    const localStorageLocations = localStorage.getItem('locations');\r\n    const location = await getLocation(locationLabel);\r\n\r\n    let locations: Location[] = [];\r\n    let locExists = true;\r\n\r\n    if (localStorageLocations !== null) {\r\n        locations = JSON.parse(localStorageLocations) as Location[];\r\n        if (!locationExists(locationLabel, locations)) {\r\n            locExists = false;\r\n            if (locations.length >= 3) locations.pop();\r\n            locations.unshift(location);\r\n        }\r\n    } else {\r\n        locations.push(location);\r\n        locExists = false;\r\n    }\r\n\r\n    if (!locExists) {\r\n        localStorage.setItem('locations', JSON.stringify(locations));\r\n    }\r\n\r\n    addToCurrentLocation(location);\r\n}\r\n\r\nexport const getLocationsFromStorage = (): null | Location[] => {\r\n    const localStorageLocations = localStorage.getItem('locations');\r\n    return localStorageLocations !== null ? JSON.parse(localStorageLocations) as Location[] : null;\r\n}\r\n\r\nexport const getCurrentSavedLocationFromStorage = () => {\r\n    const localStorageCurrentLocation = localStorage.getItem('current_location');\r\n    return localStorageCurrentLocation !== null ? JSON.parse(localStorageCurrentLocation) as Location : null;\r\n}\r\n\r\nexport const removeCurrentSavedLocation = () => {\r\n    localStorage.removeItem('current_location');\r\n}\r\n\r\nexport const addToCurrentLocation = (location: Location) => {\r\n    localStorage.setItem('current_location', JSON.stringify(location));\r\n}\r\n\r\nconst locationExists = (locationLabel: string, locations: Location[]) => {\r\n    for (const loc of locations) {\r\n        if (locationLabel === loc.name) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nconst getLocation = async (label: string): Promise<Location> => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        geocodeByAddress(label)\r\n            .then(results => getLatLng(results[0]))\r\n            .then(({ lat, lng }) => {\r\n                resolve({name: label, lat: lat, long: lng});\r\n            });\r\n\r\n    });\r\n}","import React from 'react';\r\nimport * as env from '../../utils/env';\r\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { addLocationToLocalStorageAndRefresh } from '../../utils/LocationUtils';\r\n\r\nconst GooglePlaces = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    const onLocationSelected = (result: any) => {\r\n        console.log(result);\r\n        addLocationToLocalStorageAndRefresh(result.label);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <GooglePlacesAutocomplete apiKey={env.default.getApiLocK()}\r\n                minLengthAutocomplete={3}\r\n                debounce={500}\r\n                autocompletionRequest={{\r\n                    types: [\"geocode\"]\r\n                }}\r\n                selectProps={{\r\n                    placeholder: `${localization.language.get('search-placeholder')}`,\r\n                    onChange: onLocationSelected\r\n                }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GooglePlaces;","import React from 'react';\r\nimport { Link } from '@material-ui/core'\r\nimport * as Icons from 'react-icons/md';\r\nimport { getLocationsFromStorage, addToCurrentLocation, Location } from '../../utils/LocationUtils';\r\n\r\nconst LastLocations = () => {\r\n\r\n    const locations = getLocationsFromStorage();\r\n\r\n    const onLocationClick = (location: Location) => {\r\n        addToCurrentLocation(location);\r\n        window.location.reload(); // <-- refresh window\r\n    }\r\n\r\n    return(\r\n        <div style={locations === null ? {display: 'none'} : {textAlign: 'left', padding: '10px 20px'}}>\r\n            {locations === null ? null : locations.map((loc, index) => {\r\n                return <div style={{display: 'flex', justifyContent: 'left', alignItems: 'center'}}>\r\n                        <Icons.MdLocationOn className='typography-secondary' /> \r\n                        <Link href='#' onClick={() => onLocationClick(loc)}\r\n                            style={{margin: '10px 0 10px 5px'}}\r\n                            key={index} >{loc.name}</Link>\r\n                    </div>\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LastLocations;","export const getRandomWeatherImage = (weatherId: number) => {\r\n\r\n    // Default weather image\r\n    let weatherImage = 'images/default.jpg';\r\n\r\n    const randomImageNumber = Math.floor(Math.random() * Math.floor(10));\r\n\r\n    // Thunderstorm\r\n    if (weatherId >= 200 && weatherId < 300) {\r\n        weatherImage = `images/thunderstorm/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    // Drizzle\r\n    if (weatherId >= 300 && weatherId < 400) {\r\n        weatherImage = `images/rain/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    // Rain\r\n    if (weatherId >= 500 && weatherId < 600) {\r\n        weatherImage = `images/rain/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    // Snow\r\n    if (weatherId >= 600 && weatherId < 700) {\r\n        weatherImage = `images/snow/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    // Atmosphere\r\n    if (weatherId >= 700 && weatherId < 800) {\r\n        weatherImage = `images/fog/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    // Clear\r\n    if (weatherId === 800) {\r\n        weatherImage = `images/sunny/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    // Cloudy\r\n    if (weatherId > 800 && weatherId < 900) {\r\n        weatherImage = `images/cloudy/${randomImageNumber}.jpg`;\r\n    }\r\n\r\n    return weatherImage;\r\n}\r\n\r\nexport const saveUnsplashOption = (option: boolean) => {\r\n    localStorage.setItem('unsplash', JSON.stringify(option));\r\n}\r\n\r\nexport const getUnsplashOption = (): boolean => {\r\n    const option = localStorage.getItem('unsplash');\r\n    return option !== null ? JSON.parse(option) : false; \r\n}\r\n\r\nexport const getUnsplashImageLink = () => {\r\n    return 'https://source.unsplash.com/1600x900/?nature';\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Typography, Grid, Switch } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { getUnsplashOption, saveUnsplashOption } from '../../utils/ImageUtil';\r\n\r\nconst BackgroundImageToggle = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    const [option, setOption] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setOption(getUnsplashOption());\r\n    }, []);\r\n\r\n    const onSwitchChanged = () => {\r\n        saveUnsplashOption(!option);\r\n        setOption(!option);\r\n    }\r\n\r\n    return(\r\n        <div style={{margin: '10px 0', padding: '0 20px', width: '90%'}}>\r\n            <Grid container style={{display: 'flex', justifyContent:'left', alignItems: 'center'}}>\r\n                <Grid item xs={9} style={{textAlign: 'left'}}>\r\n                    <Typography variant='body1'>{localization.language.get('unsplash')}</Typography>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Switch color='secondary' checked={option} onChange={onSwitchChanged} />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BackgroundImageToggle;","import React from 'react';\r\nimport { Drawer, Grid, Box, Tooltip, IconButton } from '@material-ui/core';\r\nimport * as MdIcons from 'react-icons/md';\r\nimport LanguageOptions from '../LanguageOptions/LanguageOptions';\r\nimport About from '../About/About';\r\nimport GooglePlaces from '../GooglePlaces/GooglePlaces';\r\nimport LastLocations from '../LastLocations/LastLocations';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { removeCurrentSavedLocation } from '../../utils/LocationUtils';\r\nimport BackgroundImageToggle from '../BackgroundImageToggle/BackgroundImageToggle';\r\n\r\ninterface OptionsDrawerProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nconst OptionsDrawer: React.FC<OptionsDrawerProps> = (props) => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    const onCurrectLocationClick = () => {\r\n        removeCurrentSavedLocation();\r\n        window.location.reload(); // <-- refresh window\r\n    }\r\n\r\n    return (\r\n        <Drawer anchor='left' open={props.open} onClose={props.onClose} >\r\n\r\n            <Tooltip title={localization.language.get('drawer-back')!} >\r\n                <IconButton \r\n                    style={{backgroundColor: '#ffffff',\r\n                        position: 'absolute', top: '0', left: '0', margin: '15px'}}\r\n                    onClick={props.onClose} >\r\n                    <MdIcons.MdArrowBack size={18}/>\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Tooltip title={localization.language.get('drawer-location')!} >\r\n                <IconButton \r\n                    style={{backgroundColor: '#ffffff',\r\n                        position: 'absolute', top: '0', right: '0', margin: '15px'}}\r\n                    onClick={onCurrectLocationClick} >\r\n                    <MdIcons.MdMyLocation size={18}/>\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <div style={{background: '#f3f3f3', height: '300%'}}>\r\n                <Grid container style={{width: '300px', marginTop: '50px'}}>\r\n                    <Box borderRadius={16} className='box-default' style={{margin: '20px auto 10px auto'}}>\r\n                        <GooglePlaces />\r\n                    </Box>\r\n                    <Box borderRadius={16} className='box-default' style={{margin: '10px auto'}}>\r\n                        <LastLocations />\r\n                    </Box>\r\n                    <Box borderRadius={16} className='box-default' style={{margin: '10px auto'}}>\r\n                        <LanguageOptions />\r\n                    </Box>\r\n                    <Box borderRadius={16} className='box-default' style={{margin: '10px auto'}}>\r\n                        <BackgroundImageToggle />\r\n                    </Box>\r\n                    <Box borderRadius={16} className='box-default' style={{margin: '10px auto'}}>\r\n                        <About />\r\n                    </Box>\r\n                </Grid>\r\n            </div>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default OptionsDrawer;","import { Button, ButtonGroup, IconButton, Tooltip } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as WiIcons from 'react-icons/wi';\r\nimport * as MdIcons from 'react-icons/md';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/rootStore';\r\nimport OptionsDrawer from '../OptionsDrawer/OptionsDrawer';\r\n\r\ninterface QuickNavigationLocalState {\r\n    drawer: boolean;\r\n}\r\n\r\nconst QuickNavigation = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    const [navState, setNavState] = useState<QuickNavigationLocalState>({drawer: false});\r\n\r\n    const onOptionsButtonClick = () => {\r\n        setNavState({drawer: !navState.drawer});\r\n    }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            <Tooltip title={localization.language.get('nav-settings')!} >\r\n                <IconButton \r\n                    style={{backgroundColor: '#ffffff', opacity: '0.9',\r\n                        position: 'absolute', top: '0', left: '0', margin: '15px'}}\r\n                    onClick={onOptionsButtonClick}>\r\n                    <MdIcons.MdMenu size={18} color='#000' />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <ButtonGroup variant='outlined' size='medium' style={{margin: '130px 0 0 0', background: 'white', opacity: '0.9'}}>\r\n                <Button startIcon={<WiIcons.WiThermometer />}\r\n                    component={Link} to={'/'}>{localization.language.get('nav-now')}</Button>\r\n                <Button startIcon={<WiIcons.WiTime4 />}\r\n                    component={Link} to={'/hourly'}>{localization.language.get('nav-hourly')}</Button>\r\n                <Button startIcon={<WiIcons.WiWindDeg />}\r\n                    component={Link} to={'/forecast'}>{localization.language.get('nav-later')}</Button>\r\n            </ButtonGroup>\r\n            <OptionsDrawer open={navState.drawer} onClose={onOptionsButtonClick} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default QuickNavigation;","import { Typography } from '@material-ui/core';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { getRandomWeatherImage, getUnsplashOption, getUnsplashImageLink } from '../../utils/ImageUtil';\r\n\r\ninterface BackgroundWithLocationHOCProps {}\r\n\r\nconst BackgroundWithLocationHOC: React.FC<BackgroundWithLocationHOCProps> = (props) => {\r\n\r\n    const currentWeather = useSelector((state: AppState) => state.weatherReducer.weather);\r\n    const [weatherImage, setweatherImage] = useState('');\r\n    const [weatherLocation, setWeatherLocation] = useState('');\r\n    \r\n    useEffect(() => {\r\n        if (currentWeather.currentWeather !== undefined) {\r\n            const imageLink = getUnsplashOption() ?\r\n                              getUnsplashImageLink() :\r\n                              getRandomWeatherImage(currentWeather.currentWeather.weather[0].id);\r\n            setweatherImage(imageLink);\r\n            setWeatherLocation(currentWeather.coordinates.locationName);\r\n        }\r\n    },[currentWeather.currentWeather, currentWeather.coordinates]);\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div className='fullscreen-image' style={{\r\n                    backgroundImage: `url(${weatherImage})`,\r\n                    backgroundPosition: 'center center',\r\n                    backgroundSize: 'cover',\r\n                    backgroundRepeat: 'no-repeat',\r\n                    }}>\r\n                <div>\r\n                    <div>{props.children}</div>\r\n                    <div style={weatherLocation === '' ? {display: 'none'} :\r\n                                {marginTop: '12px',\r\n                                padding: '5px 20px',\r\n                                display: 'inline-block',\r\n                                background: 'rgba(0, 0, 0, 0.2)',\r\n                                backdropFilter: 'blur(2px)',\r\n                                borderRadius: '12px'}}>\r\n                        <Typography variant='subtitle2'\r\n                            style={{color: '#ffffff', fontSize: '12px'}}>\r\n                                {weatherLocation}\r\n                            </Typography>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default BackgroundWithLocationHOC;","import React from \"react\";\r\nimport 'fontsource-roboto';\r\nimport { Grid, Typography, Box } from \"@material-ui/core\";\r\nimport { Spring } from 'react-spring/renderprops';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\nimport { AppState } from \"../../store/rootStore\";\r\nimport { Languages } from \"../../localization/model/localizationModel\";\r\n\r\ninterface CurrentWeatherProps {\r\n    temperature: number,\r\n    feelsLike: number,\r\n    description: string,\r\n    weatherIconId: number,\r\n    day: boolean\r\n}\r\n\r\nconst CurrentWeather: React.FC<CurrentWeatherProps> = (props) => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    return (\r\n        <Spring from={{opacity: 0}} to={{opacity: 1}}>\r\n            { sprops => \r\n                <Box borderRadius={16} className='box-default' style={sprops}>\r\n                    <Grid container spacing={2} style={{marginTop: '20px', marginBottom: '30px'}}>\r\n                        <Grid item xs={6}>\r\n                            <div style={{textAlign: 'right'}}>\r\n                                <WeatherIcon iconId={props.weatherIconId} day={props.day}\r\n                                size={localization.selected === Languages.ENGLISH ? 140 : 110}/>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <div style={{textAlign: 'left'}}>\r\n                                <Spring\r\n                                    from={{number: 0}}\r\n                                    to={{number: props.temperature}}\r\n                                    delay={100}>\r\n                                        {props => <Typography variant='h2' className='typography-primary'>{props.number.toFixed()}&deg;</Typography> }\r\n                                </Spring>\r\n                                <Typography variant='h6' className='typography-primary'>{localization.language.get('current-feels')!} {props.feelsLike}&deg;</Typography>\r\n                                <Typography variant='subtitle1' className='typography-secondary'>\r\n                                    {localization.selected === Languages.ENGLISH ? props.description : ''}\r\n                                </Typography>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            }\r\n        </Spring>\r\n    );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from 'react';\r\nimport { Grid, Box } from '@material-ui/core';\r\nimport DetailItem from './DetailItem/DetailItem';\r\nimport DetailItemType from './DetailItem/DetailItemTypes';\r\nimport { ICurrentWeather } from '../../store/Weather/models/Weather';\r\nimport { UnixUTCToHourMinuteString } from '../../utils/DateConverter';\r\nimport { Spring } from 'react-spring/renderprops';\r\n\r\ninterface DetailWeatherProps {\r\n    currentWeather: ICurrentWeather;\r\n    precipitation: number;\r\n}\r\n\r\nconst DetailWeather: React.FC<DetailWeatherProps> = (props) => {\r\n    return (\r\n        <Spring from={{opacity: 0}} to={{opacity: 1}} delay={200}>\r\n                { sprops => \r\n                    <div style={sprops}>\r\n                        <Box borderRadius={16} className='box-default'>\r\n                            <div style={{margin: '0 auto 30px auto', width: '85%'}}>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.PRECIPITATION_CHANCE} value={props.precipitation}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.WIND} value={props.currentWeather.windSpeed}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.UV_INDEX} value={props.currentWeather.uvi}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.CLOUD_COVER} value={props.currentWeather.clouds}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.PRESSURE} value={props.currentWeather.pressure}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.HUMIDITY} value={props.currentWeather.humidity}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.DEW_POINT} value={props.currentWeather.dewPoint}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.VISIBILITY} value={props.currentWeather.visibility}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.SUNRISE} value={UnixUTCToHourMinuteString(props.currentWeather.sunrise)}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} md={4} lg={3}>\r\n                                        <DetailItem itemType={DetailItemType.SUNSET} value={UnixUTCToHourMinuteString(props.currentWeather.sunset)}/>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </div>\r\n                        </Box>\r\n                    </div>\r\n                }\r\n        </Spring>\r\n    );\r\n}\r\n\r\nexport default DetailWeather;","import axios from \"axios\";\r\nimport env from '../utils/env';\r\n\r\nconst instance = axios.create({\r\n    baseURL:\r\n        env.getBaseAPI() ||\r\n        \"https://raw.githubusercontent.com/Predator7/react-weather/main/src/sample-api/weather.json\",\r\n});\r\n\r\nexport default instance;\r\n","import { IWeather } from \"./Weather\";\r\n\r\nexport const FETCH_WEATHER_REQUEST = \"FETCH_WEATHER_REQUEST\";\r\nexport const FETCH_WEATHER_SUCCESS = \"FETCH_WEATHER_SUCCESS\";\r\nexport const FETCH_WEATHER_FAILURE = \"FETCH_WEATHER_FAILURE\";\r\n\r\ninterface WeatherAsync {\r\n    loading: boolean;\r\n    error: string;\r\n    weather: IWeather;\r\n}\r\n\r\ninterface FetchWeatherRequest extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_REQUEST;\r\n}\r\ninterface FetchWeatherSuccess extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_SUCCESS;\r\n}\r\ninterface FetchWeatherFailure extends WeatherAsync {\r\n    type: typeof FETCH_WEATHER_FAILURE;\r\n}\r\n\r\nexport type WeatherActionTypes =\r\n    | FetchWeatherRequest\r\n    | FetchWeatherSuccess\r\n    | FetchWeatherFailure; // | PostWeather ...\r\n","import { IForecastWeather, IHourlyWeather, IWeather, IWeatherDescription } from \"../models/Weather\"\r\n\r\nexport const mapIWeather = (weather: any, locationName = ''): IWeather => {\r\n    const coords = mapIWeatherCoordinates(weather, locationName);\r\n    const current = mapICurrentWeather(weather.current);\r\n    const hourly = mapIHourlyWeather(weather.hourly);\r\n    const fcst = mapIForecastWeather(weather.daily);\r\n    \r\n    const convertedWeather: IWeather = {\r\n        coordinates: coords,\r\n        currentWeather: current,\r\n        hourlyWeather: hourly,\r\n        forecast: fcst\r\n    }\r\n\r\n    return convertedWeather;\r\n}\r\n\r\nconst mapIWeatherCoordinates = (coord: any, locationName: string) => {\r\n    return {\r\n        latitude: coord.lat,\r\n        longitude: coord.lon,\r\n        timezoneOffset: coord.timezone_offset * 1000,\r\n        locationName: locationName\r\n    }\r\n}\r\n\r\nconst mapICurrentWeather = (current: any) => {\r\n    const weatherDesc = mapIWeatherDescription(current.weather);\r\n    return {\r\n        dt: current.dt * 1000,\r\n        sunrise: current.sunrise * 1000,\r\n        sunset: current.sunset * 1000,\r\n        temp: current.temp.toFixed(0) === '-0' ? 0 : current.temp.toFixed(0),\r\n        feelsLike: current.feels_like.toFixed(0) === '-0' ? 0 : current.feels_like.toFixed(0),\r\n        pressure: current.pressure,\r\n        humidity: current.humidity,\r\n        dewPoint: current.dew_point.toFixed(0) === '-0' ? 0 : current.dew_point.toFixed(0),\r\n        uvi: current.uvi,\r\n        clouds: current.clouds,\r\n        visibility: current.visibility / 1000,\r\n        windSpeed: current.wind_speed.toFixed(0),\r\n        weather: weatherDesc\r\n    }\r\n}\r\n\r\nconst mapIWeatherDescription = (weather: any[]) => {\r\n    return weather.map(wdesc => {\r\n        return ({\r\n            id: wdesc.id,\r\n            main: wdesc.main,\r\n            description: wdesc.description,\r\n        } as IWeatherDescription);\r\n    });\r\n}\r\n\r\nconst mapIHourlyWeather = (hourlyWeather: any[]) => {\r\n    return hourlyWeather.map(hourly => {\r\n        return ({\r\n            dt: hourly.dt * 1000,\r\n            temp: hourly.temp.toFixed(0) === '-0' ? '0' : hourly.temp.toFixed(0),\r\n            windSpeed: hourly.wind_speed.toFixed(0),\r\n            precipitation: +(hourly.pop * 100).toFixed(0),\r\n            weather: mapIWeatherDescription(hourly.weather)\r\n        } as IHourlyWeather);\r\n    });\r\n}\r\n\r\nconst mapIForecastWeather = (forecastWeather: any[]) => {\r\n    return forecastWeather.map(forecast => {\r\n        return ({\r\n            dt: forecast.dt * 1000,\r\n            precipitation: +(forecast.pop * 100).toFixed(0),\r\n            maxTemp: forecast.temp.max.toFixed(0) === '-0' ? 0 : +forecast.temp.max.toFixed(0),\r\n            minTemp: forecast.temp.min.toFixed(0) === '-0' ? 0 : +forecast.temp.min.toFixed(0),\r\n            windSpeed: +forecast.wind_speed.toFixed(0),\r\n            uvi: forecast.uvi,\r\n            clouds: forecast.clouds,\r\n            pressure: forecast.pressure,\r\n            sunrise: forecast.sunrise * 1000,\r\n            sunset: forecast.sunset * 1000,\r\n            weather: mapIWeatherDescription(forecast.weather)\r\n        } as IForecastWeather);\r\n    });\r\n}","import { Dispatch } from 'redux';\r\nimport axios from '../../axios/axios-weather';\r\nimport env from '../../utils/env';\r\nimport { FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from './models/WeatherActionsModel';\r\nimport { IWeather } from './models/Weather';\r\nimport { AppActions } from '../actions';\r\nimport { mapIWeather } from './utils/WeatherMapper';\r\n\r\nconst requestWeather = (): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_REQUEST,\r\n        loading: true,\r\n        error: '',\r\n        weather: {} as IWeather\r\n    }\r\n}\r\n\r\nconst receiveWeather = (fetchedWeather: IWeather): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_SUCCESS,\r\n        loading: false,\r\n        error: '',\r\n        weather: fetchedWeather\r\n    }\r\n}\r\n\r\nconst invalidWeather = (): AppActions => {\r\n    return {\r\n        type: FETCH_WEATHER_FAILURE,\r\n        loading: false,\r\n        error: 'Something went wrong fetching weather',\r\n        weather: {} as any\r\n    }\r\n}\r\n\r\nexport const fetchWeather = (lat: number, long: number, locationName = '') => {\r\n    return (dispatch: Dispatch<AppActions>) => {\r\n        dispatch(requestWeather());\r\n        axios.get('/' + env.getApiDefaultParams(), {params: {lat: lat, lon: long}})\r\n            .then(response => { \r\n                dispatch(receiveWeather(mapIWeather(response.data, locationName)));\r\n            })\r\n            .catch(error => {\r\n                console.log(error.message);\r\n                dispatch(invalidWeather());\r\n            });\r\n    };\r\n}","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport * as Icons from 'react-icons/md';\r\nimport GooglePlaces from '../GooglePlaces/GooglePlaces';\r\n\r\nconst NoGeolocation = () => {\r\n    return(\r\n        <div>\r\n            <Box borderRadius={16}\r\n                style={{width: '75%', margin: '100px auto', padding: '20px', background: '#ffffff'}}>\r\n                <Icons.MdLocationOff size= {64} style={{marginBottom: '20px'}} />\r\n                <GooglePlaces />\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NoGeolocation;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport Geocode from \"react-geocode\";\r\nimport env from '../../utils/env';\r\nimport CurrentWeather from '../../components/CurrentWeather/CurrentWeather';\r\nimport DetailWeather from '../../components/DetailWeather/DetailWeather';\r\nimport FetchingWeather from '../../components/FetchingWeather/FetchingWeather';\r\nimport { ILocalization } from '../../localization/model/localizationModel';\r\nimport { AppActions } from '../../store/actions';\r\nimport { changeLanguage } from '../../store/Localization/LocalizationActions';\r\nimport { AppState } from '../../store/rootStore';\r\nimport { IWeather } from '../../store/Weather/models/Weather';\r\nimport { fetchWeather } from '../../store/Weather/WeatherActions';\r\nimport { UnixUTCDayIcon } from '../../utils/DateConverter';\r\nimport { regionRomania } from '../../localization/utils/coordinates';\r\nimport { getCurrentSavedLocationFromStorage } from '../../utils/LocationUtils';\r\nimport NoGeolocation from '../../components/NoGeolocation/NoGeolocation';\r\n\r\ninterface Props {}\r\n\r\ninterface LinkStateProps {\r\n    weather: IWeather;\r\n    localization: ILocalization;\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n    fetchWeather: (lat: number, long: number, locationName?: string) => void;\r\n    changeLanguage: (lang: string) => void;\r\n}\r\n\r\ntype LinkProps = Props & LinkStateProps & LinkDispatchProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => {\r\n    return {\r\n        weather: state.weatherReducer.weather,\r\n        localization: state.localizationReducer.language\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState, {}, AppActions>) => {\r\n    return {\r\n        fetchWeather: bindActionCreators(fetchWeather, dispatch),\r\n        changeLanguage: bindActionCreators(changeLanguage, dispatch)\r\n    }\r\n};\r\n\r\ninterface LocalState {\r\n    didLocate: boolean;\r\n}\r\n\r\nclass CurrentWeatherContainer extends Component<LinkProps> {\r\n\r\n    state: LocalState = {\r\n        didLocate: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.weather.currentWeather) {\r\n\r\n            const savedLocation = getCurrentSavedLocationFromStorage();\r\n            if (savedLocation !== null) {\r\n                this.props.fetchWeather(savedLocation.lat, savedLocation.long, savedLocation.name);\r\n            } else {\r\n\r\n                if ('geolocation' in navigator) {\r\n                    navigator.geolocation.getCurrentPosition(pos => {\r\n                        // Set starting language based on position \r\n                        const localLang = regionRomania(pos.coords.latitude, pos.coords.longitude) ? 'romanian' : 'english';\r\n                        this.setLocalization(localLang);\r\n                        this.fetchWeatherWithDescription(pos.coords.latitude, pos.coords.longitude);\r\n                    }, error => {\r\n                        // Display search location\r\n                        console.log(error.message);\r\n                        this.setState( () => {\r\n                            return { didLocate: false }\r\n                        });\r\n                    });\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    fetchWeatherWithDescription = (latitude: number, longitude: number) => {\r\n        Geocode.fromLatLng(latitude.toString(), longitude.toString(), env.getApiLocK())\r\n            .then(response => {\r\n                console.log(response);\r\n                this.props.fetchWeather(latitude, longitude, response.results[0].formatted_address);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.fetchWeather(latitude, longitude);\r\n            });\r\n    }\r\n\r\n    setLocalization = (localLang: string) => {\r\n        let language = localStorage.getItem('localization');\r\n        if (language !== null) {\r\n            this.props.changeLanguage(language);\r\n        } else {\r\n            localStorage.setItem('localization', localLang);\r\n            this.props.changeLanguage(localLang);\r\n        }\r\n    }\r\n\r\n    onLoadWeather = () => {\r\n        let weather = <FetchingWeather />;\r\n\r\n        if (this.props.weather.currentWeather && this.state.didLocate) {\r\n            weather = (\r\n                <div>\r\n                    <CurrentWeather\r\n                        temperature={this.props.weather.currentWeather.temp}\r\n                        feelsLike={this.props.weather.currentWeather.feelsLike}\r\n                        description={this.props.weather.currentWeather.weather[0].description}\r\n                        weatherIconId={this.props.weather.currentWeather.weather[0].id}\r\n                        day={UnixUTCDayIcon(this.props.weather.currentWeather.dt,\r\n                            this.props.weather.currentWeather.sunrise,\r\n                            this.props.weather.currentWeather.sunset)} />\r\n\r\n                <DetailWeather\r\n                    currentWeather={this.props.weather.currentWeather}\r\n                    precipitation={this.props.weather.hourlyWeather[0].precipitation} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.state.didLocate) {\r\n            weather = <NoGeolocation />;\r\n        }\r\n\r\n        return weather;\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.onLoadWeather()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentWeatherContainer);","export const regionRomania = (lat: number, long: number) => {\r\n    if (lat > 43.38 && lat < 48.16) {\r\n        if (long > 20.16 && long < 29.42) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","import React, { Suspense, useEffect, useState } from \"react\";\r\nimport { Switch, Route, withRouter, Redirect } from 'react-router-dom';\r\nimport Loading from \"./components/Loading/Loading\";\r\nimport QuickNavigation from \"./components/QuickNavigation/QuickNavigation\";\r\nimport BackgroundWithLocationHOC from \"./components/BackgroundWithLocationHOC/BackgroundWithLocationHOC\";\r\nimport CurrentWeatherContainer from \"./containers/CurrentWeatherContainer/CurrentWeatherContainer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppState } from \"./store/rootStore\";\r\n\r\n// Lazy load components\r\nconst ForecastContainer = React.lazy(() => {\r\n    return import(\"./containers/ForecastContainer/ForecastContainer\");\r\n});\r\n\r\nconst HourlyWeatherContainer = React.lazy(() => {\r\n    return import(\"./containers/HourlyWeatherContainer/HourlyWeatherContainer\");\r\n});\r\n\r\nfunction App() {\r\n\r\n    const currentWeather = useSelector((state: AppState) => state.weatherReducer);\r\n    const [showNavigation, setshowNavigation] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        if (currentWeather.loading !== true && currentWeather.weather !== null) {\r\n            setshowNavigation(true);\r\n        }\r\n    },[currentWeather]);\r\n\r\n    const showNavigationMenu = () => {\r\n        let navMenu = null;\r\n        if (showNavigation) {\r\n            navMenu = <BackgroundWithLocationHOC>\r\n                        <QuickNavigation />\r\n                    </BackgroundWithLocationHOC>\r\n        }\r\n        return navMenu;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {showNavigationMenu()}\r\n            <Suspense fallback={<Loading />}>\r\n                <Switch>\r\n                    <Route path='/hourly' render={() => <HourlyWeatherContainer/>} />\r\n                    <Route path='/forecast' render={() => <ForecastContainer/>} />\r\n                    <Route path='/' component={CurrentWeatherContainer} />\r\n                    <Redirect to='/' />\r\n                </Switch>\r\n            </Suspense>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { WeatherActionTypes, FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from './models/WeatherActionsModel';\r\nimport { IWeather } from './models/Weather';\r\n\r\ninterface WeatherState {\r\n    loading: boolean;\r\n    error: string;\r\n    weather: IWeather;\r\n}\r\n\r\nconst initialState: WeatherState = {\r\n    loading: true,\r\n    error: '',\r\n    weather: {} as IWeather\r\n}\r\n\r\nconst FetchWeatherRequest = () => {\r\n    return { loading: true, error: '', weather: {} as IWeather };\r\n}\r\n\r\nconst FetchWeatherSuccess = (action: WeatherActionTypes) => {\r\n    return { loading: false, error: '', weather: action.weather};\r\n}\r\n\r\nconst FetchWeatherFailure = (action: WeatherActionTypes) => {\r\n    return { loading: false, error: action.error, weather: {} as IWeather};\r\n}\r\n\r\nexport const weatherReducer = (state = initialState, action: WeatherActionTypes): WeatherState => {\r\n    switch (action.type) {\r\n        case FETCH_WEATHER_REQUEST: return FetchWeatherRequest();\r\n        case FETCH_WEATHER_SUCCESS: return FetchWeatherSuccess(action);\r\n        case FETCH_WEATHER_FAILURE: return FetchWeatherFailure(action);\r\n        default:\r\n          return state;\r\n    }\r\n}","import { ILocalization } from \"../../localization/model/localizationModel\";\r\nimport * as English from '../../localization/english';\r\nimport { CHANGE_LANGUAGE, LocalizationActionTypes } from \"./models/LocalizationActionsModel\";\r\n\r\ninterface LocalizationState {\r\n    language: ILocalization;\r\n}\r\n\r\nconst initialState: LocalizationState = {\r\n    language: English.localization\r\n}\r\n\r\nconst ChangeLanguage = (action: LocalizationActionTypes) => {\r\n    return { language: action.language };\r\n}\r\n\r\nexport const localizationReducer = (state = initialState, action: LocalizationActionTypes): LocalizationState => {\r\n    switch (action.type) {\r\n        case CHANGE_LANGUAGE: return ChangeLanguage(action);\r\n        default:\r\n          return state;\r\n    }\r\n}","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\r\nimport { createLogger } from 'redux-logger';\r\nimport { weatherReducer } from \"./Weather/WeatherReducer\";\r\nimport { localizationReducer } from './Localization/LocalizationReducer';\r\nimport { AppActions } from \"./actions\";\r\n\r\nconst logger = createLogger();\r\n\r\nlet middleware = [];\r\nif (process.env.NODE_ENV === 'development') {\r\n    middleware = [thunk as ThunkMiddleware<AppState, AppActions>, logger];\r\n} else {\r\n    middleware = [thunk as ThunkMiddleware<AppState, AppActions>];\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n    weatherReducer, localizationReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore<AppState, AppActions, {}, {}>(\r\n    rootReducer,\r\n    applyMiddleware(...middleware)\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { store } from \"./store/rootStore\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                <App />\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();","enum DetailItemType {\r\n    PRECIPITATION_CHANCE,\r\n    WIND,\r\n    UV_INDEX,\r\n    CLOUD_COVER,\r\n    PRESSURE,\r\n    HUMIDITY,\r\n    DEW_POINT,\r\n    VISIBILITY,\r\n    SUNRISE,\r\n    SUNSET\r\n}\r\n\r\nexport default DetailItemType;","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Grid } from '@material-ui/core';\r\nimport * as Icon from 'react-icons/wi'\r\nimport { useSelector } from 'react-redux';\r\nimport DetailItemType from './DetailItemTypes';\r\nimport { AppState } from '../../../store/rootStore';\r\n\r\ninterface DetailItemProps {\r\n    itemType: DetailItemType,\r\n    value: number | string\r\n}\r\n\r\nconst DetailItem: React.FC<DetailItemProps> = (props) => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    let itemIcon = <Icon.WiAlien size={42} />\r\n    let itemValue = 'NA';\r\n    let itemDescription = 'NA';\r\n\r\n    switch (props.itemType) {\r\n        case DetailItemType.PRECIPITATION_CHANCE:\r\n            itemIcon = <Icon.WiUmbrella size={42} color='#666' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = localization.language.get('detail-chance')!;\r\n            break;\r\n        case DetailItemType.WIND:\r\n            itemIcon = <Icon.WiStrongWind size={42} color='#becbd1' />\r\n            itemValue = props.value + ' km/h';\r\n            itemDescription = localization.language.get('detail-wind')!;\r\n            break;\r\n        case DetailItemType.UV_INDEX:\r\n            itemIcon = <Icon.WiSolarEclipse size={42} color='#cbad33' />\r\n            itemValue = props.value as string;\r\n            itemDescription = localization.language.get('detail-uv')!;\r\n            break;\r\n        case DetailItemType.CLOUD_COVER:\r\n            itemIcon = <Icon.WiCloudRefresh size={42} color='#becbd1' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = localization.language.get('detail-cloud')!;\r\n            break;\r\n        case DetailItemType.PRESSURE:\r\n            itemIcon = <Icon.WiBarometer size={42} color='#666' />\r\n            itemValue = props.value + ' mmHg';\r\n            itemDescription = localization.language.get('detail-pressure')!;\r\n            break;\r\n        case DetailItemType.HUMIDITY:\r\n            itemIcon = <Icon.WiHumidity size={42} color='#86c3d6' />\r\n            itemValue = props.value + ' %';\r\n            itemDescription = localization.language.get('detail-humidity')!;\r\n            break;\r\n        case DetailItemType.DEW_POINT:\r\n            itemIcon = <Icon.WiThermometerInternal size={42} color='#86c3d6' />\r\n            itemValue = props.value + ' ' + String.fromCharCode(176);\r\n            itemDescription = localization.language.get('detail-dew')!;\r\n            break;\r\n        case DetailItemType.VISIBILITY:\r\n            itemIcon = <Icon.WiTrain size={42} color='#999' />\r\n            itemValue = props.value + ' km';\r\n            itemDescription = localization.language.get('detail-visibility')!;\r\n            break;\r\n        case DetailItemType.SUNRISE:\r\n            itemIcon = <Icon.WiSunrise size={42} color='#edcf53' />\r\n            itemValue = props.value as string;\r\n            itemDescription = localization.language.get('detail-sunrise')!;\r\n            break;\r\n        case DetailItemType.SUNSET:\r\n            itemIcon = <Icon.WiSunset size={42} color='#edcf53' />\r\n            itemValue = props.value as string;\r\n            itemDescription = localization.language.get('detail-sunset')!;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return(\r\n        <Grid container spacing={2} style={{marginTop: '1px'}}>\r\n            <Grid item xs={4}>\r\n                <div style={{textAlign: 'right'}}>\r\n                    {itemIcon}\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <div style={{textAlign: 'left'}}>\r\n                    <Typography variant='subtitle2' className='typography-primary'><strong>{itemValue}</strong></Typography>\r\n                    <Typography variant='body2' className='typography-secondary'>{itemDescription}</Typography>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default DetailItem;","export interface ILocalization {\r\n    language: Map<string, string>;\r\n    weekArray: string[];\r\n    selected: Languages;\r\n}\r\n\r\nexport enum Languages {\r\n    ENGLISH,\r\n    ROMANIAN\r\n}","import { ILocalization } from \"../localization/model/localizationModel\";\r\n\r\nexport const UnixUTCToHourMinuteString = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    const hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();\r\n    const minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\r\n\r\n    return hours + ':' + minutes;\r\n}\r\n\r\nexport const UnixUTCToDayString = (utcTime: number, localization: ILocalization) => {\r\n    const days = localization.weekArray;\r\n    const date = new Date(utcTime);\r\n    return days[date.getDay()] + ' ' + date.getDate();\r\n}\r\n\r\nexport const UnixUTCHourString = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours();\r\n}\r\n\r\nexport const UnixUTCHourStringFakeMinutes = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getHours() + ':00';\r\n}\r\n\r\nexport const UnixUTCDayIcon = (utcTime: number, sunrise: number, sunset: number) => {\r\n    return (utcTime > sunrise && utcTime < sunset); \r\n}\r\n\r\nexport const UnixUTCToDayOfMonth = (utcTime: number) => {\r\n    const date = new Date(utcTime);\r\n    return date.getDate();\r\n}","import React from 'react';\r\nimport * as Icon from 'react-icons/wi'\r\n\r\ninterface WeatherIconProps {\r\n    iconId: number,\r\n    day: boolean,\r\n    size?: number\r\n}\r\n\r\nconst WeatherIcon: React.FC<WeatherIconProps> = (props) => {\r\n\r\n    // Default alien icon\r\n    let weatherIcon = <Icon.WiAlien size={props.size} color='#7d8b8e' />\r\n\r\n    // Thunderstorm\r\n    if (props.iconId >= 200 && props.iconId < 300) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiThunderstorm size={props.size} color='#7d8b8e' /> :\r\n            <Icon.WiNightThunderstorm size={props.size} color='#7d8b8e' />\r\n    }\r\n\r\n    // Drizzle\r\n    if (props.iconId >= 300 && props.iconId < 400) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiRainMix size={props.size} color='#96a7af' /> :\r\n            <Icon.WiNightRainMix size={props.size} color='#96a7af' />\r\n    }\r\n\r\n    // Rain\r\n    if (props.iconId >= 500 && props.iconId < 600) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiRain size={props.size} color='#83c2d3' /> :\r\n            <Icon.WiNightRain size={props.size} color='#83c2d3' />\r\n    }\r\n\r\n    // Snow\r\n    if (props.iconId >= 600 && props.iconId < 700) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiSnowflakeCold size={props.size} color='#97becf' /> :\r\n            <Icon.WiNightSnow size={props.size} color='#97becf' />\r\n    }\r\n\r\n    // Atmosphere\r\n    if (props.iconId >= 700 && props.iconId < 800) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiFog size={props.size} color='#becbd1' /> :\r\n            <Icon.WiNightFog size={props.size} color='#becbd1' />\r\n    }\r\n\r\n    // Clear\r\n    if (props.iconId === 800) {\r\n        weatherIcon = props.day ? \r\n            <Icon.WiDaySunny size={props.size} color='#edcf53' /> :\r\n            <Icon.WiNightClear size={props.size} color='#becbd1' />\r\n    }\r\n\r\n    // Cloudy\r\n    if (props.iconId > 800 && props.iconId < 900) {\r\n        weatherIcon = props.day ?\r\n            <Icon.WiCloudy size={props.size} color='#becbd1' /> :\r\n            <Icon.WiNightCloudy size={props.size} color='#becbd1' />\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {weatherIcon}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default WeatherIcon;","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppState } from \"../../store/rootStore\";\r\nimport { Sunny, Cloudy } from 'weather-styled-icon';\r\n\r\nconst FetchingWeather = () => {\r\n\r\n    const localization = useSelector((state: AppState) => state.localizationReducer.language);\r\n\r\n    const getLoadingIcon = () => {\r\n        let loadingIcon = <Sunny />;\r\n        switch (Math.floor(Math.random() * Math.floor(2))) {\r\n            case 0:\r\n                loadingIcon = <Sunny />;\r\n                break;\r\n            case 1:\r\n                loadingIcon = <Cloudy />;\r\n                break;\r\n            default:\r\n                loadingIcon = <Sunny />;\r\n                break;\r\n        }\r\n        return loadingIcon;\r\n    }\r\n\r\n    return <div style={{marginTop: '250px'}}>\r\n        {getLoadingIcon()}\r\n        <Typography variant='subtitle1'>{localization.language.get('loading')}</Typography>\r\n    </div>;\r\n};\r\n\r\nexport default FetchingWeather;"],"sourceRoot":""}